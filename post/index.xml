<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Raúl Padilla Delgado</title>
    <link>https://raulpadilladelgado.github.io/blog/post/</link>
    <description>Recent content in Posts on Raúl Padilla Delgado</description>
    <generator>Hugo</generator>
    <language>es</language>
    <lastBuildDate>Mon, 09 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://raulpadilladelgado.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testcontainers para ejecución local</title>
      <link>https://raulpadilladelgado.github.io/blog/p/testcontainers-para-ejecuci%C3%B3n-local/</link>
      <pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/testcontainers-para-ejecuci%C3%B3n-local/</guid>
      <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;&#xA;&lt;p&gt;Cuando estamos desarrollando algún proyecto es muy común que necesitemos una dependencia externa al propio proyecto que estamos realizando como pueda ser una base de datos, un sistema de mensajería, etc. Nuestra aplicación está pensada para que sea desplegada en un entorno que no sea la máquina donde estamos programando para que usuarios finales puedan usarla. Podría ser “staging” y que sea entonces para usuarios que se dedicaran a probarla. También podría ser “production” y que sea entonces para usuarios finales, que probablemente paguen por el producto que desarrollamos. Sin embargo, no debemos olvidar que nosotros, como desarrolladores, también somos usuarios de alguna forma cuando se trata del entorno “local”.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Configurando un linter en flutter y otras herramientas</title>
      <link>https://raulpadilladelgado.github.io/blog/p/configurando-un-linter-en-flutter-y-otras-herramientas/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/configurando-un-linter-en-flutter-y-otras-herramientas/</guid>
      <description>&lt;h2 id=&#34;qué-es-un-_linter_&#34;&gt;¿Qué es un &lt;em&gt;linter&lt;/em&gt;?&lt;/h2&gt;&#xA;&lt;p&gt;Los &lt;em&gt;linter&lt;/em&gt; son herramientas esenciales en proyectos de código, ya que ayudan a mantener una base de código consistente y de alta calidad. Analizan el código en busca de posibles errores, violaciones de estilo y otros problemas, asegurando que el código siga las mejores prácticas y estándares de codificación acordados por el equipo. Al utilizar una herramienta de &lt;em&gt;linter&lt;/em&gt;, podemos detectar y solucionar problemas temprano, lo que resulta en un código más limpio y un proceso de desarrollo más fluido. Con la capacidad de aplicar convenciones de codificación, identificar posibles errores y mejorar la legibilidad del código, una herramienta de &lt;em&gt;linter&lt;/em&gt; es un activo valioso para cualquier proyecto de código. Al mantener un código consistente y de alta calidad, se facilita la colaboración entre los miembros del equipo, se reducen los conflictos y se mejora la eficiencia en el desarrollo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatizando tareas con Task</title>
      <link>https://raulpadilladelgado.github.io/blog/p/automatizando-tareas-con-task/</link>
      <pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/automatizando-tareas-con-task/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;&#xA;&lt;p&gt;Típicamente, cuando estamos desarrollando código, hacemos mucho uso de la terminal para ejecutar distintos comandos que nos permiten, por ejemplo, comprobar que nuestros &lt;em&gt;test&lt;/em&gt; pasan, descargar dependencias, arrancar la aplicación en local&amp;hellip; Estos comandos suelen ser largos y nos puede resultar difícil recordarlos o simplemente tenemos que ejecutar varios porque encadenan una función que queremos realizar sobre nuestro código.&lt;/p&gt;&#xA;&lt;p&gt;Es aquí donde nos preguntamos si existía alguna herramienta que nos simplificara esta tarea y que fuera fácil de implementar y usar. La primera que se nos ocurrió debido a su popularidad fue Makefile. Indagando un poco más sobre qué es esta tecnología y para qué fue creada, llegamos a la conclusión de que su propósito principal es describir las dependencias entre los archivos fuente de un proyecto y las reglas para compilarlos, así como generar ejecutables. Esta definición no cuadraba mucho con el tipo de herramienta que estábamos buscando, por lo que decidimos descartarla.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Programación reactiva, que es y como usarla en Spring Boot</title>
      <link>https://raulpadilladelgado.github.io/blog/p/programaci%C3%B3n-reactiva-que-es-y-como-usarla-en-spring-boot/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/programaci%C3%B3n-reactiva-que-es-y-como-usarla-en-spring-boot/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;&#xA;&lt;p&gt;Los lenguajes de programación y los &lt;em&gt;frameworks&lt;/em&gt; evolucionan con el tiempo para ofrecer a los desarrolladores una forma&#xA;más simple y eficaz de resolver los problemas del mundo real y conseguir una solución adecuada según el contexto. Por&#xA;ejemplo, cuando nació la programación orientada a objetos se pudo romper la barrera entre desarrollador y experto de&#xA;producto plasmando la problemática en objetos de dominio que actuaban como lenguaje común para ambas partes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comprobar versiones de dependencias de Gradle en las Pull Request</title>
      <link>https://raulpadilladelgado.github.io/blog/p/comprobar-versiones-de-dependencias-de-gradle-en-las-pull-request/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/comprobar-versiones-de-dependencias-de-gradle-en-las-pull-request/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;&#xA;&lt;p&gt;Creo que es una realidad imperativa la relevancia de mantener actualizadas las versiones que utilizamos de&#xA;librerías/dependencias externas en nuestros proyectos. Ya sea porque evitamos brechas de seguridad que se propagan desde&#xA;ese factor externo hasta nuestro código o también incluso porque las pequeñas actualizaciones son más fáciles de&#xA;incorporar.&#xA;Cambiar algunas grandes versiones más adelante, junto con las complicaciones que esto conlleva, puede hacer que sea un&#xA;auténtico sufrimiento tener que adaptar nuestro código a los nuevos mandatos de la dependencia externa, ya que han&#xA;ocurrido cambios que rompen con lo que actualmente usábamos.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Código sostenible</title>
      <link>https://raulpadilladelgado.github.io/blog/p/c%C3%B3digo-sostenible/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/c%C3%B3digo-sostenible/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;&#xA;&lt;p&gt;Toda la información que encontrarás aquí está basada en el libro de Carlos Blé&#xA;&lt;a class=&#34;link&#34; href=&#34;https://codigosostenible.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&#xA;    &gt;&amp;ldquo;Código sostenible&amp;rdquo;&lt;/a&gt;. En este post hablaré sobre lo que he aprendido con la lectura de este&#xA;libro. Serán unas breves nociones lo que destacaré, por lo que para obtener la mejor experiencia te recomiendo que leas&#xA;el libro original, te será muy útil el detalle con el que se explican los conceptos y los ejemplos usados en esta guía&#xA;para realizar código limpio y fácil de mantener.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Consumer Driven Contract Testing</title>
      <link>https://raulpadilladelgado.github.io/blog/p/consumer-driven-contract-testing/</link>
      <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/consumer-driven-contract-testing/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;Consumer driven contract testing&lt;/em&gt; es un tipo de prueba que nos garantiza que un proveedor cumple lo acordado con&#xA;un consumidor. Por ejemplo, en una API usaríamos este tipo de pruebas para asegurar que el proveedor recibe una&#xA;petición y devuelve la respuesta esperada.&lt;/p&gt;&#xA;&lt;p&gt;Cuando dos artefactos se comunican entre sí, típicamente lo suelen hacer mediante un mensaje, el cual tiene un&#xA;formato determinado. Ese formato hace que el consumidor dependa del productor para poder funcionar correctamente, ya que&#xA;su código se ajusta a un determinado formato de mensaje. Ese «acuerdo» entre ambas partes es lo que se denomina&#xA;«contrato». Es entonces gracias a &lt;em&gt;contract testing&lt;/em&gt; cuando podemos testear esa integración y asegurarnos que el mensaje&#xA;que se envía de un artefacto a otro tiene el formato acordado para que la integración entre ambos funcione a la&#xA;perfección.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Command Query Responsibility Segregation</title>
      <link>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</guid>
      <description>&lt;h1 id=&#34;contexto&#34;&gt;Contexto&lt;/h1&gt;&#xA;&lt;p&gt;CQRS son las siglas de Command and Query Responsibility Segregation, un patrón que separa las operaciones de lectura y actualización para un almacén de datos. La flexibilidad creada por la migración a CQRS permite que un sistema evolucione mejor con el tiempo y evita que los comandos de actualización causen conflictos de fusión a nivel de dominio. Perfecto para aplicar en aplicaciones con gran carga de rendimiento.&lt;/p&gt;&#xA;&lt;p&gt;Gracias a CQRS somo capaces de desacoplar la lógica de nuestro sistema por acciones, y en los siguientes puntos veremos como trata de realizarlo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Moderno (Capítulo 1)</title>
      <link>https://raulpadilladelgado.github.io/blog/p/java-moderno-cap%C3%ADtulo-1/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/java-moderno-cap%C3%ADtulo-1/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;&#xA;&lt;p&gt;Este post tiene como objetivo mostrar una serie de trucos o tips sobre Java que no son más que nuevan funcionalidades&#xA;que han ido saliendo con el paso de los años y que hoy recojo aquí con la intención de mostrar las más útiles y ejemplos&#xA;de uso. Pertenece a una serie de post que siguen el mismo objetivo, puedes buscar en blog los demás post.&lt;/p&gt;&#xA;&lt;h2 id=&#34;try-with-resources&#34;&gt;Try with resources&lt;/h2&gt;&#xA;&lt;p&gt;Desde Java 7 existe la fórmula try-with-resources que permite vincular el cerrado de recursos a la conclusión del try, de modo que no se nos olvide hacerlo manualmente.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Entornos virtuales en Python</title>
      <link>https://raulpadilladelgado.github.io/blog/p/entornos-virtuales-en-python/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/entornos-virtuales-en-python/</guid>
      <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;&#xA;&lt;p&gt;En nuestras aplicaciones Python solemos hacer uso de librerías, y las diferentes versiones de estas pueden llegar a ser un quebradero de cabeza cuando son usadas desde varias aplicaciones. Además de las librerías, la propia instalación de Python tiene un sistema de versionado, por lo que nos ocurre el mismo problema. Una aplicación A no funciona con Python 3.8 pero la aplicación B lo necesita.&lt;/p&gt;&#xA;&lt;p&gt;La solución a este problema es usar un entorno virtual, que es un árbol de directorios autónomo que contiene una instalación de Python con una versión concreta, además de una serie de paquetes adicionales que queramos instalar.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSH para el día a día</title>
      <link>https://raulpadilladelgado.github.io/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/</guid>
      <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;&#xA;&lt;p&gt;SSH o Secure Shell Protocol, es un protocolo de comunicación así como pueda serlo los muy conocidos HTTP, HTTPS o FTP.&lt;/p&gt;&#xA;&lt;p&gt;En el caso de SSH nos permite la comunicación entre dispositivos dentro de la red, así como controlar o modificar ordenadores remotos.&lt;/p&gt;&#xA;&lt;p&gt;¿Que ofrece de nuevo entonces frente a otros protocolos de comunicación? Pues básicamente es un protocolo orientado a mejorar la seguridad de la comunicaciones encriptando los datos de modo que intrusos no puedan ver contenido protegido bajo el protocolo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Virtual Machine</title>
      <link>https://raulpadilladelgado.github.io/blog/p/java-virtual-machine/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/java-virtual-machine/</guid>
      <description>&lt;h1 id=&#34;java-virtual-machine-jvm&#34;&gt;Java Virtual Machine (JVM)&lt;/h1&gt;&#xA;&lt;h2 id=&#34;que-es&#34;&gt;¿Que es?&lt;/h2&gt;&#xA;&lt;p&gt;La Máquina Virtual de Java, en inglés Java Virtual Machine (JVM), es un componente dentro de JRE (Java Runtime Environment) necesario para la ejecución del código desarrollado en Java, es decir, es la máquina virtual la que permite ejecutar código Java en cualquier sistema operativo o arquitectura. De aquí que se conozca Java como un lenguaje multiplataforma. JVM interpreta y ejecuta instrucciones expresadas en un código máquina especial (bytecode), el cual es generado por el compilador de Java (también ocurre con los generados por los compiladores de lenguajes como Kotlin y Scala). Dicho de otra forma, es un proceso escrito en C o C++ que se encarga de interpretar el bytecode generado por el compilador y hacerlo funcionar sobre la infraestructura de ejecución. Como hay una versión de la JVM para cada entorno que sí conoce los detalles de ejecución de cada sistema, puede utilizar el código máquina equivalente para cada una de las instrucciones bytecode.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Toolify</title>
      <link>https://raulpadilladelgado.github.io/blog/p/toolify/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/toolify/</guid>
      <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;&#xA;&lt;p&gt;Recientemente he estado trabajando en un proyecto personal que surge por la necesidad de una función específica en spotify, que no podía conseguir a través de la app oficial de la plataforma. Mi objetivo era poder organizar mis playlist por orden de fecha de estreno de la canción. Spotify te permite organizarlas por fecha en la que la añadiste a la playlist, pero no por el tipo de organización que yo quería.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Buenas prácticas en testing (Cap.1)</title>
      <link>https://raulpadilladelgado.github.io/blog/p/buenas-pr%C3%A1cticas-en-testing-cap.1/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/buenas-pr%C3%A1cticas-en-testing-cap.1/</guid>
      <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;&#xA;&lt;p&gt;Este post trata de exponer una serie de buenas prácticas o trucos a la hora de realizar testing de código, y forma parte de una serie de capítulos que pretenden seguir con el propósito.&lt;/p&gt;&#xA;&lt;p&gt;En esta primera iteración la idea es hablemos sobre TDD, programación funcional, patrones de diseño y estabilidad, todo esto orientado a los tests.&lt;/p&gt;&#xA;&lt;p&gt;Vamos al laboratorio! 🧪&lt;/p&gt;&#xA;&lt;h1 id=&#34;tdd-en-nuestros-tests&#34;&gt;TDD en nuestros tests&lt;/h1&gt;&#xA;&lt;p&gt;Test-Driven Development (TDD) es una práctica de programación que consiste en escribir primero las pruebas, después escribir el código fuente que pase la prueba satisfactoriamente y, por último, refactorizar el código escrito.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multi-reemplazo de texto usando Regex en IntelliJ</title>
      <link>https://raulpadilladelgado.github.io/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/</guid>
      <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;¿Que es una regex?&lt;/strong&gt;&lt;br&gt;&#xA;Regex hace referencia a “expresión regular” y se trata de la técnica que nos permite hacer búsquedas de una secuencia de caracteres atendiendo a un patrón de búsqueda.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;El uso de expresiones regulares nos puede simplificar y acelerar el proceso de tener que reemplazar varios textos que entre sí cumplen un patrón coincidente. Veamos un ejemplo para que sea más sencillo, supongamos que tenemos un escrito en el que varias personas se están presentando, por ejemplo:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arquitectura hexagonal</title>
      <link>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Arquitectura de software&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Reglas autoimpuestas al definir como diseñamos software&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;¿Que ganamos entonces imponiéndonos este tipo de reglas?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Buscamos la mantenibilidad: Somos capaces de mantener mejor el código gracias a como formamos la arquitectura&lt;/li&gt;&#xA;&lt;li&gt;Buscamos la variabilidad: Somos capaces de reemplazar piezas de nuestra arquitectura sin aparentemente un costo muy grande&lt;/li&gt;&#xA;&lt;li&gt;Buscamos el testing: Somos capaces de testear nuestro código de una forma rápida, sencilla y eficaz.&lt;/li&gt;&#xA;&lt;li&gt;Buscamos la simplicidad: Somos capaces de tener un código simétrico, que sea fácil de entender. Si entiende un caso de uso, serás capaz de entender cualquier otro, nuestro código se vuelve predecible.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Esto también nos aleja de errores que no queremos cometer:&lt;/p&gt;</description>
    </item>
    <item>
      <title>El arte de la línea de comandos</title>
      <link>https://raulpadilladelgado.github.io/blog/p/el-arte-de-la-l%C3%ADnea-de-comandos/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/el-arte-de-la-l%C3%ADnea-de-comandos/</guid>
      <description>&lt;h1 id=&#34;por-qué-aprender-bash&#34;&gt;¿Por qué aprender bash?&lt;/h1&gt;&#xA;&lt;p&gt;La respuesta corta es porque linux es realmente GNU/Linux. Sólo el kernel es linux, pero la colección base de utilidades que proporcionan el entorno Unix es proporcionada por GNU y el shell de GNU es bash. Es por esto que bash el shell por defecto que te encontrarás en cualquier distribución o servidor basado en linux.&lt;/p&gt;&#xA;&lt;p&gt;Hay muchas shells que se adaptan mejor a los propósitos o gustos individuales, como pueden ser zsh, pero creo que al ser un estandar es muy positivo dominar la herramienta para tener un desarrollo fluido, cómodo y productivo cuando necesites usarla o por si es tu shell de preferencia.&lt;/p&gt;</description>
    </item>
    <item>
      <title>¿Como funciona async await?</title>
      <link>https://raulpadilladelgado.github.io/blog/p/como-funciona-async-await/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/como-funciona-async-await/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Asíncrono&lt;/strong&gt; &amp;ldquo;Que no tiene lugar en completa correspondencia temporal con otro proceso o con la causa que lo produce.&amp;rdquo;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Recientemente he estado desarrollando un proyecto basado en Node JS que usaba una librería externa en la que sus métodos devolvían promesas. Sin tener mucha experiencia con lo asíncrono en javascript, para mi la forma más simple de entenderlo y aplicarlo correctamente fue la siguiente:&lt;/p&gt;&#xA;&lt;p&gt;Supongamos que tienes una promesa como por ejemplo:&lt;/p&gt;</description>
    </item>
    <item>
      <title>La personalidad en un aprendiz</title>
      <link>https://raulpadilladelgado.github.io/blog/p/la-personalidad-en-un-aprendiz/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/la-personalidad-en-un-aprendiz/</guid>
      <description>&lt;p&gt;Cuando me incorporé en el proyecto de uno de nuestros colaboradores, sentía que mis conocimientos estaban limitados y ejercía un rol de principiante, donde mi misión erradicaba en el papel de una esponja, si se me permite la comparación. Debía absorber toda la sabiduría de los compañeros con mayor experiencia laboral. Creo que esta sensación es algo natural, ya que, para cultivar los conceptos necesarios, se debe estudiar y practicar. En esta fase de asimilación de conceptos, cualquier consejo, feedback o enseñanza es de agradecimiento.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Versiona tus dotfiles</title>
      <link>https://raulpadilladelgado.github.io/blog/p/versiona-tus-dotfiles/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/versiona-tus-dotfiles/</guid>
      <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;&#xA;&lt;p&gt;Durante mucho tiempo fui usuario de Windows, pero un día decidí probar Linux y terminé por elegirlo como mi sistema operativo para trabajar. Depende&#xA;de cuando leas esto quizá el cambio haya sido al revés. Pero lo dicho, llegando a un mundo nuevo para mí, decidí probar distintas distribuciones Linux&#xA;para encontrar cuál era la que mejor se adaptaba al uso que le daría. Tras ver un curso en CodelyTV, pude aprender que la configuración tediosa que&#xA;hacemos día tras día desde que iniciamos en una máquina se puede resumir en la simple ejecución de un script, y puedo decir que ojalá haber conocido&#xA;está práctica tan simple, pero que aporta y ayuda tanto a la configuración personal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Principios SOLID</title>
      <link>https://raulpadilladelgado.github.io/blog/p/principios-solid/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/principios-solid/</guid>
      <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;&#xA;&lt;p&gt;Los principio SOLID son convenciones en cuanto a diseño de software que ayudan a conseguir un código más mantenible, tolerante a cambios, y testeable.&lt;/p&gt;&#xA;&lt;p&gt;Todos los desarrolladores de un equipo deberían tener nociones de diseño de software para fomentar la autonomía y agilidad del equipo&lt;/p&gt;&#xA;&lt;h1 id=&#34;huir-de-stupid-el-enemigo-de-solid&#34;&gt;Huir de STUPID, el enemigo de SOLID&lt;/h1&gt;&#xA;&lt;p&gt;S → Singleton: Hay un objeto que lo contiene todo. No necesita inyección de dependencias. Y se encuentra por todo el programa. Tiene demasiadas resposabilidades.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JWT Auth en Spring Boot</title>
      <link>https://raulpadilladelgado.github.io/blog/p/jwt-auth-en-spring-boot/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/jwt-auth-en-spring-boot/</guid>
      <description>&lt;h1 id=&#34;1-jwt-authentication&#34;&gt;1. JWT Authentication&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11-que-es-jwt&#34;&gt;1.1. ¿Que es JWT?&lt;/h2&gt;&#xA;&lt;p&gt;Dicho de forma sencilla, JWT, es una autenticación basada en tokens enviados a las peticiones por cabecera.&lt;/p&gt;&#xA;&lt;p&gt;Para más información: &lt;a class=&#34;link&#34; href=&#34;https://jwt.io/introduction/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&#xA;    &gt;https://jwt.io/introduction/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;12-como-funciona-jwt&#34;&gt;1.2. ¿Como funciona JWT?&lt;/h2&gt;&#xA;&lt;p&gt;&lt;figure &#xA;&#x9;&#xA;&#x9;&#x9;class=&#34;gallery-image&#34; &#xA;&#x9;&#x9;style=&#34;&#xA;&#x9;&#x9;&#x9;flex-grow: 172; &#xA;&#x9;&#x9;&#x9;flex-basis: 415px&#34;&#xA;&#x9;&gt;&#xA;&#x9;&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/jwt-auth-en-spring-boot/images/Untitled2.png&#34; data-size=&#34;697x403&#34;&gt;&#xA;&#x9;&#x9;&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/jwt-auth-en-spring-boot/images/Untitled2.png&#34;&#xA;&#x9;&#x9;&#x9;width=&#34;697&#34;&#xA;&#x9;&#x9;&#x9;height=&#34;403&#34;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;loading=&#34;lazy&#34;&#xA;&#x9;&#x9;&#x9;&gt;&#xA;&#x9;&lt;/a&gt;&#xA;&#x9;&#xA;&lt;/figure&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scrum vs Kanban</title>
      <link>https://raulpadilladelgado.github.io/blog/p/scrum-vs-kanban/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/scrum-vs-kanban/</guid>
      <description>&lt;h1 id=&#34;diferencias&#34;&gt;Diferencias&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Scrum&lt;/strong&gt;: Iteraciones de tiempo fijo (Sprints). La pila del producto (conjunto de tareas) tiene que tener al menos el tamaño de un Sprint. Limita el WIP (WorkInProgress) por iteración. No se permiten cambiar las tareas del Sprint, solo el Sprint. Roles de Scrum Master, de Product Owner y del equipo&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Kanban&lt;/strong&gt;:Trabajo continuo. Se arrastran las nuevas tareas por el panel hasta que lleguen a su estado final. Limita el WIP por el flujo de trabajo. Se puede modificar la tarea hasta que entra en flujo No existen roles.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Taller refactor Java &#43; IntelliJ</title>
      <link>https://raulpadilladelgado.github.io/blog/p/taller-refactor-java--intellij/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/taller-refactor-java--intellij/</guid>
      <description>&lt;p&gt;Recientemente estuve realizando una formación que impartía &lt;a class=&#34;link&#34; href=&#34;https://www.carlosble.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&#xA;    &gt;Carlos Ble&lt;/a&gt;. Dicha formación consistía en aprender trucos y consejos para aplicar a la hora de hacer refactor. Lejos de ser solo una charla, los alumnos estuvimos gran parte del tiempo practicando lo que íbamos aprendiendo con cada ejercicio, y ahora yo quiero hablar un poco acerca de ello.&lt;/p&gt;&#xA;&lt;p&gt;Tras concluir esta formación mi perspectiva acerca del refactor cambió mucho. Generalmente, tendemos a buscar los refactors más complicados, esos que simplifican 20 líneas de código en la mitad o casos por el estilo. Hay entender que el refactor no consiste en hacer el código lo más pequeño posible, porque menos código no es directamente proporcional con código más simple. Estuve viendo muchos ejemplos de que con cambios muy simple como puede ser un cambio de nombre llegas a lograr una mejor semántica en tu código. Los refactor en código legacy deben empezarse por algo sencillo, es decir, desde fuera hacia dentro de un método o una clase.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debloat Android</title>
      <link>https://raulpadilladelgado.github.io/blog/p/debloat-android/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/debloat-android/</guid>
      <description>&lt;p&gt;Hoy en día es fácil adquirir a un precio asequible un dispositivo con suficiente memoria de almacenamiento como para que no lo llenemos con un uso normal. Pero aún así, es perfectamente comprensible que llegues al punto de necesitar sacar unos megabytes de almacenamiento por algún lado.&lt;/p&gt;&#xA;&lt;p&gt;Hoy ofrezco una solución que no solo te ayudará a lograr más almacenamiento para tu Android, lograrás un mejor rendimiento, y lo mejor de todo es que lo amarás porque tendrás el control sobre lo que está instalado en tu dispositivo, solo tú eliges que está y que no.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git autostash</title>
      <link>https://raulpadilladelgado.github.io/blog/p/git-autostash/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/git-autostash/</guid>
      <description>&lt;h1 id=&#34;problema&#34;&gt;Problema&lt;/h1&gt;&#xA;&lt;p&gt;Intentas hacer un &lt;em&gt;pull&lt;/em&gt; pero tus cambios locales entran en conflicto con los del repo remoto. La solución que usaría sería hacer un &lt;em&gt;stash&lt;/em&gt; de mis cambios locales, que sería algo así como dejarlos de lado por el momento, y después hacer el &lt;em&gt;pull&lt;/em&gt;. Finalmente incluiríamos los cambios que habíamos dejado de lado.&lt;/p&gt;&#xA;&lt;p&gt;Existe una forma de automatizar esto, y lo podríamos hacer mediante la configuración de Git, para que cuando hagamos un &lt;em&gt;pull&lt;/em&gt;, nos deje de lado nuestros cambios locales y después sea decisión nuestra incluirlos o no después del &lt;em&gt;pull&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Revertir commits en Git</title>
      <link>https://raulpadilladelgado.github.io/blog/p/revertir-commits-en-git/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/revertir-commits-en-git/</guid>
      <description>&lt;h1 id=&#34;revertir-último-commit&#34;&gt;Revertir último commit&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; Un &lt;code&gt;--soft&lt;/code&gt; borrará el último commit pero mantendrá los cambios que has hecho. Un &lt;code&gt;--hard&lt;/code&gt; borrará el último commit y desechará los cambios que has hecho&lt;/p&gt;&#xA;&lt;h2 id=&#34;revertir-último-commit-local&#34;&gt;Revertir último commit (local)&lt;/h2&gt;&#xA;&lt;p&gt;Con este comando desaparecerá de tu rama el último &lt;em&gt;commit&lt;/em&gt; que has hecho.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git reset --hard HEAD~1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;revertir-último-commit-remoto&#34;&gt;Revertir último commit (remoto)&lt;/h2&gt;&#xA;&lt;p&gt;Si has llegado a subirlo al repositorio remoto, es tan sencillo como realizar el proceso en local y después actualizar el &lt;em&gt;repo&lt;/em&gt; remoto (&lt;code&gt;push&lt;/code&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Base de datos local con docker</title>
      <link>https://raulpadilladelgado.github.io/blog/p/base-de-datos-local-con-docker/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/base-de-datos-local-con-docker/</guid>
      <description>&lt;p&gt;&lt;em&gt;El siguiente ejemplo se ha desarrollado con Spring Boot.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Hacemos ciertos ajustes en &lt;a class=&#34;link&#34; href=&#34;http://applicacion.properties&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&#xA;    &gt;&lt;code&gt;applicacion.properties&lt;/code&gt;&lt;/a&gt; para configurar la conexión a la DB.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.jpa.database=POSTGRESQL&#xA;spring.datasource.platform=postgres&#xA;spring.datasource.url=jdbc:postgresql://localhost:5432/postgres&#xA;spring.datasource.username=postgres&#xA;spring.datasource.password=postgres&#xA;spring.jpa.show-sql=true&#xA;spring.jpa.generate-ddl=true&#xA;spring.jpa.hibernate.ddl-auto=create-drop&#xA;spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Creamos y arrancamos el contenedor en Docker que use la imagen de PostgreSQL.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --name my_postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres postgres&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Listo, ya podemos trabajar con nuestra base de datos en local 🥳&lt;/p&gt;</description>
    </item>
    <item>
      <title>PHPUnit basics</title>
      <link>https://raulpadilladelgado.github.io/blog/p/phpunit-basics/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/phpunit-basics/</guid>
      <description>&lt;h2 id=&#34;introducción-e-instalación&#34;&gt;Introducción e instalación&lt;/h2&gt;&#xA;&lt;p&gt;Este post surge por mi deseo de iniciar en el desarrollo de tests de código PHP mediante PHPUnit, un acercamiento que sirva para asimilar conceptos básicos. ¡Empezamos!.&lt;/p&gt;&#xA;&lt;p&gt;Lo primero que necesitamos es instalar PHPUnit en el proyecto, y ésto lo realizaremos gracias a composer.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;composer require --dev phpunit/phpunit ^latest&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Trás esto, en nuestra primera clase de test, debemos extender de TestCase, contenido en:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kata El juego de la vida</title>
      <link>https://raulpadilladelgado.github.io/blog/p/kata-el-juego-de-la-vida/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/kata-el-juego-de-la-vida/</guid>
      <description>&lt;p&gt;Mi implementación para este ejercicio de programación se basa en tener una clase &amp;ldquo;Cell&amp;rdquo;, que tendrá un atributo llamado &amp;ldquo;isAlive&amp;rdquo;(haciendo referencia a si la célula vive o no), y además otra clase llamada &amp;ldquo;World&amp;rdquo; que tiene un diccionario tipo clave(Integer) valor(Cell).&lt;/p&gt;&#xA;&lt;p&gt;En la clase &amp;ldquo;World&amp;rdquo; existe un método que cambia &amp;ldquo;de generación&amp;rdquo;, que comprueba que las células muertas que tengan exactamente tres células vecinas vivas(tres posiciones seguidas del diccionario con valor &amp;ldquo;isAlive&amp;rdquo; a true) revivan. Además, comprueba también que una célula viva que tenga dos o tres vecinos, siga con vida, en cambio, la célula que tenga menos de dos o más de tres vecinos, debe morir por &amp;ldquo;sobrepoblación o soledad&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clases, Interfaces y Genéricos</title>
      <link>https://raulpadilladelgado.github.io/blog/p/clases-interfaces-y-gen%C3%A9ricos/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/clases-interfaces-y-gen%C3%A9ricos/</guid>
      <description>&lt;h1 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h1&gt;&#xA;&lt;p&gt;Es una colección de métodos abstractos y propiedades constantes. En las interfaces se especifica qué se debe hacer pero no su implementación. Serán las clases que implementen estas interfaces las que describen la lógica del comportamiento de los métodos. Las clases que hereden de la interfaz solo podrán hacerlo de ella.&lt;/p&gt;&#xA;&lt;p&gt;Un momento muy útil en el que declarar una interfaz, puede ser cuando vemos que dos clases tienen el mismo contrato, por ejemplo, tenemos una clase coche y una clase moto, que implementan los mismos métodos de formas distintas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Principios fundamentales de los tipos de datos en Java</title>
      <link>https://raulpadilladelgado.github.io/blog/p/principios-fundamentales-de-los-tipos-de-datos-en-java/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/principios-fundamentales-de-los-tipos-de-datos-en-java/</guid>
      <description>&lt;h1 id=&#34;primitivos-y-wrappers-de-primitivos-en-java&#34;&gt;Primitivos y wrappers de primitivos en Java&lt;/h1&gt;&#xA;&lt;h2 id=&#34;asignar-una-variable-primitiva-usando-otra-variable-primitiva&#34;&gt;Asignar una variable primitiva usando otra variable primitiva&lt;/h2&gt;&#xA;&lt;p&gt;Con los primitivos, cuando asignamos el valor de una variable a el valor de otra variable, simplemente se genera una copia, por lo que la variable original no mutará su estado por más que la variable nueva decida cambiar.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {&#xA;    public static void main(String[] args) {&#xA;        int x = 0;&#xA;        int y = x;&#xA;        y=5;&#xA;        System.out.println(x);//x sigue valiendo 0&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Análisis del libro &#34;Implementation patterns&#34;</title>
      <link>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-implementation-patterns/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-implementation-patterns/</guid>
      <description>&lt;p&gt;Implementations Patterns, de Kent Beck, es un libro sobre programación que define buenas prácticas a seguir en el desarrollo de código en Java, con el objetivo de tener un código legible y del que nos sintamos orgullosos. Se busca mejorar la perspectiva que tenga un programador sobre el sistema que va a tratar, para que entienda que cuando escriba código, éste debe hablar por si solo, debe ser la respuesta correcta y simple a una pregunta que se haga una persona cuando debe resolver un problema. Podemos decir entonces que el libro trata la responsabilidad que debe asumir un programador para tener un código satisfactorio.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Patrón decorator</title>
      <link>https://raulpadilladelgado.github.io/blog/p/patr%C3%B3n-decorator/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/patr%C3%B3n-decorator/</guid>
      <description>&lt;p&gt;&lt;figure &#xA;&#x9;&#xA;&#x9;&#x9;class=&#34;gallery-image&#34; &#xA;&#x9;&#x9;style=&#34;&#xA;&#x9;&#x9;&#x9;flex-grow: 126; &#xA;&#x9;&#x9;&#x9;flex-basis: 302px&#34;&#xA;&#x9;&gt;&#xA;&#x9;&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/patr%C3%B3n-decorator/images/400px-Decorator_UML_class_diagram.svg.png&#34; data-size=&#34;400x317&#34;&gt;&#xA;&#x9;&#x9;&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/patr%C3%B3n-decorator/images/400px-Decorator_UML_class_diagram.svg.png&#34;&#xA;&#x9;&#x9;&#x9;width=&#34;400&#34;&#xA;&#x9;&#x9;&#x9;height=&#34;317&#34;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;loading=&#34;lazy&#34;&#xA;&#x9;&#x9;&#x9;alt=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png&#34;&gt;&#xA;&#x9;&lt;/a&gt;&#xA;&#x9;&#xA;&#x9;&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&#xA;    &gt;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png&lt;/a&gt;&lt;/figcaption&gt;&#xA;&#x9;&#xA;&lt;/figure&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Domina los JSON con GSON</title>
      <link>https://raulpadilladelgado.github.io/blog/p/domina-los-json-con-gson/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/domina-los-json-con-gson/</guid>
      <description>&lt;p&gt;Puede darse la situación de que en nuestra aplicación Java, necesitemos atender peticiones representadas en JSON, transformarlas a objetos, tratar los datos y devolver una respuesta en JSON. Los servicios REST o los Websockets son un buen ejemplo de esto.&lt;/p&gt;&#xA;&lt;p&gt;Para resolver este problema podemos implementar &amp;ldquo;a mano&amp;rdquo; la lógica de negocio para serializar y deserializar nuestro JSON, lo que supodrá un esfuerzo considerable. O podríamos hacer uso de alguna libería diseñada para este propósito como puede ser Gson.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker basics</title>
      <link>https://raulpadilladelgado.github.io/blog/p/docker-basics/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/docker-basics/</guid>
      <description>&lt;h1 id=&#34;imágenes-vs-contenedores&#34;&gt;&lt;strong&gt;Imágenes vs Contenedores&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Para entender claramente ambos conceptos, me ayuda asemejarlos a la programación habitual, entendiendo que las imágenes son como clases y los contenedores como los objetos instanciados de las clases.&lt;/p&gt;&#xA;&lt;p&gt;La imagen contiene la base para crear un contenedor, y éste carga la imagen para empezar a funcionar. Una imagen puede ser cargada en todos los contenedores que queramos, igual que un contenedor puede cargar varias imágenes. Cualquier cambio realizado en sistema de archivos del contenedor no afecta a la imagen, pues la imagen solo se usa para la creación del contenedor.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kata template engine</title>
      <link>https://raulpadilladelgado.github.io/blog/p/kata-template-engine/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/kata-template-engine/</guid>
      <description>&lt;p&gt;Recientemente, he realizado una kata en Java, que consistía en implementar un parseador de plantillas.&lt;/p&gt;&#xA;&lt;p&gt;Existe un método que recibe como parámetros la plantilla (String) a parsear, y un diccionario (Map) con todas las claves que vamos a sustituir en la cadena anterior. Es éste método el encargado de cambiar cada variable en la cadena por cada variable en el diccionario.&lt;/p&gt;&#xA;&lt;p&gt;Para el desarrollo del ejercicio, seguí la metodología de TDD, por lo que primero expuse una serie de casos en los que se definen como se debería comportar éste parseador testando la salida que devuelve con lo que esperamos, y poco a poco, realizando un test y el código justo y necesario para cada caso, fui viendo como llevar casos muy específicos hasta casos muy generales, llegando hasta la iteración sólo en el momento necesario, para no tener a una solución muy complicada desde el principio por intentar precipitarse en generalizar cuando solo necesitamos cubrir un caso específico.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Análisis del libro &#34;Diseño ágil con TDD&#34;</title>
      <link>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-dise%C3%B1o-%C3%A1gil-con-tdd/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-dise%C3%B1o-%C3%A1gil-con-tdd/</guid>
      <description>&lt;p&gt;&lt;figure &#xA;&#x9;&gt;&#xA;&#x9;&lt;a href=&#34;https://d2sofvawe08yqg.cloudfront.net/tdd-en-castellano/hero?1576861322&#34; &gt;&#xA;&#x9;&#x9;&lt;img src=&#34;https://d2sofvawe08yqg.cloudfront.net/tdd-en-castellano/hero?1576861322&#34;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;loading=&#34;lazy&#34;&#xA;&#x9;&#x9;&#x9;alt=&#34;Portada libro&#34;&gt;&#xA;&#x9;&lt;/a&gt;&#xA;&#x9;&#xA;&#x9;&lt;figcaption&gt;Portada libro&lt;/figcaption&gt;&#xA;&#x9;&#xA;&lt;/figure&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;introducción&#34;&gt;&lt;strong&gt;INTRODUCCIÓN&lt;/strong&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&amp;ldquo;Diseño Ágil con TDD&amp;rdquo;, por Carlos Ble, es un libro muy interesante que nos enseña como implementar Test-Driven Development en el desarrollo de código. Muestra como basar nuestro código en los Test que escribimos, y no al revés. A continuación comparto mis experiencias leyendo éste libro.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Evita primitive obsession</title>
      <link>https://raulpadilladelgado.github.io/blog/p/evita-primitive-obsession/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/evita-primitive-obsession/</guid>
      <description>&lt;p&gt;En la capa de lógica de nuestra aplicación se encuentra el código más personal del programador, ese código que no necesita basarse en primitivos para cumplir tipos de datos en transferencias porque es otra capa quien lo hará por ésta.&lt;/p&gt;&#xA;&lt;p&gt;Anteriormente he definido &amp;ldquo;el código más personal del trabajador&amp;rdquo;, y me refiero a que la estructura y legibilidad del código en ésta capa depende de como se implemente. Si no se nos exigen primitivos, podemos crear nuestros propios tipos para que cuando se lea el código mejoremos la expresividad y legibilidad, en una capa como la que menciono en la que se encuentra el núcleo de la aplicación y a su vez el código que más desarrollo y razonamiento necesita.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lombok annotations</title>
      <link>https://raulpadilladelgado.github.io/blog/p/lombok-annotations/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/lombok-annotations/</guid>
      <description>&lt;p&gt;Lombok es una biblioteca Java que nos permite reemplazar las líneas de código que creamos para los constructores, getter y setter, entre otros, por unas simple anotaciones, por lo que cuando creamos una clase solo definimos las propiedades y ésta librería hace el resto.&lt;/p&gt;&#xA;&lt;p&gt;Con una simple anotación(@Data), Lombok inyectará los métodos getter y setter para cada propiedad, además de un equals, hashCode y toString.&lt;/p&gt;&#xA;&lt;p&gt;&lt;figure &#xA;&#x9;&#xA;&#x9;&#x9;class=&#34;gallery-image&#34; &#xA;&#x9;&#x9;style=&#34;&#xA;&#x9;&#x9;&#x9;flex-grow: 146; &#xA;&#x9;&#x9;&#x9;flex-basis: 351px&#34;&#xA;&#x9;&gt;&#xA;&#x9;&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/lombok-annotations/images/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&#34; data-size=&#34;400x273&#34;&gt;&#xA;&#x9;&#x9;&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/lombok-annotations/images/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&#34;&#xA;&#x9;&#x9;&#x9;width=&#34;400&#34;&#xA;&#x9;&#x9;&#x9;height=&#34;273&#34;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;loading=&#34;lazy&#34;&#xA;&#x9;&#x9;&#x9;alt=&#34;https://1.bp.blogspot.com/&amp;ndash;CYarvynlTU/Xp24u-wh6zI/AAAAAAAAAKE/-pW3SGJ7qokEtPL93HgN911_hjvzZCnnQCLcBGAsYHQ/s400/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&#34;&gt;&#xA;&#x9;&lt;/a&gt;&#xA;&#x9;&#xA;&#x9;&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://1.bp.blogspot.com/&amp;amp;ndash;CYarvynlTU/Xp24u-wh6zI/AAAAAAAAAKE/-pW3SGJ7qokEtPL93HgN911_hjvzZCnnQCLcBGAsYHQ/s400/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&#xA;    &gt;https://1.bp.blogspot.com/&amp;ndash;CYarvynlTU/Xp24u-wh6zI/AAAAAAAAAKE/-pW3SGJ7qokEtPL93HgN911_hjvzZCnnQCLcBGAsYHQ/s400/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&lt;/a&gt;&lt;/figcaption&gt;&#xA;&#x9;&#xA;&lt;/figure&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploy básico usando Heroku y Git</title>
      <link>https://raulpadilladelgado.github.io/blog/p/deploy-b%C3%A1sico-usando-heroku-y-git/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/deploy-b%C3%A1sico-usando-heroku-y-git/</guid>
      <description>&lt;p&gt;Heroku nos va a permitir alojar nuestras aplicaciones en sus servidores, y acceder a éstas desde un enlace que nos proporcione.&lt;/p&gt;&#xA;&lt;p&gt;Tras crear una cuenta y descargar la línea de comandos de Heroku, nos dirigimos a la carpeta donde tengamos nuestro proyecto y ejecutamos lo siguiente:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Iniciar sesión con heroku&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;heroku login&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Inicializar repositorio con Git y primer commit.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kata Word Wrap</title>
      <link>https://raulpadilladelgado.github.io/blog/p/kata-word-wrap/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/kata-word-wrap/</guid>
      <description>&lt;p&gt;Recientemente he estado realizando una kata que consistía en partir una palabra (salto de línea) acorde a un ancho de columna, algo así como el funcionamiento de los editores de texto cuando se establece el ajuste de línea. La idea consistía en ajustar la palabras, y a su vez tantas veces el resto de ésta palabra como para que la longitud del texto en cada línea no supere el ancho de columna. Un ejercicio que da mucho que pensar y del cual pude experimentar como ir buscando poco a poco un patrón que se repite en el código para llevarlo hacía un bucle o una recursividad que haga lo que necesitamos para partir la palabra cuantas veces se necesite, y que controlamos en todo momento su funcionamiento sin necesidad de depurar y asegurando que va cumpliendo los test que proponemos.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reemplazar constructores por métodos de factoría</title>
      <link>https://raulpadilladelgado.github.io/blog/p/reemplazar-constructores-por-m%C3%A9todos-de-factor%C3%ADa/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/reemplazar-constructores-por-m%C3%A9todos-de-factor%C3%ADa/</guid>
      <description>&lt;p&gt;Pongamos el ejemplo de que creamos una clase &amp;ldquo;Texto&amp;rdquo; y queremos admitir para su atributo &amp;ldquo;texto&amp;rdquo; los valores nulos como String vacíos, podríamos implementar ésta funcionalidad en el constructor, algo que quedaría así:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public Texto(String texto){&#xA;&#x9;if(texto==null){texto=&amp;#34;&amp;#34;;}&#xA;&#x9;this.texto=texto;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Es perfectamente funcional, pero para conseguir un código en el que cada componente haga lo que se espera de él, lo mejor sería delegar ésta comprobación a un método de factoría, un método estático que llame al constructor, estableciendo el constructor privado.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring boot, primer contacto</title>
      <link>https://raulpadilladelgado.github.io/blog/p/spring-boot-primer-contacto/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/spring-boot-primer-contacto/</guid>
      <description>&lt;h1 id=&#34;inicio&#34;&gt;Inicio&lt;/h1&gt;&#xA;&lt;h2 id=&#34;arrancando-con-un-proyecto&#34;&gt;Arrancando con un proyecto&lt;/h2&gt;&#xA;&lt;p&gt;Para crear un proyecto de una forma rápida y sencilla he encontrado &lt;a class=&#34;link&#34; href=&#34;https://start.spring.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&#xA;    &gt;Spring Initializr&lt;/a&gt;. Es muy simple, basta con elegir lenguaje, versión y otras configuraciones, como los metadatos del proyecto, y finalmente las dependencias del proyecto Spring que usaremos.&lt;/p&gt;&#xA;&lt;p&gt;Si elegimos &amp;ldquo;generar&amp;rdquo; nos descarga un archivo zip que cual contiene el proyecto creado ya preparado para empezar a trabajar con él.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Value object VS Entity object</title>
      <link>https://raulpadilladelgado.github.io/blog/p/value-object-vs-entity-object/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/value-object-vs-entity-object/</guid>
      <description>&lt;h1 id=&#34;value-object&#34;&gt;Value object&lt;/h1&gt;&#xA;&lt;p&gt;En el modelo Value Object, un objeto se diferencia de otro por su contenido, no por su identidad propia.&lt;/p&gt;&#xA;&lt;p&gt;Podemos entender el concepto de Value Object con el ejemplo de las monedas. Aunque cada moneda de 1 euro tiene su propia identidad (un número de serie), la economía funciona porque entiende que una moneda de 1 euro es igual que otra moneda de un euro, ambas valen lo mismo y a efectos prácticos son iguales.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Patrones de diseño (DAO y DTO)</title>
      <link>https://raulpadilladelgado.github.io/blog/p/patrones-de-dise%C3%B1o-dao-y-dto/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/patrones-de-dise%C3%B1o-dao-y-dto/</guid>
      <description>&lt;h1 id=&#34;dao&#34;&gt;DAO&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;DAO encapsula el acceso a la base de datos.&lt;/strong&gt; Por lo que cuando la capa de lógica de negocio necesite interactuar con la base de datos, va a hacerlo a través de la API que le ofrece DAO. Generalmente esta API consiste en métodos CRUD (Create, Read, Update y Delete). Entonces por ejemplo &lt;strong&gt;cuando la capa de lógica de negocio necesite guardar un dato en la base de datos&lt;/strong&gt;, va a llamar a un método create(). &lt;strong&gt;Lo que haga este método, es problema de DAO&lt;/strong&gt; y depende de como DAO implemente el método create(), puede que lo implemente de manera que los datos se almacenen en una base de datos relacional como puede que lo implemente de manera que los datos se almacenen en ficheros de texto. Lo importante es que la capa de lógica de negocio no tiene porque saberlo, lo único que sabe es que el método create() va a guardar los datos, así como el método delete() va a eliminarlos, el método update() actualizarlos, etc. Pero no tiene idea de como interactúa DAO con la base de datos.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
