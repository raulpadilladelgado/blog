<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ra√∫l Padilla Delgado</title>
    <link>https://raulpadilladelgado.github.io/blog/post/</link>
    <description>Recent content in Posts on Ra√∫l Padilla Delgado</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Thu, 07 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://raulpadilladelgado.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C√≥digo sostenible</title>
      <link>https://raulpadilladelgado.github.io/blog/p/c%C3%B3digo-sostenible/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/c%C3%B3digo-sostenible/</guid>
      <description>Introducci√≥n Toda la informaci√≥n que encontrar√°s aqu√≠ est√° basada en el libro de Carlos Bl√© &amp;ldquo;C√≥digo sostenible&amp;rdquo;. En este post hablar√© sobre lo que he aprendido con la lectura de este libro. Ser√°n unas breves nociones lo que destacar√©, por lo que para obtener la mejor experiencia te recomiendo que leas el libro original, te ser√° muy √∫til el detalle con el que se explican los conceptos y los ejemplos usados en esta gu√≠a para realizar c√≥digo limpio y f√°cil de mantener.</description>
    </item>
    
    <item>
      <title>Consumer Driven Contract Testing</title>
      <link>https://raulpadilladelgado.github.io/blog/p/consumer-driven-contract-testing/</link>
      <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/consumer-driven-contract-testing/</guid>
      <description>Introducci√≥n Consumer driven contract testing es un tipo de prueba que nos garantiza que un proveedor cumple lo acordado con un consumidor. Por ejemplo, en una API usar√≠amos este tipo de pruebas para asegurar que el proveedor recibe una petici√≥n y devuelve la respuesta esperada.
Cuando dos artefactos se comunican entre s√≠, t√≠picamente lo suelen hacer mediante un mensaje, el cual tiene un formato determinado. Ese formato hace que el consumidor dependa del productor para poder funcionar correctamente, ya que su c√≥digo se ajusta a un determinado formato de mensaje.</description>
    </item>
    
    <item>
      <title>Command Query Responsibility Segregation</title>
      <link>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</guid>
      <description>Contexto CQRS son las siglas de Command and Query Responsibility Segregation, un patr√≥n que separa las operaciones de lectura y actualizaci√≥n para un almac√©n de datos.¬†La flexibilidad creada por la migraci√≥n a CQRS permite que un sistema evolucione mejor con el tiempo y evita que los comandos de actualizaci√≥n causen conflictos de fusi√≥n a nivel de dominio. Perfecto para aplicar en aplicaciones con gran carga de rendimiento.
Gracias a CQRS somo capaces de desacoplar la l√≥gica de nuestro sistema por acciones, y en los siguientes puntos veremos como trata de realizarlo.</description>
    </item>
    
    <item>
      <title>Java Moderno (Cap√≠tulo 1)</title>
      <link>https://raulpadilladelgado.github.io/blog/p/java-moderno-cap%C3%ADtulo-1/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/java-moderno-cap%C3%ADtulo-1/</guid>
      <description>Introducci√≥n Este post tiene como objetivo mostrar una serie de trucos o tips sobre Java que no son m√°s que nuevan funcionalidades que han ido saliendo con el paso de los a√±os y que hoy recojo aqu√≠ con la intenci√≥n de mostrar las m√°s √∫tiles y ejemplos de uso. Pertenece a una serie de post que siguen el mismo objetivo, puedes buscar en blog los dem√°s post.
Try with resources Desde Java 7 existe la f√≥rmula try-with-resources que permite vincular el cerrado de recursos a la conclusi√≥n del try, de modo que no se nos olvide hacerlo manualmente.</description>
    </item>
    
    <item>
      <title>Entornos virtuales en Python</title>
      <link>https://raulpadilladelgado.github.io/blog/p/entornos-virtuales-en-python/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/entornos-virtuales-en-python/</guid>
      <description>Introducci√≥n En nuestras aplicaciones Python solemos hacer uso de librer√≠as, y las diferentes versiones de estas pueden llegar a ser un quebradero de cabeza cuando son usadas desde varias aplicaciones. Adem√°s de las librer√≠as, la propia instalaci√≥n de Python tiene un sistema de versionado, por lo que nos ocurre el mismo problema. Una aplicaci√≥n A no funciona con Python 3.8 pero la aplicaci√≥n B lo necesita.
La soluci√≥n a este problema es usar un entorno virtual, que es un √°rbol de directorios aut√≥nomo que contiene una instalaci√≥n de Python con una versi√≥n concreta, adem√°s de una serie de paquetes adicionales que queramos instalar.</description>
    </item>
    
    <item>
      <title>SSH para el d√≠a a d√≠a</title>
      <link>https://raulpadilladelgado.github.io/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/</guid>
      <description>Introducci√≥n SSH o Secure Shell Protocol, es un protocolo de comunicaci√≥n as√≠ como pueda serlo los muy conocidos HTTP, HTTPS o FTP.
En el caso de SSH nos permite la comunicaci√≥n entre dispositivos dentro de la red, as√≠ como controlar o modificar ordenadores remotos.
¬øQue ofrece de nuevo entonces frente a otros protocolos de comunicaci√≥n? Pues b√°sicamente es un protocolo orientado a mejorar la seguridad de la comunicaciones encriptando los datos de modo que intrusos no puedan ver contenido protegido bajo el protocolo.</description>
    </item>
    
    <item>
      <title>Java Virtual Machine</title>
      <link>https://raulpadilladelgado.github.io/blog/p/java-virtual-machine/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/java-virtual-machine/</guid>
      <description>Java Virtual Machine (JVM) ¬øQue es? La M√°quina Virtual de Java, en ingl√©s Java Virtual Machine (JVM), es un componente dentro de JRE (Java Runtime Environment) necesario para la ejecuci√≥n del c√≥digo desarrollado en Java, es decir, es la m√°quina virtual la que permite ejecutar c√≥digo Java en cualquier sistema operativo o arquitectura. De aqu√≠ que se conozca Java como un lenguaje multiplataforma. JVM interpreta y ejecuta instrucciones expresadas en un c√≥digo m√°quina especial (bytecode), el cual es generado por el compilador de Java (tambi√©n ocurre con los generados por los compiladores de lenguajes como Kotlin y Scala).</description>
    </item>
    
    <item>
      <title>Toolify</title>
      <link>https://raulpadilladelgado.github.io/blog/p/toolify/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/toolify/</guid>
      <description>Introducci√≥n Recientemente he estado trabajando en un proyecto personal que surge por la necesidad de una funci√≥n espec√≠fica en spotify, que no pod√≠a conseguir a trav√©s de la app oficial de la plataforma. Mi objetivo era poder organizar mis playlist por orden de fecha de estreno de la canci√≥n. Spotify te permite organizarlas por fecha en la que la a√±adiste a la playlist, pero no por el tipo de organizaci√≥n que yo quer√≠a.</description>
    </item>
    
    <item>
      <title>Buenas pr√°cticas en testing (Cap.1)</title>
      <link>https://raulpadilladelgado.github.io/blog/p/buenas-pr%C3%A1cticas-en-testing-cap.1/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/buenas-pr%C3%A1cticas-en-testing-cap.1/</guid>
      <description>Introducci√≥n Este post trata de exponer una serie de buenas pr√°cticas o trucos a la hora de realizar testing de c√≥digo, y forma parte de una serie de cap√≠tulos que pretenden seguir con el prop√≥sito.
En esta primera iteraci√≥n la idea es hablemos sobre TDD, programaci√≥n funcional, patrones de dise√±o y estabilidad, todo esto orientado a los tests.
Vamos al laboratorio! üß™
TDD en nuestros tests Test-Driven Development (TDD) es una pr√°ctica de programaci√≥n que consiste en escribir primero las pruebas, despu√©s escribir el c√≥digo fuente que pase la prueba satisfactoriamente y, por √∫ltimo, refactorizar el c√≥digo escrito.</description>
    </item>
    
    <item>
      <title>Multi-reemplazo de texto usando Regex en IntelliJ</title>
      <link>https://raulpadilladelgado.github.io/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/</guid>
      <description>Introducci√≥n ¬øQue es una regex?
Regex hace referencia a ‚Äúexpresi√≥n regular‚Äù y se trata de la t√©cnica que nos permite hacer b√∫squedas de una secuencia de caracteres atendiendo a un patr√≥n de b√∫squeda.
El uso de expresiones regulares nos puede simplificar y acelerar el proceso de tener que reemplazar varios textos que entre s√≠ cumplen un patr√≥n coincidente. Veamos un ejemplo para que sea m√°s sencillo, supongamos que tenemos un escrito en el que varias personas se est√°n presentando, por ejemplo:</description>
    </item>
    
    <item>
      <title>Arquitectura hexagonal</title>
      <link>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</guid>
      <description>Introducci√≥n Arquitectura de software
Reglas autoimpuestas al definir como dise√±amos software
¬øQue ganamos entonces imponi√©ndonos este tipo de reglas?
Buscamos la mantenibilidad: Somos capaces de mantener mejor el c√≥digo gracias a como formamos la arquitectura Buscamos la variabilidad: Somos capaces de reemplazar piezas de nuestra arquitectura sin aparentemente un costo muy grande Buscamos el testing: Somos capaces de testear nuestro c√≥digo de una forma r√°pida, sencilla y eficaz. Buscamos la simplicidad: Somos capaces de tener un c√≥digo sim√©trico, que sea f√°cil de entender.</description>
    </item>
    
    <item>
      <title>El arte de la l√≠nea de comandos</title>
      <link>https://raulpadilladelgado.github.io/blog/p/el-arte-de-la-l%C3%ADnea-de-comandos/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/el-arte-de-la-l%C3%ADnea-de-comandos/</guid>
      <description>¬øPor qu√© aprender bash? La respuesta corta es porque linux es realmente GNU/Linux. S√≥lo el kernel es linux, pero la colecci√≥n base de utilidades que proporcionan el entorno Unix es proporcionada por GNU y el shell de GNU es bash. Es por esto que bash el shell por defecto que te encontrar√°s en cualquier distribuci√≥n o servidor basado en linux.
Hay muchas shells que se adaptan mejor a los prop√≥sitos o gustos individuales, como pueden ser zsh, pero creo que al ser un estandar es muy positivo dominar la herramienta para tener un desarrollo fluido, c√≥modo y productivo cuando necesites usarla o por si es tu shell de preferencia.</description>
    </item>
    
    <item>
      <title>¬øComo funciona async await?</title>
      <link>https://raulpadilladelgado.github.io/blog/p/como-funciona-async-await/</link>
      <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/como-funciona-async-await/</guid>
      <description>As√≠ncrono &amp;ldquo;Que no tiene lugar en completa correspondencia temporal con otro proceso o con la causa que lo produce.&amp;rdquo;
Recientemente he estado desarrollando un proyecto basado en Node JS que usaba una librer√≠a externa en la que sus m√©todos devolv√≠an promesas. Sin tener mucha experiencia con lo as√≠ncrono en javascript, para mi la forma m√°s simple de entenderlo y aplicarlo correctamente fue la siguiente:
Supongamos que tienes una promesa como por ejemplo:</description>
    </item>
    
    <item>
      <title>La personalidad en un aprendiz</title>
      <link>https://raulpadilladelgado.github.io/blog/p/la-personalidad-en-un-aprendiz/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/la-personalidad-en-un-aprendiz/</guid>
      <description>Cuando me incorpor√© en el proyecto de uno de nuestros colaboradores, sent√≠a que mis conocimientos estaban limitados y ejerc√≠a un rol de principiante, donde mi misi√≥n erradicaba en el papel de una esponja, si se me permite la comparaci√≥n. Deb√≠a absorber toda la sabidur√≠a de los compa√±eros con mayor experiencia laboral. Creo que esta sensaci√≥n es algo natural, ya que, para cultivar los conceptos necesarios, se debe estudiar y practicar. En esta fase de asimilaci√≥n de conceptos, cualquier consejo, feedback o ense√±anza es de agradecimiento.</description>
    </item>
    
    <item>
      <title>Versiona tus dotfiles</title>
      <link>https://raulpadilladelgado.github.io/blog/p/versiona-tus-dotfiles/</link>
      <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/versiona-tus-dotfiles/</guid>
      <description>Introducci√≥n Durante mucho tiempo fui usuario de Windows, pero un d√≠a decid√≠ probar Linux y termin√© por elegirlo como mi sistema operativo para trabajar. Llegando a un mundo nuevo para m√≠, decid√≠ probar distintas distribuciones Linux para encontrar cual era la que mejor se adaptaba al uso que que le dar√≠a. Tras ver un curso en CodelyTV, pude aprender que la configuraci√≥n que tediosa que hacemos d√≠a tras d√≠a desde que iniciamos en una m√°quina se puede resumir en la simple ejecucci√≥n de un script, y puedo decir que ojal√° haber conocido est√° pr√°tica tan simple pero que aporta y ayuda tanto a la configuraci√≥n personal.</description>
    </item>
    
    <item>
      <title>Principios SOLID</title>
      <link>https://raulpadilladelgado.github.io/blog/p/principios-solid/</link>
      <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/principios-solid/</guid>
      <description>Introducci√≥n Los principio SOLID son convenciones en cuanto a dise√±o de software que ayudan a conseguir un c√≥digo m√°s mantenible, tolerante a cambios, y testeable.
Todos los desarrolladores de un equipo deber√≠an tener nociones de dise√±o de software para fomentar la autonom√≠a y agilidad del equipo
Huir de STUPID, el enemigo de SOLID S ‚Üí Singleton: Hay un objeto que lo contiene todo. No necesita inyecci√≥n de dependencias. Y se encuentra por todo el programa.</description>
    </item>
    
    <item>
      <title>JWT Auth en Spring Boot</title>
      <link>https://raulpadilladelgado.github.io/blog/p/jwt-auth-en-spring-boot/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/jwt-auth-en-spring-boot/</guid>
      <description>1. JWT Authentication 1.1. ¬øQue es JWT? Dicho de forma sencilla, JWT, es una autenticaci√≥n basada en tokens enviados a las peticiones por cabecera.
Para m√°s informaci√≥n: https://jwt.io/introduction/
1.2. ¬øComo funciona JWT? Para obtener el token de acceso, el cliente env√≠a una solicitud de inicio de sesi√≥n al servidor de autenticaci√≥n con el nombre de usuario y la contrase√±a en el cuerpo de la solicitud.¬†El servidor valida el nombre de usuario y la contrase√±a, luego devuelve un token de acceso.</description>
    </item>
    
    <item>
      <title>Scrum vs Kanban</title>
      <link>https://raulpadilladelgado.github.io/blog/p/scrum-vs-kanban/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/scrum-vs-kanban/</guid>
      <description>Diferencias Scrum: Iteraciones de tiempo fijo (Sprints). La pila del producto (conjunto de tareas) tiene que tener al menos el tama√±o de un Sprint. Limita el WIP (WorkInProgress) por iteraci√≥n. No se permiten cambiar las tareas del Sprint, solo el Sprint. Roles de Scrum Master, de Product Owner y del equipo
Kanban:Trabajo continuo. Se arrastran las nuevas tareas por el panel hasta que lleguen a su estado final. Limita el WIP por el flujo de trabajo.</description>
    </item>
    
    <item>
      <title>Taller refactor Java &#43; IntelliJ</title>
      <link>https://raulpadilladelgado.github.io/blog/p/taller-refactor-java--intellij/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/taller-refactor-java--intellij/</guid>
      <description>Recientemente estuve realizando una formaci√≥n que impart√≠a Carlos Ble. Dicha formaci√≥n consist√≠a en aprender trucos y consejos para aplicar a la hora de hacer refactor. Lejos de ser solo una charla, los alumnos estuvimos gran parte del tiempo practicando lo que √≠bamos aprendiendo con cada ejercicio, y ahora yo quiero hablar un poco acerca de ello.
Tras concluir esta formaci√≥n mi perspectiva acerca del refactor cambi√≥ mucho. Generalmente, tendemos a buscar los refactors m√°s complicados, esos que simplifican 20 l√≠neas de c√≥digo en la mitad o casos por el estilo.</description>
    </item>
    
    <item>
      <title>Debloat Android</title>
      <link>https://raulpadilladelgado.github.io/blog/p/debloat-android/</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/debloat-android/</guid>
      <description>Hoy en d√≠a es f√°cil adquirir a un precio asequible un dispositivo con suficiente memoria de almacenamiento como para que no lo llenemos con un uso normal. Pero a√∫n as√≠, es perfectamente comprensible que llegues al punto de necesitar sacar unos megabytes de almacenamiento por alg√∫n lado.
Hoy ofrezco una soluci√≥n que no solo te ayudar√° a lograr m√°s almacenamiento para tu Android, lograr√°s un mejor rendimiento, y lo mejor de todo es que lo amar√°s porque tendr√°s el control sobre lo que est√° instalado en tu dispositivo, solo t√∫ eliges que est√° y que no.</description>
    </item>
    
    <item>
      <title>Git autostash</title>
      <link>https://raulpadilladelgado.github.io/blog/p/git-autostash/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/git-autostash/</guid>
      <description>Problema Intentas hacer un pull pero tus cambios locales entran en conflicto con los del repo remoto. La soluci√≥n que usar√≠a ser√≠a hacer un stash de mis cambios locales, que ser√≠a algo as√≠ como dejarlos de lado por el momento, y despu√©s hacer el pull. Finalmente incluir√≠amos los cambios que hab√≠amos dejado de lado.
Existe una forma de automatizar esto, y lo podr√≠amos hacer mediante la configuraci√≥n de Git, para que cuando hagamos un pull, nos deje de lado nuestros cambios locales y despu√©s sea decisi√≥n nuestra incluirlos o no despu√©s del pull.</description>
    </item>
    
    <item>
      <title>Revertir commits en Git</title>
      <link>https://raulpadilladelgado.github.io/blog/p/revertir-commits-en-git/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/revertir-commits-en-git/</guid>
      <description>Revertir √∫ltimo commit Importante: Un --soft borrar√° el √∫ltimo commit pero mantendr√° los cambios que has hecho. Un --hard borrar√° el √∫ltimo commit y desechar√° los cambios que has hecho
Revertir √∫ltimo commit (local) Con este comando desaparecer√° de tu rama el √∫ltimo commit que has hecho.
git reset --hard HEAD~1 Revertir √∫ltimo commit (remoto) Si has llegado a subirlo al repositorio remoto, es tan sencillo como realizar el proceso en local y despu√©s actualizar el repo remoto (push).</description>
    </item>
    
    <item>
      <title>Base de datos local con docker</title>
      <link>https://raulpadilladelgado.github.io/blog/p/base-de-datos-local-con-docker/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/base-de-datos-local-con-docker/</guid>
      <description>El siguiente ejemplo se ha desarrollado con Spring Boot.
Hacemos ciertos ajustes en applicacion.properties para configurar la conexi√≥n a la DB.
spring.jpa.database=POSTGRESQL spring.datasource.platform=postgres spring.datasource.url=jdbc:postgresql://localhost:5432/postgres spring.datasource.username=postgres spring.datasource.password=postgres spring.jpa.show-sql=true spring.jpa.generate-ddl=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true Creamos y arrancamos el contenedor en Docker que use la imagen de PostgreSQL.
docker run --name my_postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres postgres Listo, ya podemos trabajar con nuestra base de datos en local ü•≥
Para cualquier duda el proyecto se puede consultar aqu√≠: https://github.</description>
    </item>
    
    <item>
      <title>PHPUnit basics</title>
      <link>https://raulpadilladelgado.github.io/blog/p/phpunit-basics/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/phpunit-basics/</guid>
      <description>Introducci√≥n e instalaci√≥n Este post surge por mi deseo de iniciar en el desarrollo de tests de c√≥digo PHP mediante PHPUnit, un acercamiento que sirva para asimilar conceptos b√°sicos. ¬°Empezamos!.
Lo primero que necesitamos es instalar PHPUnit en el proyecto, y √©sto lo realizaremos gracias a composer.
composer require --dev phpunit/phpunit ^latest Tr√°s esto, en nuestra primera clase de test, debemos extender de TestCase, contenido en:
vendor ‚Üí phpunit ‚Üí framework ahora es momento de hacer la primera aserci√≥n</description>
    </item>
    
    <item>
      <title>Kata El juego de la vida</title>
      <link>https://raulpadilladelgado.github.io/blog/p/kata-el-juego-de-la-vida/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/kata-el-juego-de-la-vida/</guid>
      <description>Mi implementaci√≥n para este ejercicio de programaci√≥n se basa en tener una clase &amp;ldquo;Cell&amp;rdquo;, que tendr√° un atributo llamado &amp;ldquo;isAlive&amp;rdquo;(haciendo referencia a si la c√©lula vive o no), y adem√°s otra clase llamada &amp;ldquo;World&amp;rdquo; que tiene un diccionario tipo clave(Integer) valor(Cell).
En la clase &amp;ldquo;World&amp;rdquo; existe un m√©todo que cambia &amp;ldquo;de generaci√≥n&amp;rdquo;, que comprueba que las c√©lulas muertas que tengan exactamente tres c√©lulas vecinas vivas(tres posiciones seguidas del diccionario con valor &amp;ldquo;isAlive&amp;rdquo; a true) revivan.</description>
    </item>
    
    <item>
      <title>Clases, Interfaces y Gen√©ricos</title>
      <link>https://raulpadilladelgado.github.io/blog/p/clases-interfaces-y-gen%C3%A9ricos/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/clases-interfaces-y-gen%C3%A9ricos/</guid>
      <description>Interfaces Es una colecci√≥n de m√©todos abstractos y propiedades constantes. En las interfaces se especifica qu√© se debe hacer pero no su implementaci√≥n. Ser√°n las clases que implementen estas interfaces las que describen la l√≥gica del comportamiento de los m√©todos. Las clases que hereden de la interfaz solo podr√°n hacerlo de ella.
Un momento muy √∫til en el que declarar una interfaz, puede ser cuando vemos que dos clases tienen el mismo contrato, por ejemplo, tenemos una clase coche y una clase moto, que implementan los mismos m√©todos de formas distintas.</description>
    </item>
    
    <item>
      <title>Principios fundamentales de los tipos de datos en Java</title>
      <link>https://raulpadilladelgado.github.io/blog/p/principios-fundamentales-de-los-tipos-de-datos-en-java/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/principios-fundamentales-de-los-tipos-de-datos-en-java/</guid>
      <description>Primitivos y wrappers de primitivos en Java Asignar una variable primitiva usando otra variable primitiva Con los primitivos, cuando asignamos el valor de una variable a el valor de otra variable, simplemente se genera una copia, por lo que la variable original no mutar√° su estado por m√°s que la variable nueva decida cambiar.
public class Main { public static void main(String[] args) { int x = 0; int y = x; y=5; System.</description>
    </item>
    
    <item>
      <title>An√°lisis del libro &#34;Implementation patterns&#34;</title>
      <link>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-implementation-patterns/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-implementation-patterns/</guid>
      <description>Implementations Patterns, de Kent Beck, es un libro sobre programaci√≥n que define buenas pr√°cticas a seguir en el desarrollo de c√≥digo en Java, con el objetivo de tener un c√≥digo legible y del que nos sintamos orgullosos. Se busca mejorar la perspectiva que tenga un programador sobre el sistema que va a tratar, para que entienda que cuando escriba c√≥digo, √©ste debe hablar por si solo, debe ser la respuesta correcta y simple a una pregunta que se haga una persona cuando debe resolver un problema.</description>
    </item>
    
    <item>
      <title>Patr√≥n decorator</title>
      <link>https://raulpadilladelgado.github.io/blog/p/patr%C3%B3n-decorator/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/patr%C3%B3n-decorator/</guid>
      <description>https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png Es un patr√≥n de dise√±o que nos va a permitir agregar funcionalidad a un objeto existente sin cambiar su estructura. Se busca poder a√±adir din√°micamente funcionalidad a un Objeto. Esto nos permite no tener que crear sucesivas clases que hereden de la primera incorporando la nueva funcionalidad, sino otras que la implementan y se asocian a la primera.
Un gran momento para aplicarlo es cuando tenemos una clase que contiene m√©todos que realizan algo m√°s que l√≥gica de negocio.</description>
    </item>
    
    <item>
      <title>Domina los JSON con GSON</title>
      <link>https://raulpadilladelgado.github.io/blog/p/domina-los-json-con-gson/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/domina-los-json-con-gson/</guid>
      <description>Puede darse la situaci√≥n de que en nuestra aplicaci√≥n Java, necesitemos atender peticiones representadas en JSON, transformarlas a objetos, tratar los datos y devolver una respuesta en JSON. Los servicios REST o los Websockets son un buen ejemplo de esto.
Para resolver este problema podemos implementar &amp;ldquo;a mano&amp;rdquo; la l√≥gica de negocio para serializar y deserializar nuestro JSON, lo que supodr√° un esfuerzo considerable. O podr√≠amos hacer uso de alguna liber√≠a dise√±ada para este prop√≥sito como puede ser Gson.</description>
    </item>
    
    <item>
      <title>Docker basics</title>
      <link>https://raulpadilladelgado.github.io/blog/p/docker-basics/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/docker-basics/</guid>
      <description>Im√°genes vs Contenedores Para entender claramente ambos conceptos, me ayuda asemejarlos a la programaci√≥n habitual, entendiendo que las im√°genes son como clases y los contenedores como los objetos instanciados de las clases.
La imagen contiene la base para crear un contenedor, y √©ste carga la imagen para empezar a funcionar. Una imagen puede ser cargada en todos los contenedores que queramos, igual que un contenedor puede cargar varias im√°genes. Cualquier cambio realizado en sistema de archivos del contenedor no afecta a la imagen, pues la imagen solo se usa para la creaci√≥n del contenedor.</description>
    </item>
    
    <item>
      <title>Kata template engine</title>
      <link>https://raulpadilladelgado.github.io/blog/p/kata-template-engine/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/kata-template-engine/</guid>
      <description>Recientemente, he realizado una kata en Java, que consist√≠a en implementar un parseador de plantillas.
Existe un m√©todo que recibe como par√°metros la plantilla (String) a parsear, y un diccionario (Map) con todas las claves que vamos a sustituir en la cadena anterior. Es √©ste m√©todo el encargado de cambiar cada variable en la cadena por cada variable en el diccionario.
Para el desarrollo del ejercicio, segu√≠ la metodolog√≠a de TDD, por lo que primero expuse una serie de casos en los que se definen como se deber√≠a comportar √©ste parseador testando la salida que devuelve con lo que esperamos, y poco a poco, realizando un test y el c√≥digo justo y necesario para cada caso, fui viendo como llevar casos muy espec√≠ficos hasta casos muy generales, llegando hasta la iteraci√≥n s√≥lo en el momento necesario, para no tener a una soluci√≥n muy complicada desde el principio por intentar precipitarse en generalizar cuando solo necesitamos cubrir un caso espec√≠fico.</description>
    </item>
    
    <item>
      <title>An√°lisis del libro &#34;Dise√±o √°gil con TDD&#34;</title>
      <link>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-dise%C3%B1o-%C3%A1gil-con-tdd/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-dise%C3%B1o-%C3%A1gil-con-tdd/</guid>
      <description>Portada libro INTRODUCCI√ìN &amp;ldquo;Dise√±o √Ågil con TDD&amp;rdquo;, por Carlos Ble, es un libro muy interesante que nos ense√±a como implementar Test-Driven Development en el desarrollo de c√≥digo. Muestra como basar nuestro c√≥digo en los Test que escribimos, y no al rev√©s. A continuaci√≥n comparto mis experiencias leyendo √©ste libro.
¬øQUE BENEFICIOS NOS APORTA? Se presentan grandes beneficios de codificar de √©sta forma. Se habla de conseguir un c√≥digo simple, que haga lo que necesitamos para cada momento, que cuando falle nos de un correcto y constante feedback de porqu√© eso est√° ocurriendo, as√≠ como un c√≥digo legible y f√°cil de mantener.</description>
    </item>
    
    <item>
      <title>Evita primitive obsession</title>
      <link>https://raulpadilladelgado.github.io/blog/p/evita-primitive-obsession/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/evita-primitive-obsession/</guid>
      <description>En la capa de l√≥gica de nuestra aplicaci√≥n se encuentra el c√≥digo m√°s personal del programador, ese c√≥digo que no necesita basarse en primitivos para cumplir tipos de datos en transferencias porque es otra capa quien lo har√° por √©sta.
Anteriormente he definido &amp;ldquo;el c√≥digo m√°s personal del trabajador&amp;rdquo;, y me refiero a que la estructura y legibilidad del c√≥digo en √©sta capa depende de como se implemente. Si no se nos exigen primitivos, podemos crear nuestros propios tipos para que cuando se lea el c√≥digo mejoremos la expresividad y legibilidad, en una capa como la que menciono en la que se encuentra el n√∫cleo de la aplicaci√≥n y a su vez el c√≥digo que m√°s desarrollo y razonamiento necesita.</description>
    </item>
    
    <item>
      <title>Lombok annotations</title>
      <link>https://raulpadilladelgado.github.io/blog/p/lombok-annotations/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/lombok-annotations/</guid>
      <description>Lombok es una biblioteca Java que nos permite reemplazar las l√≠neas de c√≥digo que creamos para los constructores, getter y setter, entre otros, por unas simple anotaciones, por lo que cuando creamos una clase solo definimos las propiedades y √©sta librer√≠a hace el resto.
Con una simple anotaci√≥n(@Data), Lombok inyectar√° los m√©todos getter y setter para cada propiedad, adem√°s de un equals, hashCode y toString.
https://1.bp.blogspot.com/&amp;ndash;CYarvynlTU/Xp24u-wh6zI/AAAAAAAAAKE/-pW3SGJ7qokEtPL93HgN911_hjvzZCnnQCLcBGAsYHQ/s400/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png @Getter y Setter Se usan para generar un getter y setter para un atributo espec√≠fico.</description>
    </item>
    
    <item>
      <title>Deploy b√°sico usando Heroku y Git</title>
      <link>https://raulpadilladelgado.github.io/blog/p/deploy-b%C3%A1sico-usando-heroku-y-git/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/deploy-b%C3%A1sico-usando-heroku-y-git/</guid>
      <description>Heroku nos va a permitir alojar nuestras aplicaciones en sus servidores, y acceder a √©stas desde un enlace que nos proporcione.
Tras crear una cuenta y descargar la l√≠nea de comandos de Heroku, nos dirigimos a la carpeta donde tengamos nuestro proyecto y ejecutamos lo siguiente:
Iniciar sesi√≥n con heroku heroku login
Inicializar repositorio con Git y primer commit. git init
git add .
git commit -m &amp;quot;primer commit&amp;quot;
Crear espacio para nuestra app en servidor de heroku -&amp;gt; autom√°ticamente a√±ade un repositorio remoto &amp;ldquo;heroku&amp;rdquo; el que haremos push para subir nuestro proyecto a ese espacio.</description>
    </item>
    
    <item>
      <title>Kata Word Wrap</title>
      <link>https://raulpadilladelgado.github.io/blog/p/kata-word-wrap/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/kata-word-wrap/</guid>
      <description>Recientemente he estado realizando una kata que consist√≠a en partir una palabra (salto de l√≠nea) acorde a un ancho de columna, algo as√≠ como el funcionamiento de los editores de texto cuando se establece el ajuste de l√≠nea. La idea consist√≠a en ajustar la palabras, y a su vez tantas veces el resto de √©sta palabra como para que la longitud del texto en cada l√≠nea no supere el ancho de columna.</description>
    </item>
    
    <item>
      <title>Reemplazar constructores por m√©todos de factor√≠a</title>
      <link>https://raulpadilladelgado.github.io/blog/p/reemplazar-constructores-por-m%C3%A9todos-de-factor%C3%ADa/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/reemplazar-constructores-por-m%C3%A9todos-de-factor%C3%ADa/</guid>
      <description>Pongamos el ejemplo de que creamos una clase &amp;ldquo;Texto&amp;rdquo; y queremos admitir para su atributo &amp;ldquo;texto&amp;rdquo; los valores nulos como String vac√≠os, podr√≠amos implementar √©sta funcionalidad en el constructor, algo que quedar√≠a as√≠:
public Texto(String texto){ if(texto==null){texto=&amp;#34;&amp;#34;;} this.texto=texto; } Es perfectamente funcional, pero para conseguir un c√≥digo en el que cada componente haga lo que se espera de √©l, lo mejor ser√≠a delegar √©sta comprobaci√≥n a un m√©todo de factor√≠a, un m√©todo est√°tico que llame al constructor, estableciendo el constructor privado.</description>
    </item>
    
    <item>
      <title>Spring boot, primer contacto</title>
      <link>https://raulpadilladelgado.github.io/blog/p/spring-boot-primer-contacto/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/spring-boot-primer-contacto/</guid>
      <description>Inicio Arrancando con un proyecto Para crear un proyecto de una forma r√°pida y sencilla he encontrado Spring Initializr. Es muy simple, basta con elegir lenguaje, versi√≥n y otras configuraciones, como los metadatos del proyecto, y finalmente las dependencias del proyecto Spring que usaremos.
Si elegimos &amp;ldquo;generar&amp;rdquo; nos descarga un archivo zip que cual contiene el proyecto creado ya preparado para empezar a trabajar con √©l.
Estructura de un proyecto En el archivo pom.</description>
    </item>
    
    <item>
      <title>Value object VS Entity object</title>
      <link>https://raulpadilladelgado.github.io/blog/p/value-object-vs-entity-object/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/value-object-vs-entity-object/</guid>
      <description>Value object En el modelo Value Object, un objeto se diferencia de otro por su contenido, no por su identidad propia.
Podemos entender el concepto de Value Object con el ejemplo de las monedas. Aunque cada moneda de 1 euro tiene su propia identidad (un n√∫mero de serie), la econom√≠a funciona porque entiende que una moneda de 1 euro es igual que otra moneda de un euro, ambas valen lo mismo y a efectos pr√°cticos son iguales.</description>
    </item>
    
    <item>
      <title>Patrones de dise√±o (DAO y DTO)</title>
      <link>https://raulpadilladelgado.github.io/blog/p/patrones-de-dise%C3%B1o-dao-y-dto/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/patrones-de-dise%C3%B1o-dao-y-dto/</guid>
      <description>DAO DAO encapsula el acceso a la base de datos. Por lo que cuando la capa de l√≥gica de negocio necesite interactuar con la base de datos, va a hacerlo a trav√©s de la API que le ofrece DAO. Generalmente esta API consiste en m√©todos CRUD (Create, Read, Update y Delete). Entonces por ejemplo cuando la capa de l√≥gica de negocio necesite guardar un dato en la base de datos, va a llamar a un m√©todo create().</description>
    </item>
    
  </channel>
</rss>
