<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Raúl Padilla Delgado</title>
        <link>https://raulpadilladelgado.github.io/blog/</link>
        <description>Recent content on Raúl Padilla Delgado</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es</language>
        <lastBuildDate>Thu, 07 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://raulpadilladelgado.github.io/blog/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Código sostenible</title>
        <link>https://raulpadilladelgado.github.io/blog/p/c%C3%B3digo-sostenible/</link>
        <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/c%C3%B3digo-sostenible/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/c%C3%B3digo-sostenible/images/codigo-sostenible.png" alt="Featured image of post Código sostenible" /&gt;&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Toda la información que encontrarás aquí está basada en el libro de Carlos Blé
&lt;a class=&#34;link&#34; href=&#34;https://codigosostenible.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&amp;ldquo;Código sostenible&amp;rdquo;&lt;/a&gt;. En este post hablaré sobre lo que he aprendido con la lectura de este
libro. Serán unas breves nociones lo que destacaré, por lo que para obtener la mejor experiencia te recomiendo que leas
el libro original, te será muy útil el detalle con el que se explican los conceptos y los ejemplos usados en esta guía
para realizar código limpio y fácil de mantener.&lt;/p&gt;
&lt;h2 id=&#34;qué-es-código-sostenible&#34;&gt;¿Qué es código sostenible?&lt;/h2&gt;
&lt;p&gt;El código debe ser funcionalmente perfecto, debe cumplir todos los criterios especificados, pero además debe ser
fácil de entender, mantener y escalar.&lt;/p&gt;
&lt;p&gt;Si tu código no es sostenible será una principal fuente de fracaso en tu empresa, ya que con el tiempo será cada
vez más difícil de modificar.&lt;/p&gt;
&lt;p&gt;Y no confundamos que sostenible va relacionado con futurista, ya que precisamente intentar realizar código que cubra los
escenarios de hoy, pero también los de mañana, complica mucho el trabajo que tenemos que hacer y en la mayoría de
ocasiones nos induce a que no podamos tener un código sostenible.&lt;/p&gt;
&lt;p&gt;En resumen, el código es sostenible cuando es simple y conciso, y está respaldado por &lt;em&gt;test&lt;/em&gt; automáticos.&lt;/p&gt;
&lt;h2 id=&#34;cómo-consigo-un-código-sostenible&#34;&gt;¿Cómo consigo un código sostenible?&lt;/h2&gt;
&lt;p&gt;Como vimos en el punto anterior, tenemos que lograr un código sencillo y concreto. Para entender cómo logramos
esto, veamos qué está en nuestra mano.&lt;/p&gt;
&lt;p&gt;No caigas en la reutilización de código excesiva sin control que, por ejemplo, intenta hacer que una misma función sirva
para todo, ya que esto hará que uses menos abstracciones. Las abstracciones son la semántica de tu aplicación. Cada vez
que extraes un objeto o una función y le das un nombre estás añadiendo una abstracción que define la misión de esa parte
del código. El código es mucho más sencillo de entender cuando es rico en el uso de lenguaje humano. Es por eso que
debemos cuidar los nombres que le asignamos a las variables, métodos y clases, ya que determinarán la dificultad para entender
tu código. Buscamos nombres coherentes con el contexto, pronunciables, que denoten claramente su comportamiento.&lt;/p&gt;
&lt;p&gt;Como bien indica el concepto anterior, crear abstracciones aporta semántica a nuestra aplicación y denota la intención
de lo que programamos, podemos destacar también evitar caer en &lt;em&gt;primitive obsession&lt;/em&gt;, la cual nos habla de evitar
el uso excesivo de tipos primitivos (como String, Integer&amp;hellip;) y en su lugar favorecer nuestros tipos propios, que
serían esas clases que envuelven a los primitivos y les da una misión y un sentido, ya que tendrán un contexto basado en
el nombre de la clase y el comportamiento (métodos) estará guiado por el mismo contexto. La utilización de tipos propios
ayuda a que podamos desarrollar esa nueva &lt;em&gt;feature&lt;/em&gt; más rápido, porque con su utilización conseguimos un código
fácil de comprender e intuitivo.&lt;/p&gt;
&lt;p&gt;El código que usa correctamente los tipos propios habla el lenguaje del negocio para el que se está desarrollando la aplicación,
es decir, un lenguaje común para todos en la empresa, y favorecerá la comunicación entre desarrolladores y otros cargos de negocio.
Por supuesto evita los modelos anémicos, que serían aquellos objetos que no tienen datos o que los tienen, pero no los
utilizan directamente porque exponen &lt;em&gt;getters&lt;/em&gt; y &lt;em&gt;setters&lt;/em&gt; y dejan que los demás artefactos decidan qué debe hacer. En su lugar,
pídele al objeto que es el que tiene la responsabilidad de resolver ese problema que haga lo que quieres hacer, favorece
el principio &lt;em&gt;Tell don&amp;rsquo;t ask&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para tener un código simple, un buen ejemplo a seguir serían las cuatro reglas del diseño simple definidas por Kent Beck:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pasar los &lt;em&gt;test&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Revelar la intención&lt;/li&gt;
&lt;li&gt;No contener duplicidad (no repetir la implementación de un concepto)&lt;/li&gt;
&lt;li&gt;Tener el menor número de elementos posible (no hacer más de lo necesario)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Procura diseñar &lt;em&gt;software&lt;/em&gt; con alta cohesión y bajo acoplamiento, es decir, busca crear artefactos independientes, que
no dependan de otros para funcionar. Siempre existirá un mínimo de acoplamiento, ya que hay que conectar las distintas
piezas de nuestro código, pero evitar el acoplamiento excesivo hará escalable nuestro código. Implementar una
&lt;a class=&#34;link&#34; href=&#34;https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;arquitectura hexagonal&lt;/a&gt;
puede ser muy beneficioso para que el dominio de nuestra aplicación no tenga dependencias externas. La ley de demeter
también puede ser aplicada para evitar el acoplamiento. Para diseñar aplicaciones con alta cohesión y bajo acoplamiento
es recomendable conocer los &lt;a class=&#34;link&#34; href=&#34;https://raulpadilladelgado.github.io/blog/p/principios-solid/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;principios SOLID&lt;/a&gt;. También
deberíamos limitar la visibilidad de métodos y clases, deberíamos ser conscientes de que aquello que marcamos como público, solo
debería ser lo realmente necesario.&lt;/p&gt;
&lt;p&gt;El código atractivo nos llama y nos resulta placentero a la hora de leerlo. Indentaciones bien realizadas,
saltos de líneas justos, mismo nivel de abstracción del código dentro de un mismo bloque, y más, son ejemplos de lo que
podemos hacer para que nuestro código se vea bonito y anime a interpretarlo. Usar cláusulas guarda es tan beneficioso
para el rendimiento como para el aspecto visual, ya que denota claramente la intención de un método para forzar la
detención de su ejecución y devolver algo cuando se da alguna condición.&lt;/p&gt;
&lt;p&gt;Evita las sorpresas, piensa detenidamente cada decisión de diseño que tomes, ya que tendrá un impacto en la persona que
interprete después tu código, que podrías ser tú mismo. Ten constructores que solo construyen, es decir, que no ejecuten
ninguna lógica compleja más allá de crear una instancia de la clase, si necesitas hacer validaciones delégalas
a métodos de factoría y cierra la visibilidad del constructor. Favorece las funciones puras, aquellas que siempre
retornan el mismo resultado para la misma entrada. Favorece el uso de las funciones propias de lenguaje, que en el caso
de lenguajes modernos o de los más veteranos, pero que suelen traer mejoras con cada actualización, muchas veces incluyen
funcionalidades que facilitan la vida del programador y reducen la cantidad de trabajo que tiene que realizar para
resolver un problema, al mismo tiempo que reducen la probabilidad de introducir un error, ya que evitan la complejidad
accidental incluida por el programador. Si trabajas con lenguajes modernos aprovecha todas sus ventajas y no caigas en
viejos principios divulgados por limitaciones del lenguaje o porque simplemente responden a un contexto del &lt;em&gt;software&lt;/em&gt;
en una época donde lo correcto era eso, pero como en todo, siempre hay una forma de mejorar y surgen nuevos principios
y patrones. Por ejemplo, hoy en día no se recomiendan que las funciones solo deban tener un único &lt;em&gt;return&lt;/em&gt;. En realidad,
si sabemos que nuestra función ya tiene un valor para retornar y esperamos hasta el final de la ejecución para retornarlo,
nos estamos arriesgando a que mute su valor por el camino y no tengamos el resultado esperado, además aumentamos
la probabilidad de un &lt;em&gt;bug&lt;/em&gt; sin necesidad, ya que se ejecutan más líneas para obtener el mismo resultado. En su lugar, utilizar
un &lt;em&gt;return&lt;/em&gt; temprano será mucho más claro para los que lean el código y será más seguro, un concepto que se conoce como
cláusula guarda. Como este hay muchos otros principios que no aplican para el desarrollo de &lt;em&gt;software&lt;/em&gt; más habitual, solo
es cuestión de detectarlos y aplicar la lógica, y como no, nuestros conocimientos de código sostenible, para evitarlos
y tener un código más fácil de interpretar y de manejar.&lt;/p&gt;
&lt;p&gt;Aunque tengamos una buena batería de &lt;em&gt;test&lt;/em&gt; es necesario tener también un buen manejo y prevención de errores, algo que
ocurre cuando tenemos en cuenta las posibles excepciones de nuestra aplicación y las manejas de una forma inteligente,
notificándolas en un &lt;em&gt;log&lt;/em&gt; de errores u otros sistemas de monitorización. Cuanto más entiendes el lenguaje de programación
que está usando es más complicado que puedas introducir un error, ya que eres más consciente de cada cosa que realizas y
qué riesgos puede tener. Utilizar un IDE para programar es lo mejor que puedes hacer, te resaltan zonas donde puedes mejorar
el código o zonas donde puede haber riesgo de error, además te autocompletan código o lo sugieren para esos momentos en
los que no tienes claro algo o simplemente te sirve para aumentar tu productividad. Para poder decir que tenemos una
buena batería de &lt;em&gt;test&lt;/em&gt; es necesario que pensemos en multitud de casos, todos los que se nos puedan ocurrir, para poder
cubrir todos los escenarios posibles y que tengamos un código resiliente. Para evitar el uso de excepciones a lo loco,
tenemos disponibles lenguajes &lt;em&gt;null safe&lt;/em&gt; como Kotlin, pero si tú necesitas Java, por ejemplo, siempre tienes
herramientas para usar en lugar de las excepciones, como los tipos Either y Try o el patrón notificación. Captúralas y
envuélvelas en las tuyas propias para poder proporcionar información extendida y dar más contexto de por qué se pudo dar
ese error. Nunca añadas un &amp;rsquo;throws&amp;rsquo; a la firma de tus métodos, es ignorar totalmente la excepción y no tiene sentido.&lt;/p&gt;
&lt;p&gt;Cuando queremos código sostenible no todo es código, ya que hay que cuidar otros aspectos que mejoran la calidad de
nuestro trabajo, como puede ser la posibilidad de replicar los entornos productivos en uno local para poder solucionar
rápidamente los &lt;em&gt;bugs&lt;/em&gt;, hacer &lt;em&gt;pairing&lt;/em&gt; para resolverlos, o incluso como forma de trabajo estándar, por el hecho de que dos cabezas
pueden pensar una solución mejor y estudiar los riesgos minuciosamente.&lt;/p&gt;
&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Hacer código sostenible no es una tarea compleja, pero tampoco es fácil, es el fruto del cuidado diario de nuestro
código tomando buenas decisiones en cada momento, huyendo de la complejidad y la sorpresa. Por experiencia propia, lo
realmente complicado es no seguir las guías de código sostenible y tener que mantener ese código, es un quebradero de
cabeza más grande que invertir nuestros esfuerzos en la aplicación de código sostenible. En definitiva, la fórmula
perfecta para que un código sea mantenible, legible y escalable pasa por tener &lt;em&gt;test&lt;/em&gt; suficientes y de calidad que
cubran el código productivo, y que tanto los &lt;em&gt;test&lt;/em&gt; como el código productivo sigan estos consejos que hemos aprendido
con la lectura del libro y de este post.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Consumer Driven Contract Testing</title>
        <link>https://raulpadilladelgado.github.io/blog/p/consumer-driven-contract-testing/</link>
        <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/consumer-driven-contract-testing/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/consumer-driven-contract-testing/images/cdct-no-bg.png" alt="Featured image of post Consumer Driven Contract Testing" /&gt;&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Consumer driven contract testing&lt;/em&gt; es un tipo de prueba que nos garantiza que un proveedor cumple lo acordado con
un consumidor. Por ejemplo, en una API usaríamos este tipo de pruebas para asegurar que el proveedor recibe una
petición y devuelve la respuesta esperada.&lt;/p&gt;
&lt;p&gt;Cuando dos artefactos se comunican entre sí, típicamente lo suelen hacer mediante un mensaje, el cual tiene un
formato determinado. Ese formato hace que el consumidor dependa del productor para poder funcionar correctamente, ya que
su código se ajusta a un determinado formato de mensaje. Ese «acuerdo» entre ambas partes es lo que se denomina
«contrato». Es entonces gracias a &lt;em&gt;contract testing&lt;/em&gt; cuando podemos testear esa integración y asegurarnos que el mensaje
que se envía de un artefacto a otro tiene el formato acordado para que la integración entre ambos funcione a la
perfección.&lt;/p&gt;
&lt;p&gt;Pero más allá de ser una herramienta para testear la integración entre varios artefactos, también lo podemos usar en el
contexto de un único artefacto. Véase el caso de asegurar que una API cumple el formato acordado en su documentación,
pero en este caso sin hacer el enfoque en un tipo de consumidor concreto.&lt;/p&gt;
&lt;p&gt;Hablamos de una herramienta que nos permite testear cualquier tipo de integración de &lt;em&gt;software&lt;/em&gt;, pero que ha tenido su
auge en los últimos años para HTTP e intercambio de mensajes entre microservicios.&lt;/p&gt;
&lt;h2 id=&#34;tipos-de-contrato&#34;&gt;Tipos de contrato&lt;/h2&gt;
&lt;h3 id=&#34;contrato-explícito&#34;&gt;Contrato explícito&lt;/h3&gt;
&lt;p&gt;Cuando hablamos de un contrato explícito hacemos referencia al hecho de que el consumidor defina durante la ejecucción
de sus test un archivo con la estructura del contrato que espera que se cumpla. Es entonces cuando dicho archivo se
valida contra el que genera el proveedor, que lo crea de la misma forma, tras haber ejecutado sus propios test.&lt;/p&gt;
&lt;p&gt;La clave de este tipo de contrato es que ambas partes hagan los test necesarios para asegurar que se cumple el contrato.&lt;/p&gt;
&lt;p&gt;Dado que tanto proveedor como consumidor son de nuestro dominio, cuando queramos cambiar el contrato entre ambos,
propagaremos el cambio cambiando el contrato en el proveedor y propagando el cambio en el consumidor para que ambos se
equiparen con la nueva versión.&lt;/p&gt;
&lt;h3 id=&#34;contrato-implícito&#34;&gt;Contrato implícito&lt;/h3&gt;
&lt;p&gt;El contrato implícito es muy similar al explícito, con la diferencia de que en este caso el proveedor no puede acoplarse
al ciclo de test entre consumidor y proveedor. El caso más típico de como puede ocurrir esto es el caso de una API
pública. Podemos consumirla, pero ese proveedor como es ajeno y probablemente de soporte para otros muchos servicios no
podemos hacer que cumpla un contrato explícito.&lt;/p&gt;
&lt;p&gt;En su lugar, el archivo que genera nuestro consumidor mediante la ejecucción de los test esperando que se cumpla un
contrato determinado se valida contra la salida de un de doble de test que simula ser el proveedor real. En este caso es
importante que configuremos algún tipo de alerta que nos avisa cuando el proveedor real cambia su salida para que
nosotros la actualicemos en nuestro proveedor falso. Recalcar que en este caso el falso proveedor se encuentra integrado
dentro del mismo artefacto donde está el consumidor. El punto negativo de este método es que cuando el proveedor cambie
el mensaje que publica, hará que nuestro código falle hasta que nuestra batería de test se lancen y se vuelva a
comprobar que se cumple el contrato, algo que no se estaría cumpliendo y por lo tanto tendríamos que actualizar el
contrato que espera nuestro consumidor.&lt;/p&gt;
&lt;h2 id=&#34;ventajas-de-consumer-driven-contract-testing&#34;&gt;Ventajas de &lt;em&gt;Consumer Driven Contract Testing&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;¿Qué ganamos con el uso de una herramienta como esta? Pues evitamos que tener que hacer test &lt;em&gt;end to end&lt;/em&gt; muy costosos
para verificar que la integración entre nuestros microservicios funciona correctamente. Nos ahorra mantener el entorno
de ejecucción que levantamos para los test &lt;em&gt;end to end&lt;/em&gt;. Recibimos &lt;em&gt;feedback&lt;/em&gt; más rápido.&lt;/p&gt;
&lt;p&gt;Como único problema de este tipo de &lt;em&gt;contract testing&lt;/em&gt; es que representa un entorno simulado, mientras que un test &lt;em&gt;end to
end&lt;/em&gt; representa un entorno más real, por lo que depende del caso según el tipo de integración que estemos intentando
testear, puede que nos salga más a cuenta para ir más seguros a producción los test &lt;em&gt;end to end&lt;/em&gt;, pero lo dicho, para una
comunicación básica entre servicios basada en mensajes o vía API sale muy rentable utilizar &lt;em&gt;consumer driven contract
testing&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;herramientas-para-su-uso&#34;&gt;Herramientas para su uso&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.pact.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pact&lt;/a&gt; es una herramienta de prueba de contratos impulsada por el consumidor que genera contratos explícitos mediante
el uso de un doble de prueba que registra las solicitudes y las respuestas esperadas a un contrato que se denomina
«pacto», el &amp;lsquo;contrato&amp;rsquo; del que hablabamos anteriormente.&lt;/p&gt;
&lt;p&gt;Durante la ejecucción de los test del consumidor se realiza una solicitud al proveedor simulado de Pact que registra
en el archivo del contrato junto con su respuesta esperada. Con esto hemos garantizado que desde el lado del consumidor
se sigue cumpliendo el contrato. Tras esto, una simulación del consumir que nos provee Pact vuelve a ejecutar una
solicitud, pero esta vez contra el proveedor real y compara la respuesta actual con la esperada. Si la salida del
consumidor simulado es igual a la real se cumple el contrato por parte del proveedor. Entonces, tras haberse cumplido el
contrato por ambas partes nos hemos asegurado que nuestros dos servicios, proveedor y consumidor, se comunicarán
correctamente en el entorno real, véase producción.&lt;/p&gt;
&lt;h3 id=&#34;consumer-driven-contract-testing--continuous-integrationcontinuous-deployment&#34;&gt;&lt;em&gt;Consumer Driven Contract Testing&lt;/em&gt; + &lt;em&gt;Continuous Integration&lt;/em&gt;/&lt;em&gt;Continuous Deployment&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;La guinda en el pastel es que automaticemos el uso de &lt;em&gt;Contract Testing&lt;/em&gt; haciendo que se integre en nuestro CI/CD,
asegurándonos así que con cada &lt;em&gt;build&lt;/em&gt; se ejecute y que nos permita &lt;em&gt;deployar&lt;/em&gt; solo si el contrato se cumple. En el caso de
que utilicemos Pact como nuestra herramienta para &lt;em&gt;contract testing&lt;/em&gt; será necesario configurar &lt;a class=&#34;link&#34; href=&#34;https://docs.pact.io/getting_started/sharing_pacts/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pact Broker&lt;/a&gt;, una aplicación para compartir contratos impulsados por el consumidor. Está optimizado para su uso con «pactos» (contratos creados por el &lt;em&gt;framework&lt;/em&gt; Pact), pero puede utilizarse para cualquier tipo de contrato que pueda
serializarse en JSON ¿Y qué ganamos usando esto? El Pact Broker permite desacoplar fácilmente el ciclo de lanzamiento
de &lt;em&gt;Consumer&lt;/em&gt; y &lt;em&gt;Provider&lt;/em&gt;, unificando en un solo punto los resultado obtenidos y demás información interesante sobre el
pacto, como pueda ser documentación entre otros detalles. Quizás como único inconveniente es que Pact Brocker al ser
&lt;em&gt;Open Source&lt;/em&gt; es &lt;em&gt;self hosting&lt;/em&gt;, por lo que otra alternativa puede ser &lt;a class=&#34;link&#34; href=&#34;https://pactflow.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pactflow&lt;/a&gt;, un &lt;em&gt;fork&lt;/em&gt; de Pact
Broker que ofrece una serie de ventajas sobre su padre que las que podemos destacar que está pensada para equipos
ofreciendo una mejor interfaz de usuario, almacenamiento a cargo de la aplicación, una gran mejora en seguridad en lo que
se refiera a inicio de sesión, y demás &lt;em&gt;features&lt;/em&gt; que se pueden seguir destacando.&lt;/p&gt;
&lt;p&gt;Para que puedas realizar o ver un ejemplo práctico te recomiendo seguir el &lt;em&gt;workshop&lt;/em&gt; creado por la propia gente de Pactflow
en el que detallan como realizar &lt;em&gt;Consumer Driven Contract Testing&lt;/em&gt; e integrarlo con CI/CD. Ver el siguiente enlace:
&lt;a class=&#34;link&#34; href=&#34;https://docs.pactflow.io/docs/workshops/ci-cd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pactflow Workshop - CI/CD&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Command Query Responsibility Segregation</title>
        <link>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</link>
        <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/images/CQRS.png" alt="Featured image of post Command Query Responsibility Segregation" /&gt;&lt;h1 id=&#34;contexto&#34;&gt;Contexto&lt;/h1&gt;
&lt;p&gt;CQRS son las siglas de Command and Query Responsibility Segregation, un patrón que separa las operaciones de lectura y actualización para un almacén de datos. La flexibilidad creada por la migración a CQRS permite que un sistema evolucione mejor con el tiempo y evita que los comandos de actualización causen conflictos de fusión a nivel de dominio. Perfecto para aplicar en aplicaciones con gran carga de rendimiento.&lt;/p&gt;
&lt;p&gt;Gracias a CQRS somo capaces de desacoplar la lógica de nuestro sistema por acciones, y en los siguientes puntos veremos como trata de realizarlo.&lt;/p&gt;
&lt;h1 id=&#34;command&#34;&gt;Command&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;En CQRS un command no es un comando de CLI aunque la palabra nos lleve a ello&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;En CQRS, un Command representa la intención de realizar una operación en nuestro sistema que acabe modificando el estado de tal. Mediante un command enviamos información a nuestro sistema para que este sea alterado.&lt;/p&gt;
&lt;p&gt;Los commands son DTO (Data Transfer Object) encargados de pedir modificaciones en el sistema mediante operaciones conocidas como Post, Put, Path, Delete. Un command no devuelve nada, por lo que el body de la respuesta estará vacío.&lt;/p&gt;
&lt;p&gt;Un command es inmutable, y la razón es que si desde un controlador nos pasan un DTO (command) con una determinada información, y no tendría sentido que alteremos el objeto ya que sería modificar la tarea que nos han pedido.&lt;/p&gt;
&lt;p&gt;Podemos tener commands síncronos, para operaciones pocos costosos en tiempo de ejecucción y commands asíncronos para las muy costosas.&lt;/p&gt;
&lt;p&gt;El command acaba en un CommandHandler que tratará los datos como pueda ser crear Value Objects para poder realizar validaciones y asegurar que el command cumple con los requisitos del dominio, y seguidamente el CommandHandler enviaría estos datos al caso de uso para que se encargue de ir al repositorio para modificar los registros pertinentes.&lt;/p&gt;
&lt;h1 id=&#34;queries&#34;&gt;Queries&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Una query en CQRS no es la tradicional query SQL a la que estamos acostumbrados.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Una Query representa la intención de pedir unos datos a nuestro sistema sin que ello acabe alterando el estado de tal.&lt;/p&gt;
&lt;p&gt;Las queries son DTO encargados de pedir información al sistema y que por consiguiente hacen que una respuesta vuelva a nosotros mediante la operación conocida como Get.&lt;/p&gt;
&lt;p&gt;La query acaba en un QueryHandler que tratará los datos como pueda ser crear Value Objects para poder realizar validaciones y asegurar que el command cumple con los requisitos del dominio, y seguidamente el QueryHandler enviaría estos datos al caso de uso (servicio de aplicación) para que se encarge de ir al repositorio para recuperar el vídeo, devolverlo y transformarlo en la respuesta esperada.&lt;/p&gt;
&lt;h1 id=&#34;commands-and-queries-bus&#34;&gt;Commands and Queries Bus&lt;/h1&gt;
&lt;p&gt;Estos bus son las interfaces que actúan de intermediario entre los commands/queries y los Handler correspondiente. Saben a que Handler tienen que llevar según el command o query que esté llegando.&lt;/p&gt;
&lt;p&gt;Su misión principal es quitarle la responsabilidad al controlador de tener que saber a que handler tiene que enviar una command o query determinado.&lt;/p&gt;
&lt;p&gt;Para ver que ganamos mediante el uso de los buses vamos a ver la evolución de una arquitectura más tradicional a una que utiliza estos buses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Etapa 1) Post ➡ Controller&lt;/strong&gt;: En este caso realizamos una petición http tipo post al controlador, y este será el encargado de realizar toda la lógica. Es el caso tradicional más extremo pero iremos iterando para ver las diferencias. En este caso si quisiéramos añadir otro tipo de punto de entrada a nuestra aplicación distinto al controller (http), tendríamos que copiar la lógica de dicho controlador a el nuevo punto de entrada (ejemplo, un comando de terminal).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Etapa 2) Post ➡ Controller ➡ Caso de uso&lt;/strong&gt;: En este caso realizamos una petición http tipo post al controlador, y esté conoce a que caso de uso (un servicio de nuestra aplicación) debe dirigirse para que sea ejecutada la lógica. En este caso si quisiéramos añadir otro tipo de punto de entrada a nuestra aplicación distinto al controller (http), tendríamos que apuntar al mismo caso de uso que utilizaba el controller desde el nuevo punto de entrada (ejemplo, un comando de terminal). Gracias a que tenemos la lógica separada del controlador logramos reutilización de código.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Etapa final) Post ➡ Controller ➡ Instancia command (DTO)  ➡ CommandBus (interface) ➡ CommandHandler&lt;/strong&gt; &lt;strong&gt;➡&lt;/strong&gt; &lt;strong&gt;Caso de uso&lt;/strong&gt;: En este caso realizamos una petición http tipo post al controlador, el cual instancia un command (DTO) que será enviado al CommandBus, que es una interface de dominio que será posteriormente implementada. El CommandBus sabe según que tipo de command está recibiendo a que CommandHandler debe destinarse. En este caso si quisieramos añadir otro tipo de punto de entrada a nuestra aplicación distinto del controller (http), tendríamos instanciar del mismo modo el command deseado, y enviarlo al CommandBus para que este se destine al CommandHandler que toque. Además de ganar en reutilización de código como hacíamos en el paso b, también estamos desacoplando al controlador de conocer a que caso de uso debe dirigirse, simplemente pedirá commands al CommandQuery, hacemos que los controladores que son algo que naturalmente son de infraestructura no conozcan como funciona nuestro dominio. Entonces si el día de mañana queremos cambiar que se debe hacer con un tipo de command determinado, simplemente tendremos que cambiar la lógica en el CommandHandler y así los N puntos de entrada a la aplicación (controladores, comandos de terminal, etc) no necesitarán cambiar nada de su comportamiento. Previamente hemos comentado que el CommandBus es una interfaz que debe ser implementada, y esto nos da la posibilidad de crear una implementación asíncrona del CommandBus para que las peticiones no tengan que ser resultas en el mismo momento en el que se realizan, si no que se irán procesando y se pasará la respuesta cuando esté disponible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;💡 En esta comparación de diseño hemos hablado solo de los Command Bus, pero se aplica exactamente el mismo funcionamiento cuando se trate de una Query y su determinado Query Bus&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;cqrs--event-sourcing&#34;&gt;CQRS + Event Sourcing&lt;/h1&gt;
&lt;p&gt;CQRS complementa la idea tradicional del Event sourcing de desacoplar nuestro código lanzando eventos y
que otro módulos de nuestra aplicación se suscriban a tales eventos para interactuar con ellos. Por lo que vamos
a ver como se acoplan estos dos patrones de diseños y nos brindan los mejor de ambos con el siguiente esquema:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before (Only CQRS)&lt;/strong&gt;
&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/command-query-responsibility-segregation/images/grafo.svg&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/command-query-responsibility-segregation/images/grafo.svg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;cqrs&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;cqrs&lt;/figcaption&gt;
	
&lt;/figure&gt;
&lt;strong&gt;After (CQRS + Event Sourcing)&lt;/strong&gt;
&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/command-query-responsibility-segregation/images/grafo2.svg&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/command-query-responsibility-segregation/images/grafo2.svg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;cqrs and eventsourcing&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;cqrs and eventsourcing&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;mitos-y-otras-dudas&#34;&gt;Mitos y otras dudas&lt;/h1&gt;
&lt;p&gt;Cuando estuve aprendiendo que era el CQRS me hice la pregunta de que si iba a necesitar dos bases de datos, una para
el modelo de escritura y otro para el de lectura. En parte los contenidos que leia me llevaban a pensar eso, pero
si lo pensamos bien, tendría sentido usar dos bases de datos que se sincronicen entre sí solo si nuestra aplicación
lo requiere, es decir, que vayamos a tener que manejar un gran volumen de datos, y/o que sepamos que la consulta
y modificación puedan interferir entre sí, pero lo dicho, no es la regla general.&lt;/p&gt;
&lt;p&gt;Para más dudas sobre CQRS dejo un enlace que me ha sido de gran ayuda:
&lt;a class=&#34;link&#34; href=&#34;https://event-driven.io/en/cqrs_facts_and_myths_explained/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://event-driven.io/en/cqrs_facts_and_myths_explained/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;ejemplo-práctico&#34;&gt;Ejemplo práctico&lt;/h1&gt;
&lt;p&gt;Navegando por Github me encontré un buen ejemplo de la implementación de CQRS + Event Sourcing utilizando Java, ver el
siguiente enlace:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/citerus/bookstore-cqrs-example&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java-CQRS-Introducción&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Java Moderno (Capítulo 1)</title>
        <link>https://raulpadilladelgado.github.io/blog/p/java-moderno-cap%C3%ADtulo-1/</link>
        <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/java-moderno-cap%C3%ADtulo-1/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/java-moderno-cap%C3%ADtulo-1/images/java.png" alt="Featured image of post Java Moderno (Capítulo 1)" /&gt;&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Este post tiene como objetivo mostrar una serie de trucos o tips sobre Java que no son más que nuevan funcionalidades
que han ido saliendo con el paso de los años y que hoy recojo aquí con la intención de mostrar las más útiles y ejemplos
de uso. Pertenece a una serie de post que siguen el mismo objetivo, puedes buscar en blog los demás post.&lt;/p&gt;
&lt;h2 id=&#34;try-with-resources&#34;&gt;Try with resources&lt;/h2&gt;
&lt;p&gt;Desde Java 7 existe la fórmula try-with-resources que permite vincular el cerrado de recursos a la conclusión del try, de modo que no se nos olvide hacerlo manualmente.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Con finally
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myfile&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;br&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;br&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Con try-with-resources
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myfile&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;br&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como se puede observar, definimos los recursos que deben ser cerrados automáticamente después del try y entre paréntesis. Podemos incluir varios recursos separándolos por punto y coma. Al escribirse de esta forma se llamará al método close del BufferedReader al acabar la ejecución del bloque, se produzcan errores o no.&lt;/p&gt;
&lt;p&gt;Todos los recursos que se utilicen dentro de un try-with-resources deben implementar la interfaz AutoCloseable, la cual tiene un único método close que define cómo se debe cerrar el recurso.&lt;/p&gt;
&lt;h2 id=&#34;fechas&#34;&gt;Fechas&lt;/h2&gt;
&lt;h3 id=&#34;localdatetime-localtime-localdate-timepoint&#34;&gt;LocalDateTime, LocalTime, LocalDate, TimePoint&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timepoint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Fecha y hora actual
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2020&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Month&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;JULY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Obtenemos la fecha indicada
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Obtenemos la hora indicada
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;17:30:00&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Otra forma para la hora
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Month&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timepoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getMonth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Obtener el mes actual
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;day&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timepoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getDayOfMonth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Obtener el número de día de actual
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// TimePoint es inmutable, así que cambiar el valor retorna un nuevo objeto y podemos realizar un desarrollo más funcional
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;happyTwenties&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timepoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withYear&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1920&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withMonth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Month&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;January&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;withDayOfMonth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;plusWeeks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;formateado-de-fechas&#34;&gt;Formateado de fechas&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Fecha actual
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SimpleDateFormat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;dd-MM-yyyy&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Formato final de la fecha en String
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;genéricos&#34;&gt;Genéricos&lt;/h2&gt;
&lt;p&gt;El término “Generic” viene a ser como un tipo parametrizado, es un tipo de dato especial del lenguaje que permite centrarnos en el algoritmo sin importar el tipo de dato específico que finalmente se utilice en él. Muchos algoritmos son los mismos, independientemente del tipo de dato que maneje. Por ejemplo, un algoritmo de ordenación.&lt;/p&gt;
&lt;p&gt;Se llaman parametrizados porque el tipo de dato con el que opera la funcionalidad se pasa como parámetro. Pueden usarse en clases, interfaces y métodos, denominándose clases, interfaces o métodos genéricos respectivamente. En Java, la declaración de un tipo genérico se hace entre símbolos &amp;lt;&amp;gt;, pudiendo definir uno o más parámetros, por ejemplo: &lt;T&gt;, &amp;lt;K, V&amp;gt;. Existe una convención a la hora de nombrarlos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E – Element (usado bastante por Java Collections Framework).&lt;/li&gt;
&lt;li&gt;K – Key (usado en mapas).&lt;/li&gt;
&lt;li&gt;N – Number (para números).&lt;/li&gt;
&lt;li&gt;T – Type (representa un tipo, es decir, una clase).&lt;/li&gt;
&lt;li&gt;V – Value (representa el valor, también se usa en mapas).&lt;/li&gt;
&lt;li&gt;S, U, V etc. – usado para representar otros tipos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo de clase genérica&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// GenericClass.java file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;GenericClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GenericClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;g1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;g2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getGenericOne&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;K&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getGenericTwo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Main.java file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;GenericClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clazz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GenericClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;generic&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clazz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getGenericOne&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clazz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getGenericTwo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Param1 %d - Param2 %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Ejemplo de método genérico&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// WhiteBoard.java file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;WhiteBoard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;figure&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Main.java file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;WhiteBoard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;board&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WhiteBoard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;Figure&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Circle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;board&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;draw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;circle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;interfaces-funcionales&#34;&gt;Interfaces funcionales&lt;/h2&gt;
&lt;p&gt;En Java, se considera interfaz funcional a toda interfaz que contenga un único método abstracto.
Es decir, interfaces que tienen métodos estáticos o por defecto (default) seguirán siendo funcionales si solo
tienen un único método abstracto.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@FunctionalInterface&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SalaryToPrettyStringMapper&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Salary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Collectors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Salary&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;salary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;La anotación @FunctionalInterface denota que es una interfaz funcional, pero es opcional y, aunque no
estuviese, la interfaz seguiría siendo funcional. Sería buena práctica mantenerla para recordar que se trata de
una interfaz funcional (no de una clase abstracta), y que en caso de añadir más métodos nos lanzaría un error
de compilación.&lt;/p&gt;
&lt;h2 id=&#34;lambdas&#34;&gt;Lambdas&lt;/h2&gt;
&lt;p&gt;Las lambdas fueron introducidas a partir de Java 8. No son más que funciones anónimas que nos permiten programar en Java con un estilo más funcional y, en ocasiones, declarativo.&lt;/p&gt;
&lt;p&gt;La sintaxis de una lambda es la siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tipo1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tipoN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;paramN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cuerpo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;de&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;la&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;El operador flecha (-&amp;gt;), es característico de las lambda y separa los parámetros del cuerpo de la función. No es necesario incluir el tipo ya que este puede ser inferido. El paréntesis de los parámetros puede omitirse cuando sólo existe un parámetro y no incluimos el tipo. Si no hay parámetros los paréntesis son necesarios.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;param1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cuerpo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;param1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cuerpo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cuerpo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En el caso del cuerpo, si solo tenemos una sentencia, podremos omitir las llaves y el return, por ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;numero&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numero&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Si tenemos más de una, las llaves serán necesarias:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;numero&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cadena&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;numero&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cadena&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;donde-usar-las-lambdas&#34;&gt;¿Donde usar las lambdas?&lt;/h3&gt;
&lt;p&gt;Las lambdas se pueden usar en cualquier parte que acepte una interfaz funcional. La lambda tendrá que corresponder con la firma del método abstracto de la interfaz funcional.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Se pueden asignar a variables tipadas:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Predicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isOdd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;isOdd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Pueden ser parte del return de un método:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Predicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isOddPredicate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;En llamadas a métodos:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;IntStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mapToObj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entero&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;entero = %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entero&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cadena&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cadena&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Salida:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// entero = 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// entero = 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;referencias-a-métodos&#34;&gt;Referencias a métodos&lt;/h3&gt;
&lt;p&gt;Cuando un método coincida con la firma de una interfaz funcional, podremos usar una referencia al método en vez de la sintaxis habitual de las lambdas&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;IntStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;mapToObj&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;entero&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;entero = %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entero&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;lt;- Referencia a método
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Para usar referencias a métodos, ponemos (::) justo antes del método, en vez de un punto, e ignoramos los paréntesis. Así pues, estas podrían ser referencias válidas a métodos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;miMetodo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;metodoDeSuper&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;unObjeto:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;suMetodo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-processing-streams&#34;&gt;Data processing Streams&lt;/h2&gt;
&lt;p&gt;Desde Java 8 podemos hacer uso de estas herramientas para simplificar la forma en la que interactuamos con las colecciones, evitando que tengamos que realizar bucles complejos. Nos permiten hacer operaciones paralelizables, concatenando instrucciones con un estilo declarativo.&lt;/p&gt;
&lt;p&gt;Para utilizarlas sera necesario llamar a stream() o parallelStream(), en función de si queremos paralelizar las operaciones o no.&lt;/p&gt;
&lt;p&gt;Un stream simplemente recibe los datos de una colección y genera un resultado tras el procesado de las operaciones intermedias. Estas operaciones intermedias devuelven un stream, por lo que será necesario ejecutar una operación terminal para que las intermedias se ejecuten y poder obtener un resultado.&lt;/p&gt;
&lt;p&gt;Un ejemplo para verlo más claro:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Other&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Ordena según la implementación de Comparable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Other&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,()&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;collect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En el ejemplo anterior hemos visto algunas operaciones intermedias como son filter(), entre otras, y a demás el bloque de instrucciones termina con un collect(), que se trata de una operación terminal que nos permite pasarle un parámetro de tipo Collector, y que en este caso con el toList() conseguimos que se nos devuelva una lista como teníamos al principio.&lt;/p&gt;
&lt;p&gt;Las operaciones intermedias se pueden clasificar en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIltrado&lt;/li&gt;
&lt;li&gt;Búsqueda&lt;/li&gt;
&lt;li&gt;Mapeado&lt;/li&gt;
&lt;li&gt;Matching&lt;/li&gt;
&lt;li&gt;Reducción&lt;/li&gt;
&lt;li&gt;Iteración&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Los streams pueden ser utilizados para más propósitos, como pueda ser un array:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O para convertir un fichero en un stream de líneas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;numberOfLines&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;lines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;Paths&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;yourFile.txt&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;Charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;defaultCharset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;También se pueden crear Stream a partir de valores usando &lt;code&gt;Stream.of&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;optional&#34;&gt;Optional&lt;/h2&gt;
&lt;p&gt;A partir de Java 8 tenemos implementado en Java el patrón option. Se basa en indicar que se puede devolver o no el valor esperado obligando a que tengamos contemplados ambos escenarios.&lt;/p&gt;
&lt;p&gt;La clase Optional en Java nos dispone de constructor, en su lugar usaremos sus métodos de factoría estáticos para crear los optional. Veamos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Devuelve objeto opcional vacío
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ofNullable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Devuelve objeto con valor o si es null un objeto vacío
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Devuelve objeto con valor o si es null retorna NullPointerException
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;La clase Optional nos proporciona una serie de métodos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isPresent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Indica si el objeto tiene o no valor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Retorna el valor almacenado. Si no hay valor retorna excepción
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Comportamiento como con los streams
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Comportamiento como con los streams
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Optional&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Comportamiento como con los streams
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;orElse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Nos retorna el valor original. Si es nulo, retorna el valor que pasamos por parámetro
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;orElseGet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Igual que el anterior pero el parámetro es una función
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;X&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Throwable&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;orElseThrow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Retorna el valor original. Si es nulo, retorna la excepción que devuelva la función pasada como parámetro
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Entornos virtuales en Python</title>
        <link>https://raulpadilladelgado.github.io/blog/p/entornos-virtuales-en-python/</link>
        <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/entornos-virtuales-en-python/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/entornos-virtuales-en-python/images/cabecerapythonvirtualenv.jpg" alt="Featured image of post Entornos virtuales en Python" /&gt;&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;
&lt;p&gt;En nuestras aplicaciones Python solemos hacer uso de librerías, y las diferentes versiones de estas pueden llegar a ser un quebradero de cabeza cuando son usadas desde varias aplicaciones. Además de las librerías, la propia instalación de Python tiene un sistema de versionado, por lo que nos ocurre el mismo problema. Una aplicación A no funciona con Python 3.8 pero la aplicación B lo necesita.&lt;/p&gt;
&lt;p&gt;La solución a este problema es usar un entorno virtual, que es un árbol de directorios autónomo que contiene una instalación de Python con una versión concreta, además de una serie de paquetes adicionales que queramos instalar.&lt;/p&gt;
&lt;p&gt;Diferentes aplicaciones pueden usar diferentes entornos virtuales. Si una aplicación A necesita una versión 1.0 de un paquete y otra aplicación B la versión 2.0 no tendrán conflictos ya que dentro de cada aplicación habrá un entorno virtual (carpeta) que contenga sus propias instalaciones. Por lo que si dentro de una aplicación B se quiere usar la versión más nueva del paquete 3.0, la aplicación A seguirá usando la versión 1.0 y no se verá afectada. No es estrictamente necesario que el entorno virtual (carpeta) esté dentro del proyecto en cuestión, pero si suele ser una recomendación a la hora de buscar organización y no tener los entornos virtuales desperdigados por el sistema de archivos de nuestra máquina.&lt;/p&gt;
&lt;p&gt;Además de solucionar problemas entre las versiones de distintos proyectos, usar entornos virtuales nos permite poder aislar nuestro sistema (PC) de tener que instalar globalmente todas las dependencias que tiene un proyecto, por lo que cuando borremos el proyecto no tendremos todas esas dependencias instaladas en nuestra máquina.&lt;/p&gt;
&lt;h1 id=&#34;entornos-virtuales-desde-terminal&#34;&gt;Entornos virtuales desde terminal&lt;/h1&gt;
&lt;h2 id=&#34;crear-entornos-virtuales&#34;&gt;Crear entornos virtuales&lt;/h2&gt;
&lt;p&gt;El módulo de python que permite crear y manejar entornos virtuales se llama venv. Para crear un entorno virtual ejecuta dentro de un directorio:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 -m venv tutorial-env
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;python3: por defecto se instalara dentro del entorno virtual la misma versión de python que tengamos instalada en el sistema&lt;/li&gt;
&lt;li&gt;-m: Indicamos que vamos a introducir el nombre de un módulo de python&lt;/li&gt;
&lt;li&gt;venv: Es el módulo de python que nos permite crear y manejar entornos virtuales&lt;/li&gt;
&lt;li&gt;tutorial-env: Es el nombre que le queramos dar al entorno virtual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Una vez creado el entorno virtual procederemos a activarlo, que hará que nuestra terminal tenga el contexto de ese entorno virtual y accederá a los paquetes instalados dentro en lugar de usar la de nuestro sistema.&lt;/p&gt;
&lt;p&gt;En windows ejecuta:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tutorial-env\Scripts\activate.bat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;En Unix (Linux) o MacOS ejecuta:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;source tutorial-env/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;💡 Si usas otra terminal distinta al bash tienes implementaciones distintas del script de activación como por ejemplo para csh (activate.csh) o fish (activate.fish)&lt;/p&gt;
&lt;p&gt;Activar el entorno virtual hará que cambie el prompt de tu terminal para que muetre que entorno virtual se está usando.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;raul@DESKTOP:~/env-example$ source tutorial-env/bin/activate

(tutorial-env) raul@DESKTOP:~/env-example$ python3
Python 3.8.10 (default, Sep 28 2021, 16:10:42)
[GCC 9.3.0] on linux
Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;instalar-paquetes-dentro-del-entorno-virtual&#34;&gt;Instalar paquetes dentro del entorno virtual&lt;/h2&gt;
&lt;p&gt;Dentro de nuestro entorno virtual también podemos instalar, actualizar y eliminar paquetes usando el ejecutable pip.&lt;/p&gt;
&lt;p&gt;💡 Pip buscará los paquetes en la página &lt;a class=&#34;link&#34; href=&#34;https://pypi.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pypi.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Para instalar la última versión de un paquete ejecutaremos:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(tutorial-env) raul@DESKTOP:~/env-example$ python3 -m pip install novas
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;(tutorial-env) ⇒ nos muestra que el entorno virtual está activado. Para realizar la instalación de un paquete python dentro del entorno virtual es necesario que lo tengamos activado primero.&lt;/li&gt;
&lt;li&gt;python3 -m ⇒ Indicamos que vamos a introducir el nombre de un módulo de python, en este caso pip.&lt;/li&gt;
&lt;li&gt;install ⇒ Para instalar el paquete&lt;/li&gt;
&lt;li&gt;novas ⇒ nombre del paquete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y si quisieras instalar una versión específica de un paquete lo podemos realizar concatenando los signos == y la versión del paquete:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(tutorial-env) raul@DESKTOP:~/env-example$ python3 -m pip install requests==2.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Para actualizar el paquete ejecutaríamos un install añadiendo el parámetro &amp;ndash;upgrade al comando:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(tutorial-env) raul@DESKTOP:~/env-example$ python3 -m pip install --upgrade requests
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Para instalar uno o varios paquetes pon sus nombres después de pip uninstall&lt;/p&gt;
&lt;p&gt;Para mostrar información sobre un paquete en particular pon su nombre después de pip show&lt;/p&gt;
&lt;p&gt;Para listar todos los paquetes instalados en el entorno virtual podemos ejecutar pip list&lt;/p&gt;
&lt;p&gt;Para listar todos los paquetes instalados y además guardar la salida del comando en un fichero de texto que tenga un formato preparado para que instalar todas las versiones a la vez desde pip ejecuta:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(tutorial-env) raul@DESKTOP:~/env-example$ python3 -m pip freeze &amp;gt; requirements.txt

(tutorial-env) raul@DESKTOP:~/env-example$ cat requirements.txt
novas==3.1.1.3
numpy==1.9.2
requests==2.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;freeze ⇒ Similar al list pero expulsa la salida en un formato compatible con la instalación masiva de todos los paquetes que contiene&lt;/li&gt;
&lt;li&gt;requirements.txt ⇒ Redirigir la salida al archivo especificado. El nombre no tiene que ser exactamente el del ejemplo, pero suele ser un estándar usar ese nombre.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo de diferencias entre list y freeze&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;LIST
novas (3.1.1.3)
numpy (1.9.2)
requests (2.7.0)

FREEZE
novas==3.1.1.3
numpy==1.9.2
requests==2.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;El fichero requirements.txt debe ser guardado mediante el control de versiones para que cualquier usuario que se baje el proyecto pueda instalar todas las dependencias necesarias utilizando:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(tutorial-env) raul@DESKTOP:~/env-example$ python3 -m pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;-r ⇒ Indica que las dependencias están especificadas en un archivo que vamos a pasar&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;entornos-virtuales-desde-intellij-idea-ultimate-o-pycharm&#34;&gt;Entornos virtuales desde IntelliJ IDEA Ultimate o PyCharm&lt;/h1&gt;
&lt;p&gt;Previamente hemos visto como manejar los entornos virtuales desde terminal, pero en algún momento tendríamos que abrir nuestro proyecto desde un IDE, y en este caso explicaré como manejar los entornos virtuales dentro de los IDEs de Jetbrains.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requisitos:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si vas a utilizar IntelliJ (Ultimate) en lugar de PyCharm es necesario que tengas instalado el plugin de Python. Lo puedes instalar desde los ajustes del IDE (Ctrl + Alt + S)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 613; 
			flex-basis: 1473px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-9.png&#34; data-size=&#34;1019x166&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-9.png&#34;
			width=&#34;1019&#34;
			height=&#34;166&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se recomienda instalar el plugin “Requirements” para poder manejar de una forma más cómoda y más asistida los requirimientos dentro del proyecto&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 351; 
			flex-basis: 844px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-1-1-1024x291.png&#34; data-size=&#34;1024x291&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-1-1-1024x291.png&#34;
			width=&#34;1024&#34;
			height=&#34;291&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;crear-un-entorno-virtual&#34;&gt;Crear un entorno virtual&lt;/h2&gt;
&lt;p&gt;Para crear un entorno virtual desde el IDE abriremos los ajustes de la estructura del proyecto (Ctrl + Shift + Alt + S) y añadiremos un nuevo SDK de Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 393px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-2-1.png&#34; data-size=&#34;865x528&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-2-1.png&#34;
			width=&#34;865&#34;
			height=&#34;528&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 150; 
			flex-basis: 361px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-3-1.png&#34; data-size=&#34;873x579&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-3-1.png&#34;
			width=&#34;873&#34;
			height=&#34;579&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Base interpreter: En caso de que no tengamos Python instalado en nuestra máquina el IDE nos ofrecerá descargar una versión. Si ya lo tenemos instalado lo autodetectará, pero también podemos indicar una ruta donde esté Python instalado.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inherit global site-packages: Nos incluirá dentro del entorno virtual todos los paquetes que tengamos instalados. Se recomienda deshabilitar si globalmente tenemos muchas dependencias que no sean de necesidad para el proyecto. Corresponde con el parámetro -system-site-packages de virtualenv.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make available to all projects: El IDE guardará el entorno virtual para que pueda ser usado en otro proyectos. Actívalo si sabes que las dependencias de tu proyecto serán las mismas en algún otro proyecto.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;usar-un-entorno-virtual-existente&#34;&gt;Usar un entorno virtual existente&lt;/h2&gt;
&lt;p&gt;Para usar un entorno virtual existente desde el IDE abriremos los ajustes de la estructura del proyecto (Ctrl + Shift + Alt + S) y añadiremos un SDK de Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 393px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-2-2.png&#34; data-size=&#34;865x528&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-2-2.png&#34;
			width=&#34;865&#34;
			height=&#34;528&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 150; 
			flex-basis: 361px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-4-1.png&#34; data-size=&#34;873x579&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-4-1.png&#34;
			width=&#34;873&#34;
			height=&#34;579&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interpreter: Indicaremos la ruta donde está instalado Python dentro del entorno virtual&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make available to all projects: El IDE guardará el entorno virtual para que pueda ser usado en otro proyectos. Actívalo si sabes que las dependencias de tu proyecto serán las mismas en algún otro proyecto.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;incluir-las-dependencias-del-archivo-requirements&#34;&gt;Incluir las dependencias del archivo requirements&lt;/h2&gt;
&lt;p&gt;Con el plugin “Requirements” instalado en pasos anteriores podremos instalar los paquetes necesarios dentro del archivo requirements.txt&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1190; 
			flex-basis: 2857px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-5-1-1024x86.png&#34; data-size=&#34;1024x86&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-5-1-1024x86.png&#34;
			width=&#34;1024&#34;
			height=&#34;86&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Para sincronizar las dependencias que están instaladas en el entorno virtual y lo que tenemos definido en el archivo requirements.txt en la barra superior del IDE pulsamos sobre “Tools” y elegimos la opción “Sync Python Requirements…”&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 47; 
			flex-basis: 114px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-6-1.png&#34; data-size=&#34;277x581&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/Untitled-6-1.png&#34;
			width=&#34;277&#34;
			height=&#34;581&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 227; 
			flex-basis: 545px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/5690ae998ff3c807447abc07e0ba7e7b1c50daca.png&#34; data-size=&#34;557x245&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/entornos-virtuales-en-python/images/5690ae998ff3c807447abc07e0ba7e7b1c50daca.png&#34;
			width=&#34;557&#34;
			height=&#34;245&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;Untitled 7&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Untitled 7&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;entornos-virtuales-en-proyectos-versionados&#34;&gt;Entornos virtuales en proyectos versionados&lt;/h1&gt;
&lt;p&gt;Un entorno virtual no se versiona junto con el proyecto, recordemos que esa carpeta tiene multitud de instalaciones de paquetes de Python y que estaríamos añadiendo una carpeta de mucho peso en el sistema de versionado. El proceso que debemos seguir para recrear el entorno virtual cuando nos bajamos un proyecto de Python es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear un entorno virtual nuevo&lt;/li&gt;
&lt;li&gt;Instalar las dependencias que están especificadas en el archivo requierements.txt del proyecto&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SSH para el día a día</title>
        <link>https://raulpadilladelgado.github.io/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/</link>
        <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/descripcion-del-protocolo-ssh.jpg" alt="Featured image of post SSH para el día a día" /&gt;&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;
&lt;p&gt;SSH o Secure Shell Protocol, es un protocolo de comunicación así como pueda serlo los muy conocidos HTTP, HTTPS o FTP.&lt;/p&gt;
&lt;p&gt;En el caso de SSH nos permite la comunicación entre dispositivos dentro de la red, así como controlar o modificar ordenadores remotos.&lt;/p&gt;
&lt;p&gt;¿Que ofrece de nuevo entonces frente a otros protocolos de comunicación? Pues básicamente es un protocolo orientado a mejorar la seguridad de la comunicaciones encriptando los datos de modo que intrusos no puedan ver contenido protegido bajo el protocolo.&lt;/p&gt;
&lt;p&gt;HTTPS puede sonar parecido a SSH, ambos son seguros y permiten la comunicación, pero la diferencia está en que HTTPS está pensado para la web y SSH para la shell (línea de comandos que usa desde un sistema operativo).&lt;/p&gt;
&lt;p&gt;SSH pretende encriptar las comunicaciones entre cliente (dispositivo que se conecta al host) y host (servidor remoto al que accede el cliente)&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 160; 
			flex-basis: 385px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled.png&#34; data-size=&#34;900x560&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled.png&#34;
			width=&#34;900&#34;
			height=&#34;560&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Las conexiones SSH están muy presentes en nuestro día a día. En el caso de github utilizamos SSH para clonar, hacer push o hacer pull a sus servidores.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 188; 
			flex-basis: 452px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-1.png&#34; data-size=&#34;377x200&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-1.png&#34;
			width=&#34;377&#34;
			height=&#34;200&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;como-funciona-la-encriptación-de-ssh&#34;&gt;Como funciona la encriptación de SSH&lt;/h1&gt;
&lt;p&gt;Existen tres tipos principales de técnicas de encriptación usadas por SSH:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Encriptación simétrica&lt;/li&gt;
&lt;li&gt;Encriptación asimétrica&lt;/li&gt;
&lt;li&gt;Hash&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;encriptación-simétrica&#34;&gt;Encriptación simétrica&lt;/h2&gt;
&lt;p&gt;El ordenador A quiere mandarle al ordenador B un mensaje del estilo &amp;ldquo;hola, que tal?&amp;rdquo;, pero el ordenador A no quiere que nadie se entere de lo que está diciendo. Entonces utilizará una &amp;ldquo;llave&amp;rdquo; para alterar su mensaje y el &amp;ldquo;hola, que tal?&amp;rdquo; pasará a ser por ejemplo &amp;ldquo;EK25+5&amp;rdquo;. El ordenador B también tiene esa &amp;ldquo;llave&amp;rdquo;, por lo que es capaz de descifrar el mensaje alterando el mensaje cifrado para recuperar el original.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 391px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-2.png&#34; data-size=&#34;450x276&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-2.png&#34;
			width=&#34;450&#34;
			height=&#34;276&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Así funciona el cifrado simétrico, quien tenga la llave es capaz de descifrar lo que se está transfiriendo.&lt;/p&gt;
&lt;p&gt;La llave que conocen ambas partes de la comunicación no puede viajar a través de la red, ya que un atacante podría estar espiando y conseguir una copia de la llave, por lo que también podría descifrar la información que enviemos bajo el uso de dicha llave. Para evitar que la llave viaje de forma insegura se utiliza un algoritmo de intercambio de claves. Sería algo así como definir un algoritmo para que la llave pueda viajar por la red de forma segura ya que estará cifrada y la forma de descrifrarlo solo la conocen ambas partes interesadas en la comunicación. Esto será el siguiente punto que tratemos, la encriptación asimétrica.&lt;/p&gt;
&lt;h2 id=&#34;encriptación-asimétrica&#34;&gt;Encriptación asimétrica&lt;/h2&gt;
&lt;p&gt;Para la encriptación asimétrica se utilizan dos llaves en ambas partes de la comunicación. Cada parte tiene una llave pública y una llave privada. Las claves públicas pueden ser compartidas con todo el mundo, no supone un riesgo para nuestra seguridad. Sin embargo, las claves privadas deben permanecer en secreto y no compartirlas con nadie. La clave pública está relacionada con una clave privada en término de funcionaliadad, aunque compartir la clave pública es seguro porque a partir de esta no es posible calcular la clave privada. Esto quiere decir que un mensaje que fue encriptado usando una clave pública, solo podrá ser desencriptado utilizando su respestiva clave privada.&lt;/p&gt;
&lt;p&gt;El ordenador A y el ordenador B intercambian sus claves públicas. El ordenador A encripta un mensaje utilizando la clave pública del ordenador B, envía el mensaje y finalmente el ordenador B utiliza su propia clave privada para desencriptar el mensaje&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 236; 
			flex-basis: 567px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-3.png&#34; data-size=&#34;1024x433&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-3.png&#34;
			width=&#34;1024&#34;
			height=&#34;433&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;diffie-hellman-key-exchange&#34;&gt;diffie hellman key exchange&lt;/h2&gt;
&lt;p&gt;‎El algoritmo de intercambio de claves Diffie Hellman (DH) es un método para intercambiar de forma segura claves criptográficas a través de un canal de comunicaciones público. Las claves no se intercambian realmente, se derivan conjuntamente. Lleva el nombre de sus inventores Whitfield Diffie y Martin Hellman.‎ Mejora el intercambio de claves que hemos visto anteriormente en la encriptación simétrica y asimétrica utilizando cálculo matemáticos avanzados para que sea prácticamente imposible que un intruso en la comunicación sea capaz de descifrar la clave que permite acceder a los recursos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;‎Si Alice y Bob desean comunicarse entre sí, primero acuerdan entre ellos un gran número primo n y un generador (o base) g (donde 0 &amp;lt; g &amp;lt; n).‎&lt;/p&gt;
&lt;p&gt;‎Alice elige un entero secreto a (su clave privada) y luego calcula g^a mod n (que es su clave pública). Bob elige su clave privada b y calcula su clave pública de la misma manera.‎&lt;/p&gt;
&lt;p&gt;‎Bob conoce b y g^a, por lo que puede calcular (g^a)^b mod n = g^ab mod n. Por lo tanto, tanto Alice como Bob conocen un secreto compartido g^ab mod n. Eva, una oyente maliciosa en la comunicación conoce n, g, la clave pública de Alice (g^a mod n) y la clave pública de Bob (g^b mod n). Ella es incapaz de calcular el secreto compartido a partir de estos valores, sería necesario conocer la clave privada.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 177; 
			flex-basis: 426px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-4-1024x576.png&#34; data-size=&#34;1024x576&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-4-1024x576.png&#34;
			width=&#34;1024&#34;
			height=&#34;576&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;hash&#34;&gt;Hash&lt;/h2&gt;
&lt;p&gt;Con esto ganamos que ningún intermediario malicioso se meta en la comunicación y suplante la identidad del host y del cliente aportando su propia clave púlica para así poder descifrar los mensajes.&lt;/p&gt;
&lt;p&gt;Es una técnica de encriptación en la que para la mismta entrada (texto) siempre se produce la misma salida (texto encriptado). Desde el texto encriptado utilizando hash no seríamos capaces de llegar al texto como era en el inicio. Entonces solo la persona que sabe el secreto volverá a introducir la misma entrada y esta vez el servidor comprobara que se registra el mismo hash que guardó al principio, en caso de ser así, la persona estaría autorizada.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 190; 
			flex-basis: 456px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-5.png&#34; data-size=&#34;950x500&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-5.png&#34;
			width=&#34;950&#34;
			height=&#34;500&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Con esta ténica se requiere una entrada segura, por ejemplo, si hablamos de contraseñas, una del estilo &amp;ldquo;1234&amp;rdquo; seguramente sea de las primera que prueban los atacantes, sin embargo, recurrir a algo más elaborado como &amp;ldquo;d56fg4583+*dfh347vfh&amp;rdquo; seguro que no será fácil de adivinar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El comando md5sum imprime una suma de comprobación de 32 caracteres (128 bits) del archivo dado, utilizando el algoritmo MD5.&lt;/p&gt;
&lt;p&gt;Vamos a abrir una terminal UNIX y usaremos el comando md5sum para crear y comparar hashes entre ficheros:&lt;/p&gt;
&lt;p&gt;Dos ficheros iguales, mismo hash&lt;/p&gt;
&lt;p&gt;$ cat file1.txt&lt;br&gt;
hello world&lt;br&gt;
$ cat file2.txt&lt;br&gt;
hello world&lt;br&gt;
$ md5sum file1.txt&lt;br&gt;
6f5902ac237024bdd0c176cb93063dc4  file1.txt&lt;br&gt;
$ md5sum file2.txt&lt;br&gt;
6f5902ac237024bdd0c176cb93063dc4  file2.txt&lt;/p&gt;
&lt;p&gt;Dos ficheros distintos, distinto hash:&lt;/p&gt;
&lt;p&gt;$ cat file1.txt&lt;br&gt;
hello world&lt;br&gt;
$ cat file2.txt&lt;br&gt;
bye bye&lt;br&gt;
$ md5sum file1.txt&lt;br&gt;
6f5902ac237024bdd0c176cb93063dc4  file1.txt&lt;br&gt;
$ md5sum file2.txt&lt;br&gt;
b052b28f8360616ca92f434f497585ff  file2.txt&lt;/p&gt;
&lt;p&gt;Comprobación masiva de hashes:&lt;/p&gt;
&lt;p&gt;$ cat file1.txt&lt;br&gt;
hello world&lt;br&gt;
$ cat file2.txt&lt;br&gt;
bye bye&lt;br&gt;
$ md5sum file1.txt file2.txt &amp;gt; hashes&lt;br&gt;
$ md5sum &amp;ndash;check hashes&lt;br&gt;
file1.txt: OK&lt;br&gt;
file2.txt: OK&lt;br&gt;
$ echo &amp;ldquo;!&amp;rdquo; &amp;raquo; file2.txt&lt;br&gt;
$ md5sum &amp;ndash;check hashes&lt;br&gt;
file1.txt: OK&lt;br&gt;
file2.txt: FAILED&lt;br&gt;
md5sum: WARNING: 1 computed checksum did NOT match&lt;/p&gt;
&lt;h1 id=&#34;como-configurar-claves-publicas-en-un-servidor-ubuntu-para-conectar-mediante-ssh&#34;&gt;Como configurar claves publicas en un servidor Ubuntu para conectar mediante SSH&lt;/h1&gt;
&lt;p&gt;Usando un proveedor de servidores como pueda ser Digital Ocean, vamos a crear un servidor ubuntu para accederlo vía SSH.&lt;/p&gt;
&lt;p&gt;Tras haberlo creado vamos a escribir el siguiente comando en nuestro terminal para conectarnos al servidor que se encuentra en internet:&lt;/p&gt;
&lt;p&gt;ssh {user}@{host}&lt;/p&gt;
&lt;p&gt;Siendo user el usuario (cuenta) por defecto que nos ha creado el servidor para acceder y host el servidor al que queremos acceder, en ese campo podremos escribir una dirección IP o un nombre de dominio.&lt;/p&gt;
&lt;p&gt;Veremos que estamos conectado desde la shell al servidor, por lo que podemos acceder a su sistema de archivos, ejecutar comandos, etc.&lt;/p&gt;
&lt;p&gt;Vamos a utlizar RSA, que nos permitirá garantizar la identificación de los usuarios sin necesidad de utlizar una contraseña.&lt;/p&gt;
&lt;p&gt;Desde la consola de nuestro ordenador local vamos a generar un par de claves (pública y privada) para utilizarlas posteriormente con el servidor.&lt;/p&gt;
&lt;p&gt;ssh-keygen -C &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;mailto:test@gmail.com&#34; &gt;test@gmail.com&lt;/a&gt;&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-C Comment Provides a new comment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tras esto nos pedirá donde queremos las claves. Por defecto lo hará en la ruta /Users/{your_user}/.ssh/id_rsa si solo presionamos enter, pero podemos especificar nosotros la ruta y el nombre de la clave privada también.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 442; 
			flex-basis: 1062px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-6.png&#34; data-size=&#34;978x221&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-6.png&#34;
			width=&#34;978&#34;
			height=&#34;221&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Nos iremos al servidor y nos conectaremos vía ssh. Nuestro proveedor de servidor no debería tener configurado por defecto el acceso mediante SSH solo para determinados usuarios, por lo que en teoría podríamos acceder en este momento con cualquier usuario.&lt;/p&gt;
&lt;p&gt;ssh {user}@{host}&lt;/p&gt;
&lt;p&gt;Y vamos a crear el folder .ssh en la ruta principal del usuario:&lt;/p&gt;
&lt;p&gt;mkdir .ssh&lt;/p&gt;
&lt;p&gt;Dentro de la ruta .ssh crearemos un archivo que se nombre exactamente authorized_keys, en donde pegaremos el contenido generado de la clave pública generada anteriormente.&lt;/p&gt;
&lt;p&gt;Tras haber realizado lo anterior cuando queramos conectarnos al servidor vía ssh veremos que esta vez lo ha intentado mediante la public key pero ha fallado porque no podrá escoger correctamente la key, la que hemos copiado dentro del servidor&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1159; 
			flex-basis: 2782px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-7.png&#34; data-size=&#34;626x54&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-7.png&#34;
			width=&#34;626&#34;
			height=&#34;54&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Para añadir la clave que nos interesa al comando ssh, tendremos que ejecutar lo siguiente :&lt;/p&gt;
&lt;p&gt;ssh-add ~/.ssh/{your_private_key}&lt;/p&gt;
&lt;p&gt;adds private key identities to the authentication agent&lt;/p&gt;
&lt;p&gt;Y ahora sí que si volvemos a conectarnos vía ssh podremos haber accedido al servidor sin necesidad de introducir una contraseña, ya que este conocía nuestra clave pública y nos ha mando un mensaje de verificación de identidad que hemos sabido descrifrar ya que fue cifrado con nuestra clave pública que solo se puede descifrar con nuestra clave privada.&lt;/p&gt;
&lt;p&gt;Para eliminar las claves que tiene el authentication agent:&lt;/p&gt;
&lt;p&gt;ssh-add -D&lt;/p&gt;
&lt;p&gt;Para listar las claves que tiene el authentication agent:&lt;/p&gt;
&lt;p&gt;ssh-add -l&lt;/p&gt;
&lt;h1 id=&#34;como-configurar-ssh-en-github&#34;&gt;Como configurar SSH en Github&lt;/h1&gt;
&lt;p&gt;Lo primero será abrir la terminal y generar la clave pública que añadiremos posteriomente en Github&lt;/p&gt;
&lt;p&gt;Github nos recomienda que la clave que generemos sea usando el algoritmo Ed25519&lt;/p&gt;
&lt;p&gt;ssh-keygen -t ed25519 -C &amp;ldquo;your_email@example.com&amp;rdquo;&lt;/p&gt;
&lt;p&gt;En el caso de que el sistema que estés usando no permita el algoritmo Ed25519, puedes recurrir al método más tradicional:&lt;/p&gt;
&lt;p&gt;ssh-keygen -t rsa -b 4096 -C &amp;ldquo;your_email@example.com&amp;rdquo;&lt;/p&gt;
&lt;p&gt;ed25519 pertenece a una rama de la criptografía llamada &amp;ldquo;criptografía de curva elíptica (ECC)&amp;rdquo;. RSA se basa en matemáticas bastante sencillas (multiplicación de enteros), mientras que ECC procede de una rama de las matemáticas mucho más complicada llamada &amp;ldquo;teoría de grupos&amp;rdquo;. En resumen: las claves ECC pueden ser mucho más cortas y ofrecer el mismo nivel de seguridad porque el problema matemático en el que se basan es mucho más complejo.&lt;/p&gt;
&lt;p&gt;Para añadir una clave pública en github vete a &lt;a class=&#34;link&#34; href=&#34;https://github.com/settings/keys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/settings/keys&lt;/a&gt; y añádela pulsando el botón verde de New SSH key.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 344; 
			flex-basis: 826px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-8.png&#34; data-size=&#34;768x223&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/ssh-para-el-d%C3%ADa-a-d%C3%ADa/images/Untitled-8.png&#34;
			width=&#34;768&#34;
			height=&#34;223&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;bonus-track&#34;&gt;Bonus track&lt;/h1&gt;
&lt;p&gt;Para mover archivos al servidor remoto podemos utilizar el comando &lt;code&gt;rsync&lt;/code&gt;, que se usaría de la siguiente forma:&lt;/p&gt;
&lt;p&gt;rsync -av {local_directory} {remote_user}@{remote_host}:{remote_directory}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-a&lt;/strong&gt; &lt;em&gt;(archive)&lt;/em&gt; It is a quick way of saying you want recursion and want to preserve almost everything&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-v&lt;/strong&gt; &lt;em&gt;(verbose)&lt;/em&gt; This option increases the amount of information you are given during the transfer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para copiar el contenido de un fichero desde terminal al portapeles podemos ejecutar desde linux:&lt;/p&gt;
&lt;p&gt;cat {your_file.extension} | xsel &amp;ndash;clipboard &amp;ndash;input&lt;/p&gt;
&lt;p&gt;Y para pegar el contenido del portapapeles sería ejecutar lo siguiente:&lt;/p&gt;
&lt;p&gt;xsel &amp;ndash;clipboard &amp;ndash;output&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Java Virtual Machine</title>
        <link>https://raulpadilladelgado.github.io/blog/p/java-virtual-machine/</link>
        <pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/java-virtual-machine/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/java-virtual-machine/images/jvm.jpg" alt="Featured image of post Java Virtual Machine" /&gt;&lt;h1 id=&#34;java-virtual-machine-jvm&#34;&gt;Java Virtual Machine (JVM)&lt;/h1&gt;
&lt;h2 id=&#34;que-es&#34;&gt;¿Que es?&lt;/h2&gt;
&lt;p&gt;La Máquina Virtual de Java, en inglés Java Virtual Machine (JVM), es un componente dentro de JRE (Java Runtime Environment) necesario para la ejecución del código desarrollado en Java, es decir, es la máquina virtual la que permite ejecutar código Java en cualquier sistema operativo o arquitectura. De aquí que se conozca Java como un lenguaje multiplataforma. JVM interpreta y ejecuta instrucciones expresadas en un código máquina especial (bytecode), el cual es generado por el compilador de Java (también ocurre con los generados por los compiladores de lenguajes como Kotlin y Scala). Dicho de otra forma, es un proceso escrito en C o C++ que se encarga de interpretar el bytecode generado por el compilador y hacerlo funcionar sobre la infraestructura de ejecución. Como hay una versión de la JVM para cada entorno que sí conoce los detalles de ejecución de cada sistema, puede utilizar el código máquina equivalente para cada una de las instrucciones bytecode.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Java tiene dos componentes principales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java Runtime Environment (JRE): es el entorno de ejecucción de Java. Incluye la máquina virtual (JVM), las librerías básicas del lenguaje y otras herramientas relacionadas.&lt;/li&gt;
&lt;li&gt;Java Delopment Kit (JDK); además del JRE, incluye el compilador, el debugger, el empaquetador JAR, herramientas para generar documentación, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por lo que cuando queremos ejecutar un fichero java ocurre lo siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Un fichero example.java se compilar (gracias al compilador del JDK) y se genera un fichero example.class que contiene el bytecode capaz de ser interpretado por la JVM.&lt;/li&gt;
&lt;li&gt;Durante la ejecución del código, Class Loader se encarga de llevar los ficheros .class a las JVM que reside en la RAM del ordenador y ByteCode Verifier se encarga de verificar que el código en bytecode procede de una compilación válida&lt;/li&gt;
&lt;li&gt;El compilador just in time compila el bytecode a código nativo de la máquina y se ejecuta directamente&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled1.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled1.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;En el siguiente apartado veremos más a fondo la definición de cada uno de estos subsistemas de la JVM.&lt;/p&gt;
&lt;h2 id=&#34;estructura&#34;&gt;Estructura&lt;/h2&gt;
&lt;p&gt;La JVM se descompone en 3 subsistemas:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled2.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled2.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;class-loader-subsystem&#34;&gt;Class loader subsystem&lt;/h3&gt;
&lt;p&gt;Cuando una clase Java necesita ser ejecutada, existe un componente llamado Java Class Loader Subsystem que se encarga de cargar, vincular e inicializar de forma dinámica y en tiempo de ejecución las distintas clases en la JVM. Se dice que el proceso es dinámico porque la carga de los ficheros se hace gradualmente, según se necesiten.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Carga&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Existen a su vez tres tipos de Loaders y cada uno tiene una ruta predefinida desde donde cargar las clases.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bootstrap/Primordial ClassLoader: es el padre de los loaders y su función es cargar las clases principales desde jre/lib/rt.jar, fichero que contiene las clases esenciales del lenguaje&lt;/li&gt;
&lt;li&gt;Extensión ClassLoader: delega la carga de clases a su padre (bootstrap) y, en caso fallido, las carga el mismo desde los directorios de extensión de JRE (jre/lib/ext)&lt;/li&gt;
&lt;li&gt;System/Application ClassLoader: es responsable de cargar clases específicas desde la variable de entorno CLASSPATH o desde la opción por línea de comandos -cp.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Vínculo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linking es el proceso de añadir los bytecodes cargados de una clase en el Java Runtime System para que pueda ser usado por la JVM. Existen tres paso en el proceso de Linking, aunque el último es opcional.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verify: Bytecode Verifier comprueba que el bytecode generado es correcto. En caso de no serlo, se devuelve un errror.&lt;/li&gt;
&lt;li&gt;Prepare: una vez se ha verificado, se procede a asignar memoria a las variables de las clases y se inicializan con valores por defecto dependiendo de su tipo. Las variables de clases no toman su valor inicial correcto hasta la fase de Initialization. Valores por defecto de variables primitivas:&lt;br&gt;
➡️ int = 0&lt;br&gt;
➡️ long = 0L&lt;br&gt;
➡️ short = (short) 0&lt;br&gt;
➡️ char = &amp;ldquo;\u0000&amp;rdquo;&lt;br&gt;
➡️ byte = (byte) 0&lt;br&gt;
➡️ boolean = false&lt;br&gt;
➡️ reference = null&lt;br&gt;
➡️ float = 0.0f&lt;br&gt;
➡️ double = 0.0d&lt;/li&gt;
&lt;li&gt;Resolve: JVM localiza las clases, interfaces, campos y métodos referenciados en una tabla llamada constant pool (CP) y determina los valores concretos a partir de su referencia simbólica. Cuando se compila una clase Java, todas las referencias a variables y métodos se almacenan en el CP como referencia simbólica. Una referencia simbólica, de forma muy breve, es un string que puede usarse para devolver el objeto actual. El CP es un área de memoria con valores únicos que se almacenan para reducir la redundancia. Para el siguiente ejemplo:&lt;br&gt;
&lt;code&gt;System.err.println(&amp;quot;Test&amp;quot;);&lt;/code&gt;&lt;br&gt;
&lt;code&gt;System.out.println(&amp;quot;Test&amp;quot;);&lt;/code&gt;&lt;br&gt;
en el CP solo habría un objeto, String &amp;ldquo;Test&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Inicialización&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Se encarga de que las variables de clase se inicialicen correctamente, con los valores que el desallorador especificó en el código.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled3.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled3.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;runtime-data-areas&#34;&gt;Runtime Data Areas&lt;/h3&gt;
&lt;p&gt;JVM define varias áreas de datos que se utilizan durante la ejecución de un programa y que se podrían dividir en dos grupos. Algunas de estas áreas se crean al inicializarse la JVM y se destruyen una vez la JVM finaliza (compartidas por todos los hilos). Otras se inicializan cuando el hilo se crea y se destruyen cuando el hilo se ha completado (una por hilo).&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled4.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled4.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Method area: es parte de Heap Area. Contiene el esqueleto de la clase (métodos, constantes, variables, atributos, constructor, etc)&lt;/li&gt;
&lt;li&gt;Heap area: fragmento de memoria donde se almacenan los objetos creados (todo lo que se inicialice con el operador new). Si el objeto se borra, el Garbage Collector se encarga de liberar su espacio. Solo hay un Heap Area por JVM, por lo que es un recurso compartido (igual que Method Area)&lt;/li&gt;
&lt;li&gt;Stack area: fragmento de memoria donde se almacenan las variables locales, parámetros, resultados intermedios y otros datos. Cada hilo tiene una private JVM stack, creada al mismo tiempo que el hilo.&lt;/li&gt;
&lt;li&gt;PC register: contiene la dirección actual de la instrucción que se está ejecutando (una por hilo)&lt;/li&gt;
&lt;li&gt;Native Method Stack: igual que Stack, pero para métodos nativos, normalmente escritor en C o C++.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;execution-engine&#34;&gt;Execution Engine&lt;/h3&gt;
&lt;p&gt;El bytecode que es asignado a las áreas de datos en la JVM es ejecutado por el Execution Engine, ya que este puede comunicarse con distintas áreas de memoria de la JVM. El Execution Engine tiene los siguientes componentes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpreter: es el encargado de ir leyendo el bytecode y ejecutar el código nativo correspondiente. Esto afecta considerablemente al rendimiento de la aplicación.&lt;/li&gt;
&lt;li&gt;JIT Compiler: interactúa en tiempo de ejecucción con la JVM para compilar el bytecode a código nativo y optimizarlo. Esto permite mejorar el rendimiento del programa. Esto se hace a través del HotSpot compiler.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled5.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled5.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Garbage Collector: libera zonas de memoria que han dejado de ser referenciadas por un objeto&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;empaquetar-y-ejecutar-aplicación-java&#34;&gt;Empaquetar y ejecutar aplicación Java&lt;/h1&gt;
&lt;p&gt;Ya hemos visto la parte teórica de como funciona la JVM y ahora toca realizar un ejemplo práctico.&lt;/p&gt;
&lt;p&gt;Para compilar una app usaremos el javac dentro del directorio bin de nuestra instalación&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;javac MyApp.java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Esto generar archivos .class a partir de nuestro archivo fuente .java. Estos son los archivos que puede ejecutar la máquina virtual de Java.&lt;/p&gt;
&lt;p&gt;Para ejecutar una aplicación usaremos java que lo podemos encontrar en el directorio bin del JRE o JDK. Para ello, debemos hacer referencia a una clase que contenga un método estático main, el principal punto de entrada de las aplicaciones en Java. Además, si forma parte de un paquete debemos escribir la ruta completa desde la base del árbol.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java com.example.myApp.MyApp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Java permite empaquetar las aplicaciones y librerías en archivos comprimidos. De esta forma es más sencillo poder reutilizar el código a través de distintas aplicaciones o desplegar nuevas versiones de la aplicación. Estos archivos pueden ser:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JAR: librerías o aplicaciones de escritorio&lt;/li&gt;
&lt;li&gt;WAR: aplicaciones web&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;jar cf jar-file files-to-package
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;La opción c indica que se desea crear el archivo y la opción f especifica el nombre del archivo. Este comando genera un comprimido .jar que contiene todas las clases que indiquemos, incluyendo directorios de forma recursiva. Además, genera un archivo de manifiesto. Si el archivo de manifiesto especifica el header Main-Class, podremos ejecutar la aplicación desde el archivo JAR de la siguiente forma:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -jar jar-file
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Los archivos JAR también pueden ser agregados al classpath, de forma que las aplicaciones puedan obtener sus dependencias al explorar dentro de su contenido. Es la principal forma de distribución de librerías. Normalmente, cuando descargamos una aplicación Java, esta trae sus propios JAR además de las dependencias.&lt;/p&gt;
&lt;h1 id=&#34;graalvm&#34;&gt;GraalVM&lt;/h1&gt;
&lt;p&gt;Hablamos de una Virtual Machine que es una extensión de la JVM tradicional que permite ejecutar cualquier lenguaje en una única VM (JavaScript, R, Ruby, Python&amp;hellip;). Soporta modos de ejecucción tales como la compilación ahead-of-time que permite un tiempo de arranque más rápido en aplicaciones Java, resultado en ejecutables que ocupan menos memoria.&lt;/p&gt;
&lt;p&gt;🎯 Objetivos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mejorar el rendimiento de los lenguajes basados en la máquina virtual de Java haciendo que tengan un rendimiento similar a los lenguajes nativos&lt;/li&gt;
&lt;li&gt;Reducir el tiempo de arranque de las aplicaciones de la JVM mediante la compilación ahead-of-time (antes de tiempo) con GraalVM Native image&lt;/li&gt;
&lt;li&gt;Permitir la integración de GraalVM en Oracle Database, Node.js, Android/iOS y otros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;📰 Lenguajes y runtimes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GraalVM JavaScript: runtime de JavaScript (ECMAScript 2019), con soporte para Node.js&lt;/li&gt;
&lt;li&gt;TruffleRuby: implementación de Ruby&lt;/li&gt;
&lt;li&gt;FastR: implementación del lenguaje R&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔩 Componentes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GraaVM Compiler: se trata de un compilador JIT para Java&lt;/li&gt;
&lt;li&gt;GraalVM Native Image: permite la compilcación ahead-of-time&lt;/li&gt;
&lt;li&gt;Truffle Language Implementation Framework: depende de GraalVM SDK y permite implementar otros lenguajes en GraalVM&lt;/li&gt;
&lt;li&gt;Instrumentation-based Tool Support: soporte para instrumentación dinámica, que es agnóstica del lenguaje&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Una opción que puede ser interesante, llegando a posibilidad de tener varios lenguajes dentro de un mismo proyecto, y que tiene el suficiente cuerpo como para que sea comentada en otro post del blog.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Toolify</title>
        <link>https://raulpadilladelgado.github.io/blog/p/toolify/</link>
        <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/toolify/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/toolify/images/hqdefault.jpg" alt="Featured image of post Toolify" /&gt;&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;
&lt;p&gt;Recientemente he estado trabajando en un proyecto personal que surge por la necesidad de una función específica en spotify, que no podía conseguir a través de la app oficial de la plataforma. Mi objetivo era poder organizar mis playlist por orden de fecha de estreno de la canción. Spotify te permite organizarlas por fecha en la que la añadiste a la playlist, pero no por el tipo de organización que yo quería.&lt;/p&gt;
&lt;p&gt;Entonces fue cuando descubrí &lt;a class=&#34;link&#34; href=&#34;http://sortyourmusic.playlistmachinery.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sort Your Music&lt;/a&gt;, que es una aplicación web que te ofrece herramientas para organizar tus playlist de una forma más avanzada.&lt;/p&gt;
&lt;p&gt;Gracias a la anterior web me decidí por montar mi propia implementación que tenga lo que me gusta y necesito, y montarlo en algo que de un modo rápido me permita lanzar mi comando de organizar playlists.&lt;/p&gt;
&lt;p&gt;Ahora mismo, el proyecto se trata de una aplicación Python sencilla, que hace uso de la librería &lt;a class=&#34;link&#34; href=&#34;https://spotipy.readthedocs.io/en/2.19.0/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;spotipy&lt;/a&gt;, que nos simplifica la forma en la que interactuamos con la API de Spotify. Al arrancar la aplicación, seremos capaces de listar las playlist del usuario y ordenar una determinada playlist por fecha de estreno de las canciones en orden descendente.&lt;/p&gt;
&lt;p&gt;Para ofrecer una interfaz al usuario se ha utilizado Flask, un framework ligero que permite montar un servidor web con pocas líneas de código.&lt;/p&gt;
&lt;p&gt;El repositorio lo puedes encontrar en:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/raulpadilladelgado/toolify&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;raulpadilladelgado/toolify (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;La aplicación web la puedes usar en:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://toolify-app.herokuapp.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://toolify-app.herokuapp.com&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;spotify-for-developers&#34;&gt;Spotify for developers&lt;/h1&gt;
&lt;p&gt;Para que podamos utilizar la API de Spotify necesitamos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crearte una cuenta en &lt;a class=&#34;link&#34; href=&#34;https://developer.spotify.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spotify Developers&lt;/a&gt; e iniciar sesión&lt;br&gt;
No es necesario crear una cuenta si inicias sesión con la cuenta que habitualmente usas para Spotify&lt;/li&gt;
&lt;li&gt;Es hora de ir a nuestro &lt;a class=&#34;link&#34; href=&#34;https://developer.spotify.com/dashboard/applications&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dashboard&lt;/a&gt; y crear una nueva APP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 382; 
			flex-basis: 917px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/toolify/images/image-1024x268.png&#34; data-size=&#34;1024x268&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/toolify/images/image-1024x268.png&#34;
			width=&#34;1024&#34;
			height=&#34;268&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Una vez creada la APP, es necesario localizar tu client_id y client_secret, pues serán las claves para que podamos realizar operaciones utilizando la API de Spotify. En el README del proyecto se muestra donde se deben incluir estos valores.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 348; 
			flex-basis: 835px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/toolify/images/image-1-1024x294.png&#34; data-size=&#34;1024x294&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/toolify/images/image-1-1024x294.png&#34;
			width=&#34;1024&#34;
			height=&#34;294&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Definir la ruta de redirección. La primera vez que un usuario interactua con la aplicación que hemos creado es necesario que se autentifique y que verifique que nos da permiso para alterar cierta información relacionada a sus playlists a un scope determinado. Esta ruta de redirección sirve para que una vez se finalice correctamente el proceso de dar acceso, el token generado se guarde. Debemos ir a &amp;ldquo;Edit Settings&amp;rdquo;(vease en la imagen anterior), y tener definido lo siguiente:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 343; 
			flex-basis: 825px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/toolify/images/Untitled17.png&#34; data-size=&#34;423x123&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/toolify/images/Untitled17.png&#34;
			width=&#34;423&#34;
			height=&#34;123&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;ejecutar-toolify&#34;&gt;Ejecutar Toolify&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Cuando montas el proyecto por primera vez, es necesario instalar SpotyPy&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;pip install -r requirements.txt&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Las claves de la APP de Spotify Developers que habíamos comentado en el apartado anterior, serán introducidas como variables del sistema operativo.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;TOOLIFY_SECRET_KEY
SPOTIFY_REDIRECT_URI
SPOTIFY_CLIENT_SECRET
SPOTIFY_CLIENT_ID&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Finalmente, puedes arrancar la aplicación usando:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flask run
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;siguientes-pasos&#34;&gt;Siguientes pasos&lt;/h1&gt;
&lt;p&gt;En esta primera iteración con el proyecto he ofrecido la posibilidad de ordenar el contenido de una playlist por fecha de estreno de las canciones, entonces surge una pregunta, ¿como explotar el proyecto?&lt;/p&gt;
&lt;p&gt;Me gusta mucho crear mis propias playlists, y para mi el orden es fundamental para que cuando esté escuchando música vayan apareciendo las canciones en una secuencia de mi interés, como puede ser la fecha de estreno de las canciones o el BPM de la canción si estás buscando que las canciones más marchosas estén primero. Jugando con como ordenamos las canciones se puede ofrecer una experiencia totalmente distinta.&lt;/p&gt;
&lt;p&gt;En una playlist no todo es ordenar, a veces se duplican canciones o se introducen versiones editadas de las canciones originales (lo que se conoce como Remix) e interesa solo mantener la última versión. Sería interesante que Toolify identificase estos casos, que los muestre al usuario para que decida que mantener, y finalmente que la aplicación borre lo que no interese.&lt;/p&gt;
&lt;p&gt;Podríamos ser capaces de mostrar al usuario sus estadísticas de uso en spotify, sus cantantes más escuchados, canciones más escuchadas, entre otros datos de interés.&lt;/p&gt;
&lt;p&gt;Esto es todo, ¡muchas gracias por leer!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Buenas prácticas en testing (Cap.1)</title>
        <link>https://raulpadilladelgado.github.io/blog/p/buenas-pr%C3%A1cticas-en-testing-cap.1/</link>
        <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/buenas-pr%C3%A1cticas-en-testing-cap.1/</guid>
        <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;
&lt;p&gt;Este post trata de exponer una serie de buenas prácticas o trucos a la hora de realizar testing de código, y forma parte de una serie de capítulos que pretenden seguir con el propósito.&lt;/p&gt;
&lt;p&gt;En esta primera iteración la idea es hablemos sobre TDD, programación funcional, patrones de diseño y estabilidad, todo esto orientado a los tests.&lt;/p&gt;
&lt;p&gt;Vamos al laboratorio! 🧪&lt;/p&gt;
&lt;h1 id=&#34;tdd-en-nuestros-tests&#34;&gt;TDD en nuestros tests&lt;/h1&gt;
&lt;p&gt;Test-Driven Development (TDD) es una práctica de programación que consiste en escribir primero las pruebas, después escribir el código fuente que pase la prueba satisfactoriamente y, por último, refactorizar el código escrito.&lt;/p&gt;
&lt;p&gt;Con esta práctica se consigue entre otras cosas: un código más robusto, más seguro, más mantenible y una mayor rapidez en el desarrollo. Además, logramos realizar pruebas más sencillas, ya que escribimos código productivo para nuestros tests, y no al revés. Ganamos en código simple y fácil de testear.&lt;/p&gt;
&lt;p&gt;Para ver como el TDD mejora nuestros tests veamos un ejemplo siguiendo la práctica:&lt;/p&gt;
&lt;h2 id=&#34;kata-fizzbuzz&#34;&gt;Kata fizzbuzz&lt;/h2&gt;
&lt;p&gt;Enlace a la kata: &lt;a class=&#34;link&#34; href=&#34;https://www.hackerrank.com/challenges/fizzbuzz/problem&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.hackerrank.com/challenges/fizzbuzz/problem&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.hackerrank.com/challenges/fizzbuzz/problem&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recomiendo que el siguiente ejercicio se haga siguiendo la metodología TDD.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Todo comienza por un test que falla porque aún no tenemos implementado que hará la función a testear.&lt;/li&gt;
&lt;li&gt;Le escribes el mínimo código para que cumplamos nuestro test.&lt;/li&gt;
&lt;li&gt;Refactorizamos con la tranquilidad de que sabremos si estamos cambiando comportamiento en el código gracias a la ejecución de nuestro test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 212; 
			flex-basis: 509px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/buenas-pr%C3%A1cticas-en-testing-cap.1/images/Untitled20.png&#34; data-size=&#34;688x324&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/buenas-pr%C3%A1cticas-en-testing-cap.1/images/Untitled20.png&#34;
			width=&#34;688&#34;
			height=&#34;324&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://raulpadilladelgado.com/wp-content/uploads/2021/07/Untitled20.png&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://raulpadilladelgado.com/wp-content/uploads/2021/07/Untitled20.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://raulpadilladelgado.com/wp-content/uploads/2021/07/Untitled20.png&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Básicamente, el problema nos propone lo siguiente:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Pasamos un número, y puede ocurrir lo siguiente:
	- Que sea divisible por tres y devuelva &amp;#34;fizz&amp;#34;
	- Que sea dividible por cinco y devuelva &amp;#34;buzz&amp;#34;
	- Que no sea dividible por ninguno de los anteriores
	y devuelva el mismo número
	- Que sea dividible por tres y por cinco y devuelva &amp;#34;fizzbuzz&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Manos a la obra! 👷🏻&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caso&lt;/strong&gt;: Que no sea dividible por ninguno de los anteriores y devuelva el mismo número&lt;/p&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Test
public void return_the_same_number_as_passed(){
    assertThat(Fizzbuzz.fizzbuzz(1)).isEqualTo(&amp;#34;1&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Code&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Fizzbuzz{
    public static String fizzbuzz(int number){
        return String.valueOf(number);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;De momento solo tenemos un caso de uso, asi que nos ceñimos a desarrollar lo mínimo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caso&lt;/strong&gt;: Que sea dividible por tres y devuelva &amp;ldquo;fizz&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Test
    public void return_the_same_number_as_passed(){
        assertThat(Fizzbuzz.fizzbuzz(1)).isEqualTo(&amp;#34;1&amp;#34;);
    }

    @Test
    public void return_fizz_if_is_divisible_by_3(){
        assertThat(Fizzbuzz.fizzbuzz(3)).isEqualTo(&amp;#34;fizz&amp;#34;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Code&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Fizzbuzz{
    public static String fizzbuzz(int number){
        if(number % 3 == 0){
            return &amp;#34;fizz&amp;#34;;
        }
        return String.valueOf(number);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Progresivamente vamos añadiendo lógica para los nuevos casos de uso sin romper los anteriores&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caso&lt;/strong&gt;: Que sea dividible por cinco y devuelva &amp;ldquo;buzz&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Test
    public void return_the_same_number_as_passed(){
        assertThat(Fizzbuzz.fizzbuzz(1)).isEqualTo(&amp;#34;1&amp;#34;);
    }

    @Test
    public void return_fizz_if_is_divisible_by_3(){
        assertThat(Fizzbuzz.fizzbuzz(3)).isEqualTo(&amp;#34;fizz&amp;#34;);
    }

    @Test
    public void return_buzz_if_is_divisible_by_5(){
        assertThat(Fizzbuzz.fizzbuzz(5)).isEqualTo(&amp;#34;buzz&amp;#34;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Code&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Fizzbuzz{
    public static String fizzbuzz(int number){
        if(number % 3 == 0){
            return &amp;#34;fizz&amp;#34;;
        }
        if(number % 5 == 0){
            return &amp;#34;buzz&amp;#34;;
        }
        return String.valueOf(number);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Progresivamente vamos añadiendo lógica para los nuevos casos de uso sin romper los anteriores&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caso&lt;/strong&gt;: Que sea dividible por tres y por cinco y devuelva &amp;ldquo;fizzbuzz&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
@Test
    public void return_the_same_number_as_passed(){
        assertThat(Fizzbuzz.fizzbuzz(1)).isEqualTo(&amp;#34;1&amp;#34;);
    }

    @Test
    public void return_fizz_if_is_divisible_by_3(){
        assertThat(Fizzbuzz.fizzbuzz(3)).isEqualTo(&amp;#34;fizz&amp;#34;);
    }

    @Test
    public void return_buzz_if_is_divisible_by_5(){
        assertThat(Fizzbuzz.fizzbuzz(5)).isEqualTo(&amp;#34;buzz&amp;#34;);
    }

    @Test
    public void return_fizzbuzz_if_is_divisible_by_3_and_5(){
        assertThat(Fizzbuzz.fizzbuzz(15)).isEqualTo(&amp;#34;fizzbuzz&amp;#34;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Code&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Fizzbuzz{
    public static String fizzbuzz(int number){
        if (number % 3 == 0 &amp;amp;&amp;amp; number % 5 == 0){
            return &amp;#34;fizzbuzz&amp;#34;;
        }
        if(number % 3 == 0){
            return &amp;#34;fizz&amp;#34;;
        }
        if(number % 5 == 0){
            return &amp;#34;buzz&amp;#34;;
        }
        return String.valueOf(number);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;El ir implementando cada caso poco a poco con la lógica necesario para superar solo ese caso, ha hecho que lleguemos a una solución sencilla, y que escala a medida que necesitamos más casos de uso.&lt;/p&gt;
&lt;h1 id=&#34;test-más-legible-test-más-comestible-&#34;&gt;Test más legible, test más comestible 🍽&lt;/h1&gt;
&lt;h2 id=&#34;programación-declarativa-frente-a-imperativa&#34;&gt;Programación declarativa frente a imperativa&lt;/h2&gt;
&lt;p&gt;Cuando hacemos uso de programación declarativa le estamos diciendo al código que haga algo, pero no el cómo lo tiene que ser, nosotros solo le pedimos una misión. Un ejemplo de este tipo de comportamiento es el lenguaje SQL, que por defecto funciona de tal manera. Si queremos buscar un cliente haríamos lo siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clients&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Se ve muy fácil de leer, sobre todo porque no le indicamos como tiene que conseguir el propósito, eso son aspectos internos del propio de lenguaje.&lt;/p&gt;
&lt;p&gt;Por el contrario, con programación imperativa no le decimos que queremos obtener, sino que nosotros mismo implementamos esa funcionalidad usando un lenguaje como pueda ser java. Siguiendo el ejemplo anterior para buscar un cliente dentro una lista tendríamos lo siguiente usando programación imperativa:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clients&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Client&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clientToBeFind&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;O extrapolado a hacerte un café sería:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Programación declarativa&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prepara un café&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Programación imperativa&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ve a la cocina&lt;/li&gt;
&lt;li&gt;Échale agua a la cafetera, cafe y ponla al fuego&lt;/li&gt;
&lt;li&gt;Espera a que salga el café y tráelo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El gran pro de usar la programación declarativa es la transparencia que te da de lo que está ocurriendo, te estás abstrayendo de toda complejidad existente. Además, no solo sabes que está pasando en todo momento de una forma más clara, sino que ganas en código impoluto, ya que mandar instrucciones a la aplicación será como leer un cuento.&lt;/p&gt;
&lt;h2 id=&#34;el-paradigma-de-la-programación-funcional-con-la-declarativa&#34;&gt;El paradigma de la programación funcional con la declarativa&lt;/h2&gt;
&lt;p&gt;Como mencioné anteriormente, SQL funciona de tal forma que es declarativo, pero también tenemos otros lenguajes como Javascript que aunque no es declarativo, tiene muchas funciones predefinidas que llaman a utilizar la programación funcional. En Javascript el modo de iterar listas o arrays puede ser un proceso que sin terminar de ser declarativo del todo, es mucho más amigable que en otros lenguajes. Por ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ages&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;selectedAges&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como vemos tiene mucho parecido con la programación declarativa, ya que seguimos pidiendo cosas sin importar como las haga, como pueda ser el uso de map o filter, pero en el caso de map le tenemos que indicar que realizar con cada elemento de la lista, y en el caso de filter que elementos debe escoger y cuáles no. No termina de ser declarativo, pero nos permite tener esa limpieza abstrayéndonos de bucles complicados.&lt;/p&gt;
&lt;p&gt;Este comportamiento de las funciones de javascript responde a que son funciones inmutables, es decir, que no alteran ningún aspecto de la aplicación como pueda ser el estado de un atributo de un objeto, una variable global, o lo que sea. Son funciones puras, por lo que siempre que pongamos la misma entrada saldrá la misma salida. Siempre devuelven el resultado de llamarlas por eso es por lo que funcionan como la programación funcional.&lt;/p&gt;
&lt;h2 id=&#34;patrones-de-diseño-aplicados-a-testing&#34;&gt;Patrones de diseño aplicados a testing&lt;/h2&gt;
&lt;p&gt;El uso de patrones de diseño en código productivo se hace con la finalidad de que nuestro código sea más mantenible, escalable, siga unas reglas de diseño que busquen organización y otros fines similares. Pero cuando se trata de test, estos no son una excepción. Nuestras pruebas automatizadas también pueden seguir unos patrones de diseño con el fin de mejorar la mantenibilidad y legibilidad.&lt;/p&gt;
&lt;p&gt;Ahora veremos algunos ejemplos escritos en Kotlin sobre como mejorar la legibilidad y mantenibilidad de nuestros test mediante el uso de build pattern, object mother o named arguments. Vamos a poner en contexto una clase llamada User, en la que tenemos una regla de negocio que para apostar se debe tener una edad mínima.&lt;/p&gt;
&lt;h3 id=&#34;tradicional&#34;&gt;Tradicional&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;minimumAgeToBet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;canBet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Boolean&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userAge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;minimumAgeToBet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;`user can bet with the minimum age`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;userAge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userAge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canBet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En este primer caso hemos creado directamente una instancia de la clase en nuestros test, por lo que cada uno tendrá la responsabilidad de mantenerse actualizado si la firma de la clase cambia, como por ejemplo que se añada un parámetro.&lt;/p&gt;
&lt;h3 id=&#34;builder-pattern&#34;&gt;Builder Pattern&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;withAge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserBuilder&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;userAge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userAge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;`user can bet with the minimum age`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;userAge&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withAge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canBet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En este caso hemos hecho uso del patrón builder, que implicar tener un Builder encargado de construir nuestra clase e inicializarla a través de un build().&lt;/p&gt;
&lt;p&gt;En el constructor habrá definidos unos valores por defecto para todos los atributos, y proporcionarnos unos setters que sirven para aportar semántica al test, ya que a la hora de establecer valores solo lo haremos en aquellos atributos que tiene importancia en el test.&lt;/p&gt;
&lt;p&gt;Usando el patrón builder hemos sacado fuera de los test la responsabilidad de crear instancias de las clases, hemos ganado semántica y hemos hecho más declarativos nuestros tests, ahora muestran de una forma más clara que les interesa.&lt;/p&gt;
&lt;p&gt;El patrón builder gana al método tradicional, pero tiene un problema, cuando tengamos muchos atributos a los que definirles un valor vamos a pasarlo un poco mal, veamos otro patrón que nos será aún más útil.&lt;/p&gt;
&lt;h3 id=&#34;object-mother&#34;&gt;Object mother&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;companion&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;userWithMinimumAgeToBet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;`user can bet with the minimum age`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UserFixtures&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userWithMinimumAgeToBet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canBet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En el ámbito de test hacemos uso del ObjectMother, que no es más que una clase de factoría que contiene una serie de
métodos estáticos que nos permiten crear una instancia de la clase con mayor semántica. Hemos indicado el tipo de caso que
queremos, sin entrar en detalles de cuál tiene que ser el valor exacto, por lo que hemos ganado en semántica y además
tenemos un factor a nuestro favor y es que si mañana cambia la edad mínima o la forma en la que y en varios de nuestros test llamamos al método userWithMinimumAgeToBet,
solo tendremos que cambiar o añadir variables o lo que haga falta en el UserFixtures, nuestro test no necesita ser modificado.&lt;/p&gt;
&lt;h2 id=&#34;programación-funcional-en-nuestros-test&#34;&gt;Programación funcional en nuestros test&lt;/h2&gt;
&lt;p&gt;Ahora voy a exponer un ejemplo real escrito en Kotlin de como el uso de programación declarativa junto con el patrón builder han sido una gran ventaja a la hora de desarrollar test que necesitaban realizar muchas aserciones para verificar el estado de registros persistidos en la base de datos.&lt;/p&gt;
&lt;p&gt;Pongamos en contexto un contrato que tiene como propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Estado&lt;/li&gt;
&lt;li&gt;Fecha de alta&lt;/li&gt;
&lt;li&gt;Fecha de baja&lt;/li&gt;
&lt;li&gt;Servicio contratado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Teniendo lo anterior presente, vamos a crear una clase que nos permita construir paso a paso lo que queremos comprobar.
Lo que queremos verificar son las columnas de ciertas filas en base de datos, o lo que es lo mismo, queremos revisar la
información almacenada para un pedido, por lo que cuando produzcamos una instancia de la clase que nos hará las aserciones
le pasaremos el ID en cuestión. Por otro lado, iniciaremos un mapa en el que la clave del mapa será la columna
en la tabla de base de datos y el valor del mapa será el valor en la tabla de base de datos para dicha columna.&lt;/p&gt;
&lt;p&gt;Tendremos múltiples métodos para añadir columnas a comprobar, y cada uno de estos métodos devuelve la misma instancia de
la clase para que podamos ir concatenando llamadas y agregar más columna que comprobar.&lt;/p&gt;
&lt;p&gt;Finalmente, la última llamada que realizaremos será al método que hará las aserciones.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;OrderAssertion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;orderId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DBConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;fieldsValuesMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MutableMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mutableMapOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hasStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderAssertion&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fieldsValuesMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hasOrderDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderAssertion&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fieldsValuesMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;order_date&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hasProducts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;products&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OrderAssertion&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;fieldsValuesMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;products&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;products&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doAssert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;assertOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertionError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AssertionError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertionError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unexpectedError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AssertionError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Unexpected Error inside order assert&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unexpectedError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Throws&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;assertOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SELECT id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fieldsValuesMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; FROM orders&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34; WHERE id = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executeSQL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;moveNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fieldsValuesMap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;assertThat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withFailMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Wrong value for field &amp;#39;%s&amp;#39;. Expected is &amp;#39;%s&amp;#39; but actual was &amp;#39;%s&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;k&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;n&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEqualTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;fail&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Order with ID &amp;#39;%s&amp;#39; not found&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;orderId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nuestro test quedará muy claro y limpio, gracias al trabajo que hemos hecho en esta clase de aserciones que quita toda
complejidad innecesaria para nuestro test.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Kotlin&#34; data-lang=&#34;Kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;`create a order`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;orderId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1234&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;in arrival&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;orderDate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2021-05-31 00:00:00&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;products&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;some products&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;orderService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;makeOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;products&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;assertThatOrderWithId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hasStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hasOrderDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;orderDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hasProducts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;products&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;doAssert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Como si de un framework se tratara, hemos simplificado y abstraído del test la complejidad de hacer aserciones a la base
de datos, y ha quedado un test muy fácil de leer. Así es, test legible, test más comestible.&lt;/p&gt;
&lt;h2 id=&#34;estabilidad-en-nuestros-test&#34;&gt;Estabilidad en nuestros test&lt;/h2&gt;
&lt;h3 id=&#34;como-solucionar-test-que-fallan-aleatoriamente&#34;&gt;Como solucionar test que fallan aleatoriamente&lt;/h3&gt;
&lt;p&gt;Un problema que nos podemos encontrar a la hora de hacer test, es que tenemos algunos tests que algunas veces pasan y otras no. Esto se puede deber a que tenemos una batería de test en la que el orden de ejecución influye en el resultado de los mismos. El ejemplo más claro sería un test que persiste un registro y otro test que intenta recuperar ese mismo registro. Un test no debería depender de otros para poder funcionar correctamente, por lo que cada test debería comenzar desde cero y levantar o preparar todo lo que necesite para el caso de uso que esté probando, sin esperar que sea otro test el que prepare el escenario.&lt;/p&gt;
&lt;p&gt;Por lo que tengo entendido, en JUnit (framework de unit test para JVM) la primera ejecución de los test en una máquina (tu pc) se hace forma aleatoria, pero después ejecutará los mismos test siempre en el mismo orden. Eso quiere decir que si otra máquina ejecuta esos mismos test por primera vez también será de manera aleatoria, pero solo una vez, el resto de veces se ejecutarán en el mismo orden. Tenemos un modo de indicar usando JUnit que queremos que la ejecución de nuestros test sea de modo aleatorio, y así asegurarnos que ninguno de nuestros test depende de otro. Simplemente, lograremos esta aleatoriedad estableciendo una etiqueta encima del nombre de la clase de test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Kotlin&#34; data-lang=&#34;Kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@TestMethodOrder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;MethodOrderer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SomeTest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aTest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aTest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;aTest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;como-forzar-tests-deterministas&#34;&gt;Como forzar tests deterministas&lt;/h3&gt;
&lt;p&gt;Otro punto de error que puede surgir a la hora que realizamos test, es tener aserciones que dependen de variables y que además tienen mucha tendencia a cambiar. Es decir, si en un test estamos comprobando el retorno de una función contra una variable el test pasará en ocasiones si y en otras no. Esto se debe a que comparar el resultado contra dicha variable no es la mejor idea, ya que dicha variable estará cambiando su valor constantemente y, por tanto, no tendremos un test consistente y estará lanzándonos un error cuando puede ser que en realidad la función que estamos testeando está perfecta. Vamos a ver un ejemplo en Kotlin muy sencillo con una función que tiene que comprobar si en este momento actual es de día:&lt;/p&gt;
&lt;p&gt;Por un lado, el método check() de la clase MorningChecker que devuelve true o false dependiendo de si es por la mañana o no.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MorningChecker&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isMorning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Boolean&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;startOfMorning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;endOfMorning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startOfMorning&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endOfMorning&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Por otro lado, el test que comprueba que cuando es por la mañana debería devolver true&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MorningCheckerShould&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;`check if is morning`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;morningChecker&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MorningChecker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;morningChecker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isMorning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Si estamos lanzando el test entre las 6 y las 12 nos dará un resultado correcto, pero en cualquier otro horario este test no pasaría. Nuestro método isMorning() está sacando la variable que determina que hora del día es usando una librería que te la proporciona en tiempo real, por lo que cuando vamos al test también se usa la fecha real. Vamos a cambiar un poco el panorama para que en vez de usar una variable calculada basándose en el tiempo real, usemos un parámetro:&lt;/p&gt;
&lt;p&gt;Extraemos a un parámetro la hora del día&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MorningChecker&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isMorning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Boolean&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;startOfMorning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;endOfMorning&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hour&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startOfMorning&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endOfMorning&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Y finalmente en el test le pasamos la hora que queremos comprobar para ese test&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MorningCheckerShould&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;fun&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;`check if is morning`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;morningChecker&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MorningChecker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;py&#34;&gt;actualHour&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;morningChecker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isMorning&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;actualHour&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ahora que el test tiene siempre la misma entrada, por ende tendrá siempre la misma salida. Sin sorpresas, solo lo que esperamos.
Puede parecer un caso simple, pero la idea es plasmar que nuestro test no debería depender nunca de factores variables,
que hacen que perdamos el control de lo que pasa y que en ocasiones provoquen que nuestro test no tenga siempre el mismo resultado
para la misma entrada.&lt;/p&gt;
&lt;h3 id=&#34;estructura-de-los-test&#34;&gt;Estructura de los test&lt;/h3&gt;
&lt;p&gt;Cuando hablamos de entender un test no solo está sobre la mesa su contenido, sino que su contexto también no es de utilidad
y muy importante que esté en su lugar correcto. Una buena organización y estructura de los archivos del proyecto es
fundamental, pero si aplicamos arquitectura hexagonal vamos un paso más allá, ya que estaremos separando responsabilidades
por capas y estaremos mejorando la mantenibilidad y escalabilidad de nuestro código. Pero la arquitectura hexagonal no
exclusivamente la podemos aplicar a nuestro source code (código productivo), deberíamos seguir la misma idea para nuestro test,
separándolos entre test que comprueban aspectos de la aplicación, el dominio o la infraestructura. Para aprender maś sobre
arquitectura hexagonal puede ver un post realizado por mí:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Multi-reemplazo de texto usando Regex en IntelliJ</title>
        <link>https://raulpadilladelgado.github.io/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/</link>
        <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/intellij-idea.png" alt="Featured image of post Multi-reemplazo de texto usando Regex en IntelliJ" /&gt;&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;¿Que es una regex?&lt;/strong&gt;&lt;br&gt;
Regex hace referencia a “expresión regular” y se trata de la técnica que nos permite hacer búsquedas de una secuencia de caracteres atendiendo a un patrón de búsqueda.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;El uso de expresiones regulares nos puede simplificar y acelerar el proceso de tener que reemplazar varios textos que entre sí cumplen un patrón coincidente. Veamos un ejemplo para que sea más sencillo, supongamos que tenemos un escrito en el que varias personas se están presentando, por ejemplo:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      Hola, soy Raúl y tengo 20 años
      Hola, soy María y tengo 25 años
      Hola, soy Marcos y tengo 1 años 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Cuando una persona tenga un año de edad deberíamos usar el singular en la palabra “años”, por lo que con una expresión regular vamos a modificar esa palabra para que nos sirva en ambos casos.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;La expresión regular para buscar coincidencias
[s]$

Lo que coincide (entre *)
Hola, soy Raúl y tengo 20 año**s**
Hola, soy María y tengo 25 año**s**
Hola, soy Marcos y tengo 1 año**s**

La expresión regular para reemplazar texto
($0)

Lo que se reemplaza/añade/quita (entre *)
Hola, soy Raúl y tengo 20 año**(s)**
Hola, soy María y tengo 25 año**(s)**
Hola, soy Marcos y tengo 1 año**(s)**
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;O visto en formato GIF desde el IDE IntelliJ haciendo un reemplazo de texto usando el shortcut&lt;br&gt;
Ctrl + r:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 260; 
			flex-basis: 625px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/c357b028eac2a1448d993bf279fff1363e5b1180.gif&#34; data-size=&#34;805x309&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/c357b028eac2a1448d993bf279fff1363e5b1180.gif&#34;
			width=&#34;805&#34;
			height=&#34;309&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://grow.leanmind.es/uploads/default/original/1X/c357b028eac2a1448d993bf279fff1363e5b1180.gif&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://grow.leanmind.es/uploads/default/original/1X/c357b028eac2a1448d993bf279fff1363e5b1180.gif&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grow.leanmind.es/uploads/default/original/1X/c357b028eac2a1448d993bf279fff1363e5b1180.gif&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Antes de entrar en materia y ver como utilizar esta herramienta de reemplazo de texto, vamos a repasar los tipos de match que podemos usar para construir nuestras expresiones regulares.&lt;/p&gt;
&lt;h1 id=&#34;tipos-de-match&#34;&gt;Tipos de match&lt;/h1&gt;
&lt;h2 id=&#34;caracteres&#34;&gt;Caracteres&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Characters&lt;/th&gt;
&lt;th&gt;Legend&lt;/th&gt;
&lt;th&gt;Regex Example&lt;/th&gt;
&lt;th&gt;Coincidence Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;Dígitos del uno al nueve&lt;/td&gt;
&lt;td&gt;file_\d\d&lt;/td&gt;
&lt;td&gt;file_25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;Letra, dígito o barra baja&lt;/td&gt;
&lt;td&gt;\w-\w\w\w&lt;/td&gt;
&lt;td&gt;A-b_1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;Espacios, tabuladores, saltos de línea.&lt;/td&gt;
&lt;td&gt;a\sb\sc&lt;/td&gt;
&lt;td&gt;a bc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;Un caracter que no sea un número&lt;/td&gt;
&lt;td&gt;\D\D\D&lt;/td&gt;
&lt;td&gt;ABC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;Un caracter que no sea un número ni una letra&lt;/td&gt;
&lt;td&gt;\W\W\W\W\W&lt;/td&gt;
&lt;td&gt;*-+=)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;Un caracter que no sea un espacio&lt;/td&gt;
&lt;td&gt;\S\S\S\S&lt;/td&gt;
&lt;td&gt;Yoyo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;Cualquier caracter excepto salto de línea&lt;/td&gt;
&lt;td&gt;.*&lt;/td&gt;
&lt;td&gt;whatever, man.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Escapes a special character&lt;/td&gt;
&lt;td&gt;.*+? $^/\&lt;/td&gt;
&lt;td&gt;.*+? $^/\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;Tab&lt;/td&gt;
&lt;td&gt;T\t\w{2}&lt;/td&gt;
&lt;td&gt;T ab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;Carriage return character&lt;/td&gt;
&lt;td&gt;see below&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;Line feed character&lt;/td&gt;
&lt;td&gt;see below&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r\n&lt;/td&gt;
&lt;td&gt;Line separator on Windows&lt;/td&gt;
&lt;td&gt;AB\r\nCD&lt;/td&gt;
&lt;td&gt;ABCD&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[ … ]&lt;/td&gt;
&lt;td&gt;Uno de los caracteres dentro de los corchetes&lt;/td&gt;
&lt;td&gt;[AEIOU]&lt;/td&gt;
&lt;td&gt;One uppercase vowel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[ … ]&lt;/td&gt;
&lt;td&gt;Uno de los caracteres dentro de los corchetes&lt;/td&gt;
&lt;td&gt;T[ao]p&lt;/td&gt;
&lt;td&gt;Tap or Top&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[ … ]&lt;/td&gt;
&lt;td&gt;Uno de los caracteres dentro de los corchetes&lt;/td&gt;
&lt;td&gt;[AB1-5w-z]&lt;/td&gt;
&lt;td&gt;One of either: A,B,1,2,3,4,5,w,x,y,z&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Indicador de rango&lt;/td&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;One lowercase letter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[x-y]&lt;/td&gt;
&lt;td&gt;Un caracter dentro del rango de x a y&lt;/td&gt;
&lt;td&gt;[A-Z]+&lt;/td&gt;
&lt;td&gt;GREAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[ -~]+&lt;/td&gt;
&lt;td&gt;Characters in the printable section of the ASCII table.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^x]&lt;/td&gt;
&lt;td&gt;Un caracter que no es una x&lt;/td&gt;
&lt;td&gt;[^a-z]{3}&lt;/td&gt;
&lt;td&gt;A1!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^x-y]&lt;/td&gt;
&lt;td&gt;Un caracter que NO está dentro del rango de x a y&lt;/td&gt;
&lt;td&gt;[^ -~]+&lt;/td&gt;
&lt;td&gt;Characters that are not in the printable section of the ASCII table.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[\d\D]&lt;/td&gt;
&lt;td&gt;Un caracter que es númerico o no numérico&lt;/td&gt;
&lt;td&gt;[\d\D]+&lt;/td&gt;
&lt;td&gt;Any characters, inc-luding new lines, which the regular dot doesn’t match&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;cuantificadores&#34;&gt;Cuantificadores&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Characters&lt;/th&gt;
&lt;th&gt;Legend&lt;/th&gt;
&lt;th&gt;Regex Example&lt;/th&gt;
&lt;th&gt;Coincidence Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Uno o más veces&lt;/td&gt;
&lt;td&gt;Version \w-\w+&lt;/td&gt;
&lt;td&gt;Version A-b1_1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{3}&lt;/td&gt;
&lt;td&gt;Exactamente tres veces&lt;/td&gt;
&lt;td&gt;\D{3}&lt;/td&gt;
&lt;td&gt;ABC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{2,4}&lt;/td&gt;
&lt;td&gt;De dos a cuatro veces&lt;/td&gt;
&lt;td&gt;\d{2,4}&lt;/td&gt;
&lt;td&gt;156&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;{3,}&lt;/td&gt;
&lt;td&gt;Tres o más veces&lt;/td&gt;
&lt;td&gt;\w{3,}&lt;/td&gt;
&lt;td&gt;regex_tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Cero o más veces&lt;/td&gt;
&lt;td&gt;A_B_C*&lt;/td&gt;
&lt;td&gt;AAACC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Una o ninguna vez&lt;/td&gt;
&lt;td&gt;plurals?&lt;/td&gt;
&lt;td&gt;plural&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;lógica&#34;&gt;Lógica&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Characters&lt;/th&gt;
&lt;th&gt;Legend&lt;/th&gt;
&lt;th&gt;Regex Example&lt;/th&gt;
&lt;th&gt;Coincidence Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Alternación (tipicamente OR)&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;( … )&lt;/td&gt;
&lt;td&gt;Capturar grupos&lt;/td&gt;
&lt;td&gt;A(nt&lt;/td&gt;
&lt;td&gt;pple)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\1&lt;/td&gt;
&lt;td&gt;Contenido del grupo 1&lt;/td&gt;
&lt;td&gt;r(\w)g\1x&lt;/td&gt;
&lt;td&gt;regex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\2&lt;/td&gt;
&lt;td&gt;Contenido del grupo 2&lt;/td&gt;
&lt;td&gt;(\d\d)+(\d\d)=\2+\1&lt;/td&gt;
&lt;td&gt;12+65=65+12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?: … )&lt;/td&gt;
&lt;td&gt;Grupo que no coincide&lt;/td&gt;
&lt;td&gt;A(?:nt&lt;/td&gt;
&lt;td&gt;pple)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;anclajes-y-límites&#34;&gt;Anclajes y límites&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Characters&lt;/th&gt;
&lt;th&gt;Legend&lt;/th&gt;
&lt;th&gt;Regex Example&lt;/th&gt;
&lt;th&gt;Coincidence Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;Inicio de una línea&lt;/td&gt;
&lt;td&gt;^abc .*&lt;/td&gt;
&lt;td&gt;abc (line start)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$&lt;/td&gt;
&lt;td&gt;Final de una línea&lt;/td&gt;
&lt;td&gt;.*? the end$&lt;/td&gt;
&lt;td&gt;this is the end&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;modificadores-en-línea&#34;&gt;Modificadores en línea&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Characters&lt;/th&gt;
&lt;th&gt;Legend&lt;/th&gt;
&lt;th&gt;Regex Example&lt;/th&gt;
&lt;th&gt;Coincidence Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;(?i)&lt;/td&gt;
&lt;td&gt;no distingue entre mayúsculas y minúsculas&lt;/td&gt;
&lt;td&gt;(?i)Monday&lt;/td&gt;
&lt;td&gt;monDAY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(?s)&lt;/td&gt;
&lt;td&gt;Con este modificador el . también reconocerá saltos de línea&lt;/td&gt;
&lt;td&gt;(?s)From A.*to Z&lt;/td&gt;
&lt;td&gt;From Ato Z&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;herramienta-de-reemplazo-de-texto-de-intellij&#34;&gt;Herramienta de reemplazo de texto de IntelliJ&lt;/h1&gt;
&lt;h2 id=&#34;vistazo-a-las-opciones&#34;&gt;Vistazo a las opciones&lt;/h2&gt;
&lt;p&gt;En un fichero que contenga texto, combina &lt;code&gt;Ctrl + r&lt;/code&gt; para abrir el menú de reemplazo:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1033; 
			flex-basis: 2480px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/55fa5d8551fc81582e22982d86374ddb4bb8da49.png&#34; data-size=&#34;558x54&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/55fa5d8551fc81582e22982d86374ddb4bb8da49.png&#34;
			width=&#34;558&#34;
			height=&#34;54&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;Untitled&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Untitled&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;En la primera fila del menú podemos apreciar:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/mag.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/mag.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:mag:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:mag:&lt;/figcaption&gt;
	
&lt;/figure&gt;: En primer lugar vemos el icono de una lupa en la que si pulsamos sobre ella veremos el historial de los patrones de búsqueda que hemos ido introduciendo&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/ballot_box.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/ballot_box.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:ballot_box:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:ballot_box:&lt;/figcaption&gt;
	
&lt;/figure&gt;: Al lado de la lupa nos encontramos el campo donde introduciremos nuestro patrón de búsqueda&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/leftwards_arrow_with_hook.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/leftwards_arrow_with_hook.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:leftwards_arrow_with_hook:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:leftwards_arrow_with_hook:&lt;/figcaption&gt;
	
&lt;/figure&gt;: Seguido tenemos una flecha que si pulsamos sobre ella introduciremos un salto de línea&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Cc&lt;/code&gt;&lt;/strong&gt;: Define si el patrón de búsqueda debe distinguir entre mayúsculas y minúsculas o no&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;W&lt;/code&gt;&lt;/strong&gt;: ???&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;.*&lt;/code&gt;&lt;/strong&gt;: Define si la búsqueda será utilizando expresiones regulares o texto normal&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x/x&lt;/code&gt;: El contador de resultado de la búsqueda&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/arrow_up.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/arrow_up.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:arrow_up:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:arrow_up:&lt;/figcaption&gt;
	
&lt;/figure&gt;: Mover al resultado superior&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/arrow_down.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/arrow_down.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:arrow_down:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:arrow_down:&lt;/figcaption&gt;
	
&lt;/figure&gt;: Mover al resultado inferior&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/stop_button.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/stop_button.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:stop_button:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:stop_button:&lt;/figcaption&gt;
	
&lt;/figure&gt;: Ver los resultado en una ventana de búsqueda aparte&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/ballot_box_with_check.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/ballot_box_with_check.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:ballot_box_with_check:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:ballot_box_with_check:&lt;/figcaption&gt;
	
&lt;/figure&gt;: Seleccionar el texto de todas las coincidencias y cerrar herramienta de reemplazo&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Buscar solo en la selección de texto actual&lt;/p&gt;
&lt;/dd&gt;
&lt;dd&gt;
&lt;p&gt;Buscar solo en la opción que elijamos (todo el texto, comentarios, etc)&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;En la segunda fila del menú podemos apreciar:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/mag.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/mag.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:mag:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:mag:&lt;/figcaption&gt;
	
&lt;/figure&gt;: En primer lugar vemos el icono de una lupa en la que si pulsamos sobre ella veremos el historial de los patrones de reemplazo que hemos ido introduciendo&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/ballot_box.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/ballot_box.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:ballot_box:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:ballot_box:&lt;/figcaption&gt;
	
&lt;/figure&gt;: Al lado de la lupa nos encontramos el campo donde introduciremos nuestro patrón de reemplazo&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://grow.leanmind.es/images/emoji/google/leftwards_arrow_with_hook.png?v=9&#34; &gt;
		&lt;img src=&#34;https://grow.leanmind.es/images/emoji/google/leftwards_arrow_with_hook.png?v=9&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;:leftwards_arrow_with_hook:&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;:leftwards_arrow_with_hook:&lt;/figcaption&gt;
	
&lt;/figure&gt;: Seguido tenemos una flecha que si pulsamos sobre ella introduciremos un salto de línea&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A&#39;A&lt;/code&gt;: La activamos si queremos reemplazar texto manteniendo las mayúsculas y minúsculas tal como las encontramos&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Replace&lt;/code&gt;: Reemplazar la ocurrencia seleccionada&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Replace All&lt;/code&gt;: Reemplazar todas las ocurrencias&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Exclude&lt;/code&gt;: Excluir de ser reemplazada la ocurrencia seleccionada&lt;/p&gt;
&lt;h2 id=&#34;reemplazar-texto-usando-regex&#34;&gt;Reemplazar texto usando Regex&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reemplazo directo&lt;/strong&gt;: Se trata de introducir directamente el texto que queremos se reemplaze con el que tenemos en cada coincidencia.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 260; 
			flex-basis: 625px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/24dc9862f013d27cc7ed63081fe87a99b69f4974.gif&#34; data-size=&#34;805x309&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/24dc9862f013d27cc7ed63081fe87a99b69f4974.gif&#34;
			width=&#34;805&#34;
			height=&#34;309&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://grow.leanmind.es/uploads/default/original/1X/24dc9862f013d27cc7ed63081fe87a99b69f4974.gif&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://grow.leanmind.es/uploads/default/original/1X/24dc9862f013d27cc7ed63081fe87a99b69f4974.gif&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grow.leanmind.es/uploads/default/original/1X/24dc9862f013d27cc7ed63081fe87a99b69f4974.gif&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reemplazo usando único grupo&lt;/strong&gt;: Cuando escribimos expresiones regulares sin agruparlas, es decir, sin introducirlas dentro de unos parentesis. A pesar de que en este caso no hemos agrupado dentro de nuestra expresión regular, tenemos un grupo al que podemos referirnos ($0) y se trata de cada coincidencia entera.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 260; 
			flex-basis: 625px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/ab6ebcb9c14078a528e77d0ca5306f5adcd4ee92.gif&#34; data-size=&#34;805x309&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/ab6ebcb9c14078a528e77d0ca5306f5adcd4ee92.gif&#34;
			width=&#34;805&#34;
			height=&#34;309&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://grow.leanmind.es/uploads/default/original/1X/ab6ebcb9c14078a528e77d0ca5306f5adcd4ee92.gif&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://grow.leanmind.es/uploads/default/original/1X/ab6ebcb9c14078a528e77d0ca5306f5adcd4ee92.gif&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grow.leanmind.es/uploads/default/original/1X/ab6ebcb9c14078a528e77d0ca5306f5adcd4ee92.gif&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reemplazo usando grupos definidos&lt;/strong&gt;: Cuando agrupamos dentro de nuestra expresión regular podemos realizar reemplazos de textos más avanzados. Tendremos el grupo $0 que hace referencia a cada coincidencia entera, y después tendremos $1, $2…, así por cada grupo creado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 260; 
			flex-basis: 625px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/603c4df89856471e0e58e64d7b48d0244cd8ae0f.gif&#34; data-size=&#34;805x309&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/multi-reemplazo-de-texto-usando-regex-en-intellij/images/603c4df89856471e0e58e64d7b48d0244cd8ae0f.gif&#34;
			width=&#34;805&#34;
			height=&#34;309&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://grow.leanmind.es/uploads/default/original/1X/603c4df89856471e0e58e64d7b48d0244cd8ae0f.gif&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://grow.leanmind.es/uploads/default/original/1X/603c4df89856471e0e58e64d7b48d0244cd8ae0f.gif&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://grow.leanmind.es/uploads/default/original/1X/603c4df89856471e0e58e64d7b48d0244cd8ae0f.gif&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Arquitectura hexagonal</title>
        <link>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</link>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/images/Untitled18.png" alt="Featured image of post Arquitectura hexagonal" /&gt;&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Arquitectura de software&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reglas autoimpuestas al definir como diseñamos software&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;¿Que ganamos entonces imponiéndonos este tipo de reglas?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buscamos la mantenibilidad: Somos capaces de mantener mejor el código gracias a como formamos la arquitectura&lt;/li&gt;
&lt;li&gt;Buscamos la variabilidad: Somos capaces de reemplazar piezas de nuestra arquitectura sin aparentemente un costo muy grande&lt;/li&gt;
&lt;li&gt;Buscamos el testing: Somos capaces de testear nuestro código de una forma rápida, sencilla y eficaz.&lt;/li&gt;
&lt;li&gt;Buscamos la simplicidad: Somos capaces de tener un código simétrico, que sea fácil de entender. Si entiende un caso de uso, serás capaz de entender cualquier otro, nuestro código se vuelve predecible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Esto también nos aleja de errores que no queremos cometer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evitar la complejidad accidental: Evitamos la complejidad accidental al no introducir con nuestros desarrollos más complejidad de la que el sistema ya tiene&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;la-estructura-de-directorios-en-arquitectura-hexagonal&#34;&gt;La estructura de directorios en arquitectura hexagonal&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled18.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled18.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 140; 
			flex-basis: 337px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/arquitectura-hexagonal/images/img.png&#34; data-size=&#34;931x663&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/arquitectura-hexagonal/images/img.png&#34;
			width=&#34;931&#34;
			height=&#34;663&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Las capas superiores conocen las capas inferiores y no al revés:&lt;/p&gt;
&lt;p&gt;Nuestro dominio no conoce detalles de implementación de la capa de infraestructura, solo define el contrato para que sea la infraestructura quien implemente dicho funcionamiento.&lt;/p&gt;
&lt;p&gt;La aplicación conoce el dominio a modo de poder presentar la información para que otros la consuman, en este caso, sera la capa de infraestructura quien use la aplicación para realizar las operaciones pertinentes.&lt;/p&gt;
&lt;p&gt;La infraestructura son detalles de implementación, como puede ser una base de datos, y debería poder cambiarse un tipo de infraestructura por otra sin afectar al funcionamiento base de la aplicación y el dominio.&lt;/p&gt;
&lt;h2 id=&#34;application-service-vs-domain-service&#34;&gt;Application service vs Domain service&lt;/h2&gt;
&lt;h3 id=&#34;servicios-de-aplicación&#34;&gt;Servicios de aplicación&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled19-1-1024x562.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled19-1-1024x562.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Como podemos ver en la imagen, los servicios de aplicación son el punto de entrada de nuestra aplicación. Desde el controlador ya sea de tipo API o línea de comandos, se llama al servición de aplicación para que este se encarge de realizar las operaciones pertinentes, como pueda ser:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solicita operaciones al sistema de persistencia. Dichas operaciones comienzan y finalizan en los servicios de aplicación.&lt;/li&gt;
&lt;li&gt;Publicar eventos de dominio&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Son el inicio de un caso de uso de nuestro aplicación.&lt;/p&gt;
&lt;p&gt;Un Servicio de aplicación instancia un Servicio de dominio para evitar la duplicidad de código.&lt;/p&gt;
&lt;h3 id=&#34;servicios-de-dominio&#34;&gt;Servicios de dominio&lt;/h3&gt;
&lt;p&gt;Son el resultado de agrupar lógica de negocio que podremos reutilizar desde los servicios de aplicación. Imaginemos que tenemos dos casos de uso en nuestra aplicación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obtener una playlist en base a su identificador&lt;/li&gt;
&lt;li&gt;Modificar el nombre de una playlist&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;¿Que comparten ambos casos?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Necesitan ir al repositorio de playlists a buscar la playlist dado un identificador&lt;/li&gt;
&lt;li&gt;Lanzar una excepción de dominio tipo PlaylistNotFound en el caso de que no encuentre la playlist&lt;/li&gt;
&lt;li&gt;Retornar la playlist en caso de encontrarla&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Entonces extraeremos a un Servicio de dominio dicho compartimiento común que tendrían nuestros dos casos de uso (dos servicios de aplicación).&lt;/p&gt;
&lt;h2 id=&#34;sevicios-de-infraestructura&#34;&gt;Sevicios de infraestructura&lt;/h2&gt;
&lt;p&gt;❌ &lt;strong&gt;No acoplar la estructura de un contrato con su implementación&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Un error muy común sería modelar el dominio de tal forma que aunque no esté acoplado a la infraestructura, si esté pensando para tener la estructura para alguna implementación específica. Por ejemplo, en nuestro aplicación tenemos un servicio de notificaciones, y desde un principio tenemos claro que en la infraestructura inicial estará slack como ese servicio, el error sería modelar el dominio para que cumpla los requisitos que pide tal implementación.&lt;/p&gt;
&lt;p&gt;💉 &lt;strong&gt;Inyectar las dependencias de los adaptores/implementaciones por constructor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para poder solventar esto, debemos modelar el dominio pensando en que sea lo más abstracto posible, sin influirle con nada, y en el caso de necesitar parámetros específicos para la implementación, lo haríamos mediante su constructor. El contructor nunca lo definiremos en la interface, irá en sus implementaciones, y entonces será la infraestructura la que se encarge de conocer el dominio y de como acoplarse a el.&lt;/p&gt;
&lt;p&gt;🧪 &lt;strong&gt;Usamos implementaciones fake de servicios para nuestros test&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Usaremos implementaciones fake para poder testear sin tener que ejecutar el código real que tenemos en la infraestructura. Estaríamos evitando también tener que falsear el comportamiento de un servicio existente, algo que se puede complicar al tratar de mockear las dependencias y funcionamiento de esa implementación.&lt;/p&gt;
&lt;h2 id=&#34;testing-en-arquitectura-hexagonal&#34;&gt;Testing en arquitectura hexagonal&lt;/h2&gt;
&lt;h3 id=&#34;testing-capa-de-aplicación-y-dominio-test-unitario&#34;&gt;Testing capa de aplicación y dominio (test unitario)&lt;/h3&gt;
&lt;p&gt;Los test unitarios son los que usaremos para comprobar que la lógica de negocio de nuestros casos de uso (capa de aplicación) y modelos o servicios de dominio se comportan como esperamos. Características principales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El objetivo de estos tests es el de &lt;strong&gt;validar que la implementación de nuestra lógica de negocio es correcta&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Son los test más rápidos de ejecutar&lt;/strong&gt;. En estos tests falsearemos la implementación a usar de todo componente de infraestructura. Es decir, allá donde definamos un puerto en nuestros casos de uso, inyectaremos un doble de test para que no hagan operaciones de entrada/salida pero poder validar la interacción del dominio con estos componentes. Importante falsear la interface de dominio y no el cliente final para evitar incurrir en &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=XbkjUz20pOk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;el anti-patrón de Infrastructure Mocking.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;El test unitario será independiente del punto de entrada&lt;/strong&gt;. Desde el momento en el que encapsulamos nuestros casos de uso en servicios de aplicación para poderlos reaprovechar desde múltiples puntos de entrada (controlador API HTTP o CLI), el test unitario invocará directamente al caso de uso para desacoplarse también del controlador.&lt;/li&gt;
&lt;li&gt;Al ser los más rápidos de ejecutar y estar centrados en la lógica de negocio, es en estos test donde ubicamos las &lt;strong&gt;comprobaciones más exhaustivas&lt;/strong&gt; en cuanto a las distintas ramificaciones de nuestros casos de uso.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gracias a que nuestro dominio no conoce detalles de implementación de la capa de infraestructura, solo define el contrato para que sea la infraestructura quien implemente dicho funcionamiento, tenemos la posibilidad de crear implementaciones específicas para nuestros test. Supongamos que tenemos un servicio que necesita un repositorio para persistir en base de datos, dado que no estamos acoplados a una implementación específica, en nuestros test podrías definir una nueva implementación que permita testear solo el comportamiento de la capa de aplicación y de dominio, ya que en este caso no necesitaríamos testear infraestructura en este tipo de test unitario.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/ApplicationService.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/ApplicationService.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;testing-capa-de-infraestructura&#34;&gt;Testing capa de infraestructura&lt;/h3&gt;
&lt;p&gt;Un tipo de test donde &lt;strong&gt;el objeto de test es alguna implementación de uno de nuestros puertos&lt;/strong&gt;. Es decir, en el caso del test unitario, habríamos falseado mediante un doble (&lt;code&gt;PlaylistRepositoryFake&lt;/code&gt;) de test la interface de dominio &lt;code&gt;PlaylistRepository&lt;/code&gt;, mientras que en el test de integración lo que haremos será justamente testear la implementación de &lt;code&gt;PlaylistRepositoryPgsql&lt;/code&gt; para validar que se comporta como esperamos.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;		@Test
    public void it_should_save_a_playlist()
    {
        repository().save(&amp;#34;Hello, I am a playlist&amp;#34;);
    }

    @Test
    public function it_should_check_if_exists_a_playlist()
    {
        String playlist = &amp;#34;Hello, I am a playlist&amp;#34;;

        repository().save(playlist);
        
        assertThat(repository().search($playlist)).isTrue();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;test-de-aceptación&#34;&gt;Test de aceptación&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Simulan ser un cliente de nuestra aplicación&lt;/strong&gt;. Entrarán en juego todas las implementaciones reales para comprobar que todo el flujo y la integración con la infraestructura se producen satisfactoriamente. Con lo cuál, las características principales serían:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El objetivo de estos tests es el de &lt;strong&gt;asegurar que la aplicación funciona correctamente&lt;/strong&gt; y el flujo completo de las peticiones se puede realizar satisfactoriamente.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Son los test más lentos&lt;/strong&gt; de ejecutar ya que tienen un alcance mayor y sí ejecutan operaciones de entrada/salida como inserts en base de datos ya que usan las implementaciones reales de estos componentes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aportan mayor valor&lt;/strong&gt; debido al alcance que tienen (nos asegura que absolutamente todo está ejecutandose como esperamos)&lt;/li&gt;
&lt;li&gt;En nuestro caso, al implementar una API HTTP, &lt;strong&gt;simularemos peticiones HTTP&lt;/strong&gt; y comprobaremos que las respuestas tienen el código HTTP y el contenido del cuerpo esperados.&lt;/li&gt;
&lt;li&gt;Al ser los test más lentos de ejecutar, &lt;strong&gt;sólo implementaremos una pequeña muestra de las distintas ramificaciones&lt;/strong&gt; que pueden tomar nuestros casos de uso. Dejando para los test unitarios la responsabilidad de probar cada una de las casuísticas. Así evitaremos incurrir en el &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=kXhXBzvxUsM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;anti-patrón de test del cono de helado&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>El arte de la línea de comandos</title>
        <link>https://raulpadilladelgado.github.io/blog/p/el-arte-de-la-l%C3%ADnea-de-comandos/</link>
        <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/el-arte-de-la-l%C3%ADnea-de-comandos/</guid>
        <description>&lt;h1 id=&#34;por-qué-aprender-bash&#34;&gt;¿Por qué aprender bash?&lt;/h1&gt;
&lt;p&gt;La respuesta corta es porque linux es realmente GNU/Linux. Sólo el kernel es linux, pero la colección base de utilidades que proporcionan el entorno Unix es proporcionada por GNU y el shell de GNU es bash. Es por esto que bash el shell por defecto que te encontrarás en cualquier distribución o servidor basado en linux.&lt;/p&gt;
&lt;p&gt;Hay muchas shells que se adaptan mejor a los propósitos o gustos individuales, como pueden ser zsh, pero creo que al ser un estandar es muy positivo dominar la herramienta para tener un desarrollo fluido, cómodo y productivo cuando necesites usarla o por si es tu shell de preferencia.&lt;/p&gt;
&lt;h1 id=&#34;que-dominar-de-bash&#34;&gt;¿Que dominar de bash?&lt;/h1&gt;
&lt;h2 id=&#34;shortcuts&#34;&gt;&lt;strong&gt;Shortcuts&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Tab&lt;/code&gt; ➡️ autocompletar comandos&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + r&lt;/code&gt; ➡️ buscar en el historial de comandos. Pulsa &lt;code&gt;Enter&lt;/code&gt; para ejecutar un comando o pulsa &lt;code&gt;flecha derecha&lt;/code&gt; para editar&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + w&lt;/code&gt; ➡️ borra la última palabra&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + u&lt;/code&gt; ➡️ borra hasta inicio de línea&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + k&lt;/code&gt; ➡️ borra hasta final de línea&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alt + b&lt;/code&gt; ➡️ mover cursor a palabra anterior&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alt + f&lt;/code&gt; ➡️ mover cursor a palabra posterior&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + a&lt;/code&gt; ➡️ mover cursor a principio de línea&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + e&lt;/code&gt; ➡️ mover cursor a final de línea&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl + l&lt;/code&gt; ➡️ vaciar terminal, limpiarla&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; ➡️ ir al directorio principal (tu usuario)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~ == /home/usuario&lt;/code&gt; ➡️ abreviación de directorio principal&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd -&lt;/code&gt; ➡️ volver al directorio de trabajo previo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd ..&lt;/code&gt; ➡️ ir un directorio más arriba&lt;/p&gt;
&lt;p&gt;Puedes encontrar todos los que tienes asignado ejecutando en terminal:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bind -p
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;trucos&#34;&gt;&lt;strong&gt;Trucos&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;mi-comando-es-demasiado-largo-o-complejo&#34;&gt;&lt;strong&gt;Mi comando es demasiado largo o complejo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;La solución es sencilla, abrirlo en un editor pero hay una forma muy rápida de realizarlo&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;En primer lugar define tu editor si no lo habías hecho &lt;code&gt;export EDITOR=vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Comienza a escribir un comando &lt;code&gt;echo simpleTest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pulsa &lt;code&gt;ctrl + w&lt;/code&gt; y después &lt;code&gt;ctrl + e&lt;/code&gt; y automáticamente el comando se abrirá en tu editor&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;detener-procesos&#34;&gt;&lt;strong&gt;Detener procesos&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Por nombre completo&lt;/em&gt;: killall process&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Seleccionando ventana&lt;/em&gt;: xkill&lt;/p&gt;
&lt;h3 id=&#34;comandos-en-background&#34;&gt;&lt;strong&gt;Comandos en background&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;La sintaxis es añadir nohup al principio del comando y &amp;amp; al final&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;raul@raul-pc:~$ nohup sleep 10 &amp;amp;
[1] 4172
raul@raul-pc:~$ nohup: ignoring input and appending output to &amp;#39;nohup.out&amp;#39;
^C
raul@raul-pc:~$ ps 
    PID TTY          TIME CMD
   3615 pts/1    00:00:00 bash
   4172 pts/1    00:00:00 sleep
   4173 pts/1    00:00:00 ps
raul@raul-pc:~$ ps 
    PID TTY          TIME CMD
   3615 pts/1    00:00:00 bash
   4174 pts/1    00:00:00 ps
[1]+  Done                    nohup sleep 10
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cuanto-tiempo-llevo-usando-el-pc&#34;&gt;&lt;strong&gt;¿Cuanto tiempo llevo usando el PC?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Utiliza &lt;code&gt;uptime&lt;/code&gt; o &lt;code&gt;w&lt;/code&gt; que proporciona más informacion que el anterior.&lt;/p&gt;
&lt;h3 id=&#34;abrevia-con-los-alias&#34;&gt;&lt;strong&gt;Abrevia con los alias&lt;/strong&gt;&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;raul@raul-pc:~$ alias hello=&amp;#34;echo hello world&amp;#34;
raul@raul-pc:~$ hello
hello world
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;el-uso-de-parentesis&#34;&gt;&lt;strong&gt;El uso de parentesis&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Por ejemplo si estamos desarrollando un script y queremos movermos a otro directorio en una sola instrucción y tras esta seguir donde estabamos podemos añadir parentesis a la secuencia que se movia a otro directorio:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# do something in current dir
(cd /some/other/dir &amp;amp;&amp;amp; other-command)
# continue in original dir
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;evitar-reproducir-un-texto&#34;&gt;&lt;strong&gt;Evitar reproducir un texto&lt;/strong&gt;&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;raul@raul-pc:~/Desktop$ touch hola.js
raul@raul-pc:~/Desktop$ touch hola.html
raul@raul-pc:~/Desktop$ mv hola.{js,html} ~/Downloads/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ver-diferencias-entre-dos-archivos&#34;&gt;&lt;strong&gt;Ver diferencias entre dos archivos&lt;/strong&gt;&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;diff file1 file2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;redirigir-resultados-de-un-comando&#34;&gt;&lt;strong&gt;Redirigir resultados de un comando&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Guardar salida en archivo&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo test &amp;gt; afile.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Guardar salida estándar en archivo&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo test 1&amp;gt; afile.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Guardar error estándar en archivo&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo test 2&amp;gt; afile.txt
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo test 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ejecutar-un-comando-con-los-argumentos-del-anterior&#34;&gt;&lt;strong&gt;Ejecutar un comando con los argumentos del anterior&lt;/strong&gt;&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;raul@raul-pc:~$ touch 4.txt
raul@raul-pc:~$ ls !$
ls 4.txt
4.txt
raul@raul-pc:~$
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ejecutar-scripts-al-inicio&#34;&gt;&lt;strong&gt;Ejecutar scripts al inicio&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Con systemd&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://juncotic.com/systemd-ejecutando-un-script-al-inicio-de-gnu-linux/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://juncotic.com/systemd-ejecutando-un-script-al-inicio-de-gnu-linux/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Con crontab&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#Put into crontab
@reboot /home/test/Documentos/scripts/mi-primer-script.sh

#Check if crontab is enabled
sudo systemctl status cron.service

#Enable if is needed
sudo systemctl enable cron.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;More&lt;/em&gt;: &lt;a class=&#34;link&#34; href=&#34;https://computernewage.com/2019/03/09/scripting-linux-bash-ejecutar-script-arranque/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://computernewage.com/2019/03/09/scripting-linux-bash-ejecutar-script-arranque/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;el-pc-no-se-congela-del-todo&#34;&gt;El PC no se congela del todo&lt;/h3&gt;
&lt;p&gt;Si te pasa que el ordenador se congela al estar usandolo por la ejecucción de alguna aplicación o simplemente porque se ha congelado la sesión de escritorio actual, todavía existe una vía de escape que no es apagar el PC y volver a encenderlo. Si tienes suerte y el PC no se ha congelado del todo, es decir, solo se ha afectado la parte gráfica, puedes seguir estos pasos para restaurar la sesión en poco tiempo:&lt;/p&gt;
&lt;p&gt;En primer lugar abriremos la terminal que no está asociada a la sesión gráfica, es decir, el clásico Ctrl + Alt + T no nos vale en este caso. En su lugar usaremos Ctrl + Alt + F2 para abrir una terminal, y nos pedirá que introduzcamos el nombre y la contraseña del usuario&lt;/p&gt;
&lt;p&gt;Una vez dentro pasaremos a utilizar el comando &lt;code&gt;htop&lt;/code&gt; para acabar con el problema. Si no lo tienes instalado podrás hacerlo de forma normal con APT:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install htop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Escribimos htop y se nos abrirá una lista de procesos que están corriendo actualmente en el sistema. Si nuestro problema es una aplicación la localizamos y pulsamos F9 (kill) sobre ella. En el menú de la izquierda aparecen muchas opciones, destacaremos dos:&lt;/p&gt;
&lt;p&gt;15 (Sigterm) ⇒ La mayoría de procesos están escuchando por si el sistema les pide que paren su ejecucción, por lo que debería ser la primera opción que probemos&lt;/p&gt;
&lt;p&gt;09 (Sigkill) ⇒ En el caso de que el anterior opción no nos valga, usaremos esta opción para forzar el cierre del proceso&lt;/p&gt;
&lt;p&gt;Una vez realizado lo anterior, es momento de volver a la interfaz gráfica. Usaremos Ctrl + Alt + F1 para volver a ella.&lt;/p&gt;
&lt;h3 id=&#34;reemplazar-texto&#34;&gt;Reemplazar texto&lt;/h3&gt;
&lt;p&gt;Con el uso del comando sed podemos reemplazar texto sin la necesidad ni el trabajo manual de realizarlo en un editor de texto. Un ejemplo de como usarlo podría ser:&lt;/p&gt;
&lt;p&gt;Este ejemplo muestra el primer carácter de cada palabra en paréntesis:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;#34;Bienvenidos al Mundo de los Bits y los Bytes&amp;#34; | sed &amp;#39;s/\\(\\b[A-Z]\\)/\\(\\1\\)/g&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Con el resultado:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(B)ienvenidos(A)l(M)undo de los(B)its y los(B)ytes
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;si-no-se-lo-que-hace-un-comando&#34;&gt;&lt;strong&gt;Si no se lo que hace un comando&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Tienes un comando con un par de opciones definidas y no sabes que es lo que hace con todas esas opciones, ejemplo: &lt;code&gt;ls -ltrh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Los comandos sueles traer consigo una opción &lt;code&gt;--help&lt;/code&gt; o &lt;code&gt;-help&lt;/code&gt;o &lt;code&gt;-h&lt;/code&gt; que te cuentan todo acerca del comando, también puedes recurrir a utilizar otro comando que se llama &lt;code&gt;tldr&lt;/code&gt;, que te soltará ejemplos muy usados y con breve descripción para un comando. Pero si aun así necesitas algo más te voy a exponer una solución muy parecida a la opción &lt;code&gt;--help&lt;/code&gt;, pero con una interfaz más atractiva y amigable. Es el caso de &lt;em&gt;explainshell&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://explainshell.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;explainshell.com - match command-line arguments to their help text&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;todo-esto-y-mucho-más-en&#34;&gt;Todo esto y mucho más en&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Recientemente me he encontrado un repositorio que contiene una serie de markdowns (mismo contenido, distintos idiomas) que tratan una serie de utilidades para aprender de la terminal, principalmente de Linux, aunque se tratan también aspectos MacOS y Windows. Lo recomiendo mucho porque está explicado de una forma sencilla y porque trata una cantidad de herramientas muy útiles que aprender.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/jlevy/the-art-of-command-line/blob/master/README-es.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jlevy/the-art-of-command-line&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>¿Como funciona async await?</title>
        <link>https://raulpadilladelgado.github.io/blog/p/como-funciona-async-await/</link>
        <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/como-funciona-async-await/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Asíncrono&lt;/strong&gt; &amp;ldquo;Que no tiene lugar en completa correspondencia temporal con otro proceso o con la causa que lo produce.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recientemente he estado desarrollando un proyecto basado en Node JS que usaba una librería externa en la que sus métodos devolvían promesas. Sin tener mucha experiencia con lo asíncrono en javascript, para mi la forma más simple de entenderlo y aplicarlo correctamente fue la siguiente:&lt;/p&gt;
&lt;p&gt;Supongamos que tienes una promesa como por ejemplo:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function resolveAfter2Seconds() {
  return new Promise(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; {
      resolve(&amp;#39;resolved&amp;#39;);
    }, 2000);
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hasta que dicha promesa no sea resuelta, es decir, que en el caso anterior se hayan completado los dos segundos, no tendríamos el resultado de dicha promesa (resolved). Lo que implica que cualquier otro módulo que llame a esta función necesita funcionar de forma asíncrona, para poder alterar la correspondencia temporal. Digamos que vamos a obligar al motor de javascript que espere hasta que nuestra promesa sea resuelta.&lt;/p&gt;
&lt;p&gt;El motor de javascript es síncrono&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;async function asyncCall() {
  console.log(&amp;#39;calling&amp;#39;);
  const result = await resolveAfter2Seconds();
  console.log(result);
  // expected output: &amp;#34;resolved&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Hemos utilizado &lt;code&gt;async&lt;/code&gt; para indicar que la función tendrá un comportamiento asíncrono, y &lt;code&gt;await&lt;/code&gt; para especificar que esperaremos hasta que la promesa que retorna la función llamada sea resuelta.&lt;/p&gt;
&lt;p&gt;Fuente consultada: &lt;a class=&#34;link&#34; href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>La personalidad en un aprendiz</title>
        <link>https://raulpadilladelgado.github.io/blog/p/la-personalidad-en-un-aprendiz/</link>
        <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/la-personalidad-en-un-aprendiz/</guid>
        <description>&lt;p&gt;Cuando me incorporé en el proyecto de uno de nuestros colaboradores, sentía que mis conocimientos estaban limitados y ejercía un rol de principiante, donde mi misión erradicaba en el papel de una esponja, si se me permite la comparación. Debía absorber toda la sabiduría de los compañeros con mayor experiencia laboral. Creo que esta sensación es algo natural, ya que, para cultivar los conceptos necesarios, se debe estudiar y practicar. En esta fase de asimilación de conceptos, cualquier consejo, feedback o enseñanza es de agradecimiento.&lt;/p&gt;
&lt;p&gt;A medida que avanzaban los días, aprendí nuevas tecnologías, metodologías de diseño, formas de hacer test, etc. Era consciente de que obtenía conceptos más técnicos, lo que me aportó confianza para intervenir e intentar ayudar dentro de lo posible. Esta nueva sensación era fundamental para mí, ¿por qué?, es sencillo. Me sentía parte de algo, de un grupo en el que importaba mi presencia y en el que podía ayudar. Esto alimenta un ego positivo que surge en lo más hondo, es una forma de automotivación que anima a dar lo mejor de ti cada día.&lt;/p&gt;
&lt;p&gt;Tras medio año, noto un avance de mis conocimientos (a pesar de esto, soy consciente de que me queda muchísimo por aprender), pero he reflexionado acerca de una cualidad que todo desarrollador debe tener, y que, personalmente, tuve que desarrollar para ser más eficaz en el ámbito laboral. Con esto hago referencia a la constitución de la personalidad. He hecho pairing con otros compañeros, en muchas ocasiones con personas con amplia experiencia, lo que es considerado técnicamente como un Senior developer. Mis ganas de aportar eran insaciables, por lo que fluían en mi cabeza un sinfín de ideas sobre lo que se iba desarrollando, pero por motivos que desconozco, me cohibía el pensar en la vasta experiencia de la otra persona, lo que impedía que mis ideas se dieran a conocer. Cuando fui consciente del valor que estaba dejando escapar, mi propósito fue firme, debía aportar cada idea que me surgiera, estuviera seguro o no de la certeza de mi pensamiento. Solo existían dos caminos posibles y ambos conducían a la victoria: el primero, podía estar equivocado, pero mis compañeros propondrían una mejor solución y yo interiorizaría la lección; el segundo, mi idea era cierta y estaba proponiendo algo que podía contribuir al desarrollo y al equipo. Muchas veces esa “pregunta necia” puede mostrarte lo que estabas obviando o darte una nueva perspectiva que te ayude a comprender el tema en cuestión.&lt;/p&gt;
&lt;p&gt;En innumerables ocasiones observé en silencio a compañeros con mayor experiencia en el sector hablando de temas que desconocía y esto me producía pavor, una sensación de carencia de conocimiento sobre la materia. Tras un trabajo continuo, analizando todo lo que comentan, eres capaz de aprender valiosas lecciones, no sólo aspectos técnicos, sino el valor que se refleja en sus personalidades. A un ingeniero Senior puedes identificarlo más por sus habilidades blandas que por sus técnicas, son personas sumamente pacientes y amigables. Son más unos guías que personas con gran conocimiento técnico. Tienen habilidades extraordinarias de liderazgo y versatilidades sumamente útiles.&lt;/p&gt;
&lt;p&gt;Debe tenerse en cuenta en todo momento que en el equipo en el que te integras quizás no seas la figura con más dominio técnico, pero siempre puedes ser más productivo, quien entrega funcionalidades cuidadas gracias a todo el empeño, buscando las fallas mínimas. Desde mi perspectiva, una de las habilidades más relevantes cuando inicias este recorrido es la paciencia, porque sin ella resulta complicado aprender, puede llegarse incluso a la frustración, sensación por la que las ganas escasean. Siempre existe un momento para ti, pero para lograrlo se debe buscar y trabajar con constancia. Otra habilidad es la perseverancia, porque sin ella no puede dominarse nada, es como aprender a montar en bicicleta, te caes y te levantas hasta que lo consigues.&lt;/p&gt;
&lt;p&gt;Después de comprender esto, siento que aporto más valor, pero lo que es aún más importante, me siento más libre y capaz de todo. El mejor experto también fue en su día un aprendiz y está en la cumbre porque en su momento falló, acertó, arriesgó, ayudó y aprendió. Si tuviese que extraer una moraleja de esto sería explicando que existen tres tipos de personas en el mundo: los que hacen que las cosas ocurran, los que ven cómo ocurren las cosas y los que se preguntan qué ocurrió (N. Butler).&lt;/p&gt;
&lt;p&gt;Ahora mi visión es menos confusa, si hoy no comprendo algo, preguntaré cómo ocurrió y seré yo quien hará que suceda. Se debe aprovechar cualquier momento de aprendizaje, ya que es fundamental para llegar a conseguir una mejor versión de nosotros mismos.&lt;/p&gt;
&lt;p&gt;Todos hemos tenido un mentor, esa persona que es tu referencia y no sólo por su conocimiento, sino por ser una persona capaz de transmitir su sabiduría con los demás de una forma inteligente, con paciencia, respeto y sus mejores intenciones en tu aprendizaje. Un gran compañero quiso transmitirme que podía contar con él para cualquier duda o problema en el trabajo, y me contó unas grandes palabras que nunca olvidaré. Me habló sobre las cuatro etapas de la competencia:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Haces algo mal y no eres consciente de ello, porque aún no te has dado cuenta&lt;/li&gt;
&lt;li&gt;Haces algo mal, pero te lo han dicho o te has dado cuenta de alguna forma y eres consciente de ello, por lo que ya estás preparado para mejorar en ese aspecto.&lt;/li&gt;
&lt;li&gt;Haces algo bien, has aprendido de tus errores y has mejorado, aunque te requiere un esfuerzo y concentración para lograr realizar la tarea correctamente.&lt;/li&gt;
&lt;li&gt;Haces algo bien, y gracias a tu constancia y perseverancia ya lo realizas sin pensarlo, no necesitas concentrarte, porque dominas lo que haces y para ti es algo cotidiano.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En el ciclo vital, recorremos las cuatro etapas. Pasamos de novatos a expertos, es ley de vida, la constancia y el trabajo nos mejora profesionalmente y personalmente. La programación no es una excepción, existen personas con mayor conocimiento que el resto, pero se debe a su trabajo y constancia para lograr dominar el tema en cuestión. Nadie debería negarle su ayuda a otra persona, pues el buen mentor hace que otros con menor experiencia pasen por las cuatro etapas de la competencia de una forma eficiente y provechosa.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Versiona tus dotfiles</title>
        <link>https://raulpadilladelgado.github.io/blog/p/versiona-tus-dotfiles/</link>
        <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/versiona-tus-dotfiles/</guid>
        <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;
&lt;p&gt;Durante mucho tiempo fui usuario de Windows, pero un día decidí probar Linux y terminé por elegirlo como mi sistema operativo para trabajar. Llegando a un mundo nuevo para mí, decidí probar distintas distribuciones Linux para encontrar cual era la que mejor se adaptaba al uso que que le daría. Tras ver un curso en CodelyTV, pude aprender que la configuración que tediosa que hacemos día tras día desde que iniciamos en una máquina se puede resumir en la simple ejecucción de un script, y puedo decir que ojalá haber conocido está prática tan simple pero que aporta y ayuda tanto a la configuración personal.&lt;/p&gt;
&lt;h1 id=&#34;qué-es-un-dotfile&#34;&gt;¿Qué es un dotfile?&lt;/h1&gt;
&lt;p&gt;Las configuraciones específicas del usuario se almacenan tradicionalmente en los llamados &lt;em&gt;dotfiles&lt;/em&gt; (archivos cuyo nombre comienza con un punto). Es una práctica común versionarlos con un sistema de control de versiones como Git para realizar un seguimiento de los cambios y sincronizarlos en varias máquinas. Es decir, gracias a esta práctica podremos pasar a una máquina nueva y configurarla a nuestro gusto, tal y como estaba la anterior de una forma muy rápida y con el mínimo esfuerzo.&lt;/p&gt;
&lt;p&gt;En este post estaré enseñando como tener nuestro repositorio centralizado de archivos de configuración de nuestra máquina. Veremos todas las cosas que podemos automatizar (que yo he descubierto y entendido por el momento) y entre todos aprenderemos como exprimir esta práctica.&lt;/p&gt;
&lt;h1 id=&#34;la-guía&#34;&gt;La guía&lt;/h1&gt;
&lt;h2 id=&#34;entendiendo-el-workflow&#34;&gt;Entendiendo el workflow&lt;/h2&gt;
&lt;p&gt;Como he dicho anteriormente, el objetivo es centralizar todos las configuraciones en un repositorio, así que el proceso que debemos realizar ahora es el siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Identifica un archivo o carpeta de configuración que comienza por un punto en nuestra home y que queremos guardar (usa &lt;code&gt;ls -a&lt;/code&gt; para listarlas)&lt;/li&gt;
&lt;li&gt;Mueve una carpeta o archivo desde la home a la carpeta &amp;ldquo;.dotfiles&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Crea un enlace simbólico para que la configuración pueda ser accedida desde la home pero estando realmente alojada en la subcarpeta &amp;ldquo;.dotfiles&amp;rdquo; (ejemplo: &lt;code&gt;ln -s .dotfiles/.gitconfig $PWD/.gitconfig&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Ejemplo&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mv .bashrc .dotfiles
ln -s .dotfiles/.bashrc $PWD/.bashrc

Resultado
.bashrc -&amp;gt; .dotfiles/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Si necesitas borrar un enlace simbólico porque te has equivocado o la ruta donde lo almacenas ha cambiado, puedes usar el comando &lt;strong&gt;&lt;em&gt;unlink&lt;/em&gt;&lt;/strong&gt; : (&lt;em&gt;Ejemplo&lt;/em&gt;) &lt;code&gt;unlink .bashrc&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;ahora-sí-automatizemos-esto&#34;&gt;Ahora sí, automatizemos esto&lt;/h2&gt;
&lt;h3 id=&#34;-el-repo&#34;&gt;📦 &lt;strong&gt;El repo&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;He creado un repositorio en Github llamado &amp;ldquo;dotfiles&amp;rdquo;, que posteriormente clonaré en local en la carpeta &amp;ldquo;.dotfiles&amp;rdquo; que se alojará en mi home (la carpeta principal de mi usuario).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone git@github.com:raulpadilladelgado/dotfiles.git .dotfiles
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;-exclusión&#34;&gt;🚫 Exclusión&lt;/h3&gt;
&lt;p&gt;Pongamos el caso de que en una carpeta queremos versionar varias carpetas, pero hay una que concretamente no queremos tener. Usemos el tan querido .gitignore. Ejemplo:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;.gitignore&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;shell/zsh/**/**.zwc 
shell/zsh/**/**.zwc.old 
/**/**/private-*
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;-estructura&#34;&gt;🏗️ &lt;strong&gt;Estructura&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Todo organizado se encuentra mejor y luce mejor. No hay un convenio de carpetas para los dotfiles (aunque puede usar &lt;a class=&#34;link&#34; href=&#34;https://github.com/CodelyTV/dotfiles&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;el de CodelyTV&lt;/a&gt;) pero puedes aplicar tu habilidad de organización para crear las distintas carpetas para los distintos programas y que quede todo organizado.&lt;/p&gt;
&lt;h3 id=&#34;-scripts&#34;&gt;⚙️ &lt;strong&gt;Scripts&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Para symlinks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Antes estuvimos haciendo uso de los symlinks para nuestro propósito de los dotfiles, pero era un trabajo un muy manual. Para mejorarlo y que se solo la tengamos que realizar una vez, podemos hacer un script que ejecutemos cada vez que cambiemos de máquina para poder tener los dotfiles linkeados a nuestra máquina de la forma más rápida y sencilla posible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Para programas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ya hemos visto como utilizar los dotfiles para guardar nuestros archivos de configuración y demás, pero podríamos ir un paso más allá, teniendo en nuestro proyecto de dotfiles una forma que nos permita instalar todos nuestros programas en un momento.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Opción 1 - Importamos una lista de programas que teníamos instalados&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;La idea es poder llevarnos la referencia de los programas que tenemos instalados para después importarlos.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Exportación&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Primero vamos a sacar la lista de los programas instalados.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#Para brew (gestor de paquetes de mac)
brew bundle dump --file=&amp;#34;$HOMEBREW_BUNDLE_FILE_PATH&amp;#34; --force

#Para apt (gestor de paquetes típico en debian y derivadas)
sudo dpkg-query -l | awk &amp;#39;{if ($1 == &amp;#34;ii&amp;#34;) print $2}&amp;#39; &amp;gt; packages_list.txt

#Para pip (gestor de paquetes python)
pip freeze &amp;gt;&amp;#34;$DOTFILES_PATH/langs/python/requirements.txt&amp;#34;

#Para npm (gestor de paquetes de node)
ls -1 /usr/local/lib/node_modules | grep -v npm &amp;gt;&amp;#34;$DOTFILES_PATH/langs/js/global_modules.txt&amp;#34;

#Para composer
Movemos el archivo ~/.composer/composer.json a nuestro proyecto de dotfiles
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Importación&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#Para brew (gestor de paquetes de mac)
brew bundle --file=&amp;#34;$HOMEBREW_BUNDLE_FILE_PATH&amp;#34; --force

#Para apt (gestor de paquetes típico en debian y derivadas)
sudo xargs -a packages_list.txt apt install

#Para pip (gestor de paquetes python)
pip install -r &amp;#34;$DOTFILES_PATH/langs/python/requirements.txt&amp;#34;

#Para npm (gestor de paquetes de node)
xargs -I_ npm install -g &amp;#34;_&amp;#34; &amp;lt;&amp;#34;$DOTFILES_PATH/langs/js/global_modules.txt&amp;#34;

#Para composer
Hacemos un symlink del ~/.composer/composer.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;¿Usas paquetes snap?. Este gestor de paquetes que usan las distribuciones de canonical permite la exportación e importación de los datos de las aplicaciones instaladas. ¿Como?&lt;/p&gt;
&lt;p&gt;Vacia el directorio (para tener solo la última copia de seguridad de cada programa): &lt;code&gt;/var/lib/snapd/snapshots&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Exportación (nos dará un ZIP por programa): &lt;code&gt;snap save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Mueve los archivos a tu proyecto: &lt;code&gt;mv /var/lib/snapd/snapshots .dotfiles/apps/snap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Haz un symlink a la ruta &lt;code&gt;/var/lib/snapd/snapshots&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instala los snap en la máquina nueva (recomendado script): &lt;code&gt;snap install app1 app2 app3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finalmente ejecuta la restauración (el id es el número por el que comienzan todos los archivos zip, debería ser sencillo porque problamente todos se te hayan exportado con el mismo ID haciendo referencia a que se exportaron en el mismo proceso): &lt;code&gt;snap restore &amp;lt;id&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Algunas apps como spotify llegan a pesar 1GB que entiendo que puede ser por temas de caché y canciones descargadas, por lo que sería conveniente reducirlo primero antes de añadirlo al proyecto o no incluir algo así. Usar tu propio script de instalación es una solución pero no te llevaría configuración del snap.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Opción 2 - Creamos nuestro propio script de instalación&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Además de crear tu propio script, también puedes hacer uso de algunos predeterminados como es &lt;a class=&#34;link&#34; href=&#34;https://ubunlog.com/alfred-script-instalacion-aplicaciones/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Alfred&lt;/a&gt; o cualquier otro que encuentres y que te sea útil. Igualmente la manera de crear el nuestro propio es muy sencilla. Te ejemplifico uno:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash
#Get ROOT access (only need to specify a password one time)
echo &amp;lt;paswword&amp;gt; | sudo -S echo 
echo &amp;#34;Now you can use sudo without given password&amp;#34;
#Install via apt
sudo apt install app1 app2 app3 -y
#Fix failed installations
sudo apt install -f -y
#Install via snap
sudo snap install app1 app2 app3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tras tener nuestro script solo nos queda darle permisos de ejecucción y ejecutarlo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me quiero llevar las bases de datos que tengo configuradas en IntelliJ&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;He este caso he optado por copiar en un archivo txt las conexiones y también el archivo donde IntelliJ almacena las claves que recuerda para la configuración de una conexión. ¿Como lo hice?, muy sencillo:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Para copiar la configuración de una conexión&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 145; 
			flex-basis: 348px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/versiona-tus-dotfiles/images/ndice-1024x706.gif&#34; data-size=&#34;1024x706&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/versiona-tus-dotfiles/images/ndice-1024x706.gif&#34;
			width=&#34;1024&#34;
			height=&#34;706&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Si tienes varios data sources que quieres guardar, simplemente selecciónalos todos a la vez y elige la misma opción que lo que hará será copiar todos a la vez.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Para llevarte las contraseñas&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Vamos a cambiar como IntelliJ almacena las contraseñas para que lo haga en un archivo que incluyamos en nuestro dotfile. Nos vamos a:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;File | Settings | Appearance and behavior | System settings | Passwords
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;y activamos la siguiente opción&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 260; 
			flex-basis: 625px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/versiona-tus-dotfiles/images/Untitled14.png&#34; data-size=&#34;753x289&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/versiona-tus-dotfiles/images/Untitled14.png&#34;
			width=&#34;753&#34;
			height=&#34;289&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;ahora ya podemos añadir a nuestro dotfile el archivo que se muestra en el path.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Busca ejemplos comunes que se apliquen a ti&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cada uno puede tener sus casos personales en los que tiene que guardar unas cosas u otras, pero llegados a este punto hay muchos que son comunes para usuarios de Linux, MacOS o Windows. Las configuraciones de la shell que uses, la configuración de git, amazon wer services, scripts para agilizar los symlinks, etc. Seguro que por GitHub puedes encontrar muchos ejemplos como el de CodelyTV que te expliqué &lt;a class=&#34;link&#34; href=&#34;https://www.notion.so/Utiliza-dotfiles-b76123f2827246859b2ab8833395aaa3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;más arriba&lt;/a&gt;. Te puedo ejemplificar uno propio muy sencillo a medida que he ido comprendiendo como trabajar con estos archivos.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 53; 
			flex-basis: 128px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/versiona-tus-dotfiles/images/Untitled15.png&#34; data-size=&#34;251x469&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/versiona-tus-dotfiles/images/Untitled15.png&#34;
			width=&#34;251&#34;
			height=&#34;469&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h1&gt;
&lt;p&gt;Con mi propia experiencia te puedo decir que lo mejor es que el proyecto debe vaya evolucionando a tus necesidades haciendo que crezca a medida que lo necesitas, de esta manera tendrás el control y no se volverá un caos. No intentes añadir demasiado ya sea visto en otras plantillas o demás si no lo comprendes.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Principios SOLID</title>
        <link>https://raulpadilladelgado.github.io/blog/p/principios-solid/</link>
        <pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/principios-solid/</guid>
        <description>&lt;h1 id=&#34;introducción&#34;&gt;Introducción&lt;/h1&gt;
&lt;p&gt;Los principio SOLID son convenciones en cuanto a diseño de software que ayudan a conseguir un código más mantenible, tolerante a cambios, y testeable.&lt;/p&gt;
&lt;p&gt;Todos los desarrolladores de un equipo deberían tener nociones de diseño de software para fomentar la autonomía y agilidad del equipo&lt;/p&gt;
&lt;h1 id=&#34;huir-de-stupid-el-enemigo-de-solid&#34;&gt;Huir de STUPID, el enemigo de SOLID&lt;/h1&gt;
&lt;p&gt;S → Singleton: Hay un objeto que lo contiene todo. No necesita inyección de dependencias. Y se encuentra por todo el programa. Tiene demasiadas resposabilidades.&lt;/p&gt;
&lt;p&gt;T → Tight Coupling: Fuertemente acoplado. Conoces la implementación concreta del repositorio de usuario (un mysql por ejemplo), algo que dificulta el cambio de tipo de base de datos. El código no es tolerante a cambios.&lt;/p&gt;
&lt;p&gt;U → Untestability: Código intesteable. Muy visto en los singleton. Código muy junto sin ningún tipo de inyección de dependencias que nos lleva a tener un código imposible de testear.&lt;/p&gt;
&lt;p&gt;P → Premature Optimization: Realizar mucho más código del necesario atendiendo al futuro. Se debe pensar con vistas a futuro pero a raíz de las posibles necesidades, no de un simple &amp;ldquo;por si acaso&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I → Indescriptive Naming: Naming confuso que no refleja intencionalidad o significado alguno.&lt;/p&gt;
&lt;p&gt;D → Duplication: Duplicación del mismo código en muchos lados que necesita de una abstracción o extracción a métodos o clases que solo tienen una responsabilidad y pueden ser parte de otra clase.&lt;/p&gt;
&lt;h1 id=&#34;uml&#34;&gt;UML&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Connotaciones negativas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Un modelo de diagramas que tiene una metodologia de trabajo en cascada:&lt;/p&gt;
&lt;p&gt;Especificación de requisitos → Desarrollo → Testing&lt;/p&gt;
&lt;p&gt;Una forma de trabajo muy lineal que no entiende de cambios durante el ciclo de desarrollo (especificación de requisitos), derivada de como se desarrollaba software hace tiempo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ventajas&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lenguaje de diagramas ilustrativo para nuestros diseños de software (clases e interacción entre ellas) Riguroso: Permite especificar hasta un nivel de detalle suficiente para identificar acoplamiento entre clases y sus relaciones sin ser verboso Agnóstico del lenguaje: No entra en detalles de implementación si quiera al nivel de qué lenguaje de programación se está usando&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Qué tipos hay?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Casos de uso&lt;/em&gt;: se busca definir todos los posibles casos de uso (acciones) que pueda hacer un usuario&lt;br&gt;
&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled4.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled4.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Secuencia&lt;/em&gt;: Se trata de un diagrama que con el que podremos ver el flujo de nuestra aplicación, representando cómo interaccionan las clases (comunicación entre objetos)&lt;br&gt;
&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled5.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled5.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Clases&lt;/em&gt;: Este tipo de diagramas son muy populares y nos permiten ver no solo los atributos y métodos de cada clase, sino también las diferentes relaciones de herencia, interfaces e implementaciones de estas. ¿Ventajas?:&lt;br&gt;
→ Diagrama de clases con 4 garabatos para ponernos de acuerdo u obtener feedback de nuestro equipo antes de implementarlo de forma rápida&lt;br&gt;
→ Documentar implementaciones ya existentes para facilitar la revisión de código. Por ejemplo, a la hora de hacer una nueva Pull Request (PR), generar el diagrama desde IntelliJ/PhpStorm con 2 clics para adjuntar una imagen a la descripción de la PR.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;uml-con-intellij&#34;&gt;UML con IntelliJ&lt;/h2&gt;
&lt;p&gt;Con esta herramienta podemos hacer diagramas de clases.&lt;/p&gt;
&lt;p&gt;Seleccionamos las que queremos → Click derecho → Diagrams → Show Diagram&lt;/p&gt;
&lt;p&gt;Nos encontraremos unas opciones tal que así:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled6.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled6.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Campos&lt;/li&gt;
&lt;li&gt;Constructor&lt;/li&gt;
&lt;li&gt;Métodos&lt;/li&gt;
&lt;li&gt;Propiedades&lt;/li&gt;
&lt;li&gt;Inner clases&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;También podemos mediante clic derecho sobre una clase abstracta añadir sus implementaciones al esquema:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled7-1024x502.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled7-1024x502.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Otro truco es añadir las clases usando &lt;em&gt;Espacio&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Un resumen rápido de lo que podemos hacer sobre diagramas en IntelliJ:&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled8.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled8.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;s-single-responsability-principle---srp&#34;&gt;S (Single responsability principle - SRP)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;¿Que es?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Una clase = un concepto = una responsabilidad&lt;/p&gt;
&lt;p&gt;O lo que es lo mismo una sola razón para cambiar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Como?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Clases que funcionen como servicios con pequeños objetivos acotados, entendiéndose un servicio como un orquestador que conecta nuestros modelos con infraestructura (servicios externos).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Por qué?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Buscamos la alta cohesión entre la conexión entre componentes de nuestro sistema, robustez antes los cambios y evitamos la duplicidad de código, ya que conseguiremos piezas más reutilizables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Qué tener en cuenta?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los nombres → Un nombre muy general como &amp;ldquo;OrderProcessor&amp;rdquo; da lugar a querer reutilizarlo para muchas cosas y acaba teniendo demasiadas funcionalidades, en su lugar busca un nombre más concreto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cuando respetamos el principio de responsabilidad única, es más fácil introducir modularidad. Entiéndase modularidad como la propiedad que permite subdividir una aplicación en partes más pequeñas (llamadas módulos), cada una de las cuales debe ser tan independiente como sea posible de la aplicación en sí y de las restantes partes.&lt;/p&gt;
&lt;h2 id=&#34;otros-ejemplos&#34;&gt;Otros ejemplos&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Todo empieza en el controller&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Con una aplicación basada en una API todo empieza con una petición a un endpoint. Es por ello que tenemos que empezar a cuidar los detalles desde ahí. Un controlador no necesita entender de contruir sentencias SQL, ni mucho menos de interactuar directamente con la base de datos. Un servicio es el encargado de realizar esto de ejecutar lógica de negocio usando infraestructura. Por ello, haz que tu controlador solo reciba llamadas y la redirecione a un servicio dedicado a la causa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cuando un servicio y cuando no&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cuando la lógica de negocio no tiene dependencias externas puede ir acoplada al modelo de dominio. Cuando ya existen esas dependencias es mejor tener un servicio externo que se encargue de inyectar por constructor las dependencias que necesite. Esto favorece las testabilidad y la cohesión.&lt;/p&gt;
&lt;h1 id=&#34;o-open-closed-principle-ocp&#34;&gt;O (Open-Closed Principle OCP)&lt;/h1&gt;
&lt;p&gt;El software debería estar abierto a extensión y cerrado a modificación&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled11-1024x501.png&#34; &gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/images/Untitled11-1024x501.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Nos acoplamos a la interfaz, no a la implementación específica, por lo que podremos cambiar en cualquier momento a que objeto &amp;ldquo;medible&amp;rdquo; nos referimos.&lt;/p&gt;
&lt;p&gt;Lo mismo podríamos hacer con una clase abstracta que desde un principio defina como se calcula el porcentaje, y sus implementaciones extiendan de alguna manera dicho cálculo.&lt;/p&gt;
&lt;p&gt;Una clase abstracta es útil cuando las implementaciones van a tener una parte común que siempre se repite, como un sistema de bonificaciones que tienen una general y otras específicas. Si esto no ocurre usaremos interfaces, que permiten desacoplar entre capas, el detalle aparecerá en las implementaciones.&lt;/p&gt;
&lt;h1 id=&#34;l-liskov-substitution-principle---lsp&#34;&gt;L (Liskov Substitution Principle - LSP)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Cualquier clase hija de otra, debería poder reemplazada sin alterar el sistema por otra clase hija de la misma clase&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 122; 
			flex-basis: 293px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/principios-solid/images/Untitled_Diagram13.png&#34; data-size=&#34;491x401&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/principios-solid/images/Untitled_Diagram13.png&#34;
			width=&#34;491&#34;
			height=&#34;401&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejemplo-sencillo&#34;&gt;Ejemplo sencillo&lt;/h2&gt;
&lt;p&gt;En este ejemplo el cuadrado extiende del rectángulo, porque a groso modo son lo mismo, pero a la hora de la verdad tienen comportamientos diferentes, por lo que cuando vamos a utilizar los métodos de la clase rectángulo en la clase cuadrado, tenemos que hacer unos apaños que aunque funcionen y el código actúe correctamente, no estamos respetando el LSP, ya que la clase hija (cuadrado) necesita una serie de modificaciones en cuanto a comportamiento para poder extender y así no será posible reemplazar fácilmente un cuadrado por otra figura geométrica que extienda del rectángulo.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Rectangle {

    private Integer length;      
    private Integer width;

    Rectangle(Integer length, Integer width) {  
        this.length = length;
        this.width = width;
    }

    void setLength(Integer length) {
        this.length = length;
    }

    void setWidth(Integer width) {
        this.width = width;
    }

    Integer getArea() {
        return this.length * this.width;
    }
}

final class Square extends Rectangle {
    Square(Integer lengthAndWidth) {
        super(lengthAndWidth, lengthAndWidth);
    }

    @Override
    public void setLength(Integer length) {
      super.setLength(length);
      super.setWidth(length);
    }
    @Override
    public void setWidth(Integer width) {
      super.setLength(width);
      super.setWidth(width);
    }
}

final class SquareShould {
    @Test
    void not_respect_the_liskov_substitution_principle_breaking_the_rectangle_laws_while_modifying_its_length() {
        Integer squareLengthAndWidth = 2;
        Square square = new Square(squareLengthAndWidth);

        Integer newSquareLength = 4;
        square.setLength(newSquareLength);

        Integer expectedAreaTakingIntoAccountRectangleLaws = 8;

        assertNotEquals(expectedAreaTakingIntoAccountRectangleLaws, square.getArea());
	  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Que las subclases respeten el contrato definido en la clase padre es justamente lo que nos permite cumplir con este principio para mantener una correctitud funcional&lt;/p&gt;
&lt;h1 id=&#34;i-interface-segregation-principle---isp&#34;&gt;I (Interface Segregation Principle - ISP)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Ningún cliente debería verse forzado a depender de métodos que no usa&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Las interfaces se debe de desarrollar acorde a las necesidades del cliente que las usa, y no de sus implementaciones.&lt;/p&gt;
&lt;p&gt;⛔ &lt;strong&gt;Header Interfaces →&lt;/strong&gt; Una interfaz que ha sido extraida o basada de una clase (por lo que ahora la interfaz es padre de la clase), y que se crea con todos los métodos que dicha clase tenía o necesitaba.&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;Role Interface →&lt;/strong&gt; Una interfaz que ha sido creada a partir de la definición previa de un caso de uso del cliente.&lt;/p&gt;
&lt;p&gt;Conseguiremos un código con bajo acoplamiento estructural&lt;/p&gt;
&lt;h1 id=&#34;d-dependency-inversion-principle---dip&#34;&gt;D (Dependency inversion principle - DIP)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Módulos de alto nivel no deberían depender de los de bajo nivel. Ambos deberían depender de abstracciones.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Módulo → Clases&lt;/p&gt;
&lt;p&gt;Ej.: Un caso de uso no debe depender de una implementación, sino que debería hacerlo de una abstracción como sería la interfaz.&lt;/p&gt;
&lt;p&gt;Este principio busca mucho la inyección de dependencias, que sería el acto de recibir parámetros en constructor.&lt;/p&gt;
&lt;p&gt;La finalidad es la substitución de implementaciones y mejorar la testabilidad de las clases.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>JWT Auth en Spring Boot</title>
        <link>https://raulpadilladelgado.github.io/blog/p/jwt-auth-en-spring-boot/</link>
        <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/jwt-auth-en-spring-boot/</guid>
        <description>&lt;h1 id=&#34;1-jwt-authentication&#34;&gt;1. JWT Authentication&lt;/h1&gt;
&lt;h2 id=&#34;11-que-es-jwt&#34;&gt;1.1. ¿Que es JWT?&lt;/h2&gt;
&lt;p&gt;Dicho de forma sencilla, JWT, es una autenticación basada en tokens enviados a las peticiones por cabecera.&lt;/p&gt;
&lt;p&gt;Para más información: &lt;a class=&#34;link&#34; href=&#34;https://jwt.io/introduction/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://jwt.io/introduction/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;12-como-funciona-jwt&#34;&gt;1.2. ¿Como funciona JWT?&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 172; 
			flex-basis: 415px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/jwt-auth-en-spring-boot/images/Untitled2.png&#34; data-size=&#34;697x403&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/jwt-auth-en-spring-boot/images/Untitled2.png&#34;
			width=&#34;697&#34;
			height=&#34;403&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Para obtener el token de acceso, el cliente envía una solicitud de inicio de sesión al servidor de autenticación con el nombre de usuario y la contraseña en el cuerpo de la solicitud. El servidor valida el nombre de usuario y la contraseña, luego devuelve un token de acceso.&lt;/li&gt;
&lt;li&gt;El cliente debe almacenar el token de acceso en algún lugar y debe enviarlo con cada solicitud al servidor en el encabezado de &lt;em&gt;Autorización&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Luego, el servidor valida el token de acceso y, si es válido, atiende la solicitud al cliente.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;13-como-se-implementa-jwt&#34;&gt;1.3. ¿Como se implementa JWT?&lt;/h2&gt;
&lt;h3 id=&#34;applicationuserjava&#34;&gt;ApplicationUser.java&lt;/h3&gt;
&lt;p&gt;En primer definiremos el modelo&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.domain;

import javax.persistence.*;

@Entity
@Table(name = &amp;#34;credentials&amp;#34;)
public class ApplicationUser {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;
	private String username;
	private String password;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;applicationuserrepositoryjava&#34;&gt;ApplicationUserRepository.java&lt;/h3&gt;
&lt;p&gt;Definimos un repositorio para el modelo creado anteriormente&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.infrastructure.repository;

import com.raulpadilla.domain.ApplicationUser;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ApplicationUserRepository extends JpaRepository&amp;lt;ApplicationUser, Integer&amp;gt; {
    ApplicationUser findByUsername(String username);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;applicationuserservicejava&#34;&gt;ApplicationUserService.java&lt;/h3&gt;
&lt;p&gt;Definimos un servicio con opere con el repositorio&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.infrastructure.service;

import com.raulpadilla.domain.ApplicationUser;
import com.raulpadilla.infrastructure.repository.ApplicationUserRepository;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class ApplicationUserService {
    private ApplicationUserRepository applicationUserRepository;
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    public ApplicationUserService(ApplicationUserRepository applicationUserRepository, BCryptPasswordEncoder bCryptPasswordEncoder) {
        this.applicationUserRepository = applicationUserRepository;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }

    public void save(ApplicationUser applicationUser) {
        applicationUser.setPassword(bCryptPasswordEncoder.encode(applicationUser.getPassword()));
        applicationUserRepository.save(applicationUser);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;securityconstantsjava&#34;&gt;SecurityConstants.java&lt;/h3&gt;
&lt;p&gt;Una serie de constantes que usaremos más adelante cuando configuremos Spring Security y el posterior login JWT.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.infrastructure.security;

public class SecurityConstants {
    public static final String SECRET = &amp;#34;SecretKeyToGenJWTs&amp;#34;;
    public static final long EXPIRATION_TIME = 864_000_000; // 10 days
    public static final String TOKEN_PREFIX = &amp;#34;Bearer &amp;#34;;
    public static final String HEADER_STRING = &amp;#34;Authorization&amp;#34;;
    public static final String SIGN_UP_URL = &amp;#34;/users/sign-up&amp;#34;;
    public static final String LOGIN_URL = &amp;#34;/login&amp;#34;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;applicationuserdetailsservicejava&#34;&gt;ApplicationUserDetailsService.java&lt;/h3&gt;
&lt;p&gt;Servicio que implementa que el que usa Spring por defecto con el objetivo de definir como se debe comportar el método que tras verificar que el usuario existe lo pone en el contexto que conoce Spring para saber que el usuario tiene una sesión iniciada.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.infrastructure.service;

import com.raulpadilla.domain.ApplicationUser;
import com.raulpadilla.infrastructure.repository.ApplicationUserRepository;
import org.springframework.scheduling.annotation.Async;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import static java.util.Collections.emptyList;

@Service
public class ApplicationUserDetailsService implements UserDetailsService {
	private ApplicationUserRepository applicationUserRepository;

	public ApplicationUserDetailsService(ApplicationUserRepository applicationUserRepository, BCryptPasswordEncoder bCryptPasswordEncoder) {
		this.applicationUserRepository = applicationUserRepository;
	}

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		ApplicationUser applicationUser = applicationUserRepository.findByUsername(username);
		if (applicationUser == null) {
			throw new UsernameNotFoundException(username);
		}
		return new User(applicationUser.getUsername(), applicationUser.getPassword(), emptyList());
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;jwtauthenticationfilterjava&#34;&gt;JWTAuthenticationFilter.java&lt;/h3&gt;
&lt;p&gt;El filtro que se encarga de autenticar al usuario tras recibir unas credenciales. El filtro será usado en un archivo de configuración de seguridad que definiremos más adelante.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.infrastructure.security;

import com.auth0.jwt.JWT;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.raulpadilla.domain.ApplicationUser;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;

import static com.auth0.jwt.algorithms.Algorithm.HMAC512;
import static com.raulpadilla.infrastructure.security.SecurityConstants.*;

public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter {
    private AuthenticationManager authenticationManager;

    public JWTAuthenticationFilter(AuthenticationManager authenticationManager) {
        this.authenticationManager = authenticationManager;
    }

    @Override
    public Authentication attemptAuthentication(HttpServletRequest req,
                                                HttpServletResponse res) throws AuthenticationException {
        try {
            ApplicationUser creds = new ObjectMapper()
                    .readValue(req.getInputStream(), ApplicationUser.class);

            return authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            creds.getUsername(),
                            creds.getPassword(),
                            new ArrayList&amp;lt;&amp;gt;())
            );
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    protected void successfulAuthentication(HttpServletRequest req,
                                            HttpServletResponse res,
                                            FilterChain chain,
                                            Authentication auth) throws IOException, ServletException {

        String token = JWT.create()
                .withSubject(((User) auth.getPrincipal()).getUsername())
                .withExpiresAt(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .sign(HMAC512(SECRET.getBytes()));
        res.addHeader(HEADER_STRING, TOKEN_PREFIX + token);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;jwtauthorizationfilterjava&#34;&gt;JWTAuthorizationFilter.java&lt;/h3&gt;
&lt;p&gt;Cuando el usuario se ha autenticado correctamente es hora de ver si tiene autorización para acceder a determinados recursos, aquí entra en juego este filtro. También se usará en el archivo de configuración definido anteriormente.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.infrastructure.security;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;

import static com.raulpadilla.infrastructure.security.SecurityConstants.HEADER_STRING;
import static com.raulpadilla.infrastructure.security.SecurityConstants.SECRET;
import static com.raulpadilla.infrastructure.security.SecurityConstants.TOKEN_PREFIX;

public class JWTAuthorizationFilter extends BasicAuthenticationFilter {

    public JWTAuthorizationFilter(AuthenticationManager authManager) {
        super(authManager);
    }

    @Override
    protected void doFilterInternal(HttpServletRequest req,
                                    HttpServletResponse res,
                                    FilterChain chain) throws IOException, ServletException {
        String header = req.getHeader(HEADER_STRING);

        if (header == null || !header.startsWith(TOKEN_PREFIX)) {
            chain.doFilter(req, res);
            return;
        }

        UsernamePasswordAuthenticationToken authentication = getAuthentication(req);

        SecurityContextHolder.getContext().setAuthentication(authentication);
        chain.doFilter(req, res);
    }

    private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {
        String token = request.getHeader(HEADER_STRING);
        if (token != null) {
            // parse the token.
            String user = JWT.require(Algorithm.HMAC512(SECRET.getBytes()))
                    .build()
                    .verify(token.replace(TOKEN_PREFIX, &amp;#34;&amp;#34;))
                    .getSubject();

            if (user != null) {
                return new UsernamePasswordAuthenticationToken(user, null, new ArrayList&amp;lt;&amp;gt;());
            }
            return null;
        }
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;websecurityjava&#34;&gt;WebSecurity.java&lt;/h3&gt;
&lt;p&gt;Finalmente configuramos la seguridad que afecten a nuestras APIs agregándole los filtro creados anteriormente.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.infrastructure.security;

import com.raulpadilla.infrastructure.service.ApplicationUserDetailsService;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.context.annotation.Bean;

import java.util.Arrays;

import static com.raulpadilla.infrastructure.security.SecurityConstants.LOGIN_URL;
import static com.raulpadilla.infrastructure.security.SecurityConstants.SIGN_UP_URL;

@EnableWebSecurity
public class WebSecurity extends WebSecurityConfigurerAdapter {
    private ApplicationUserDetailsService userDetailsService;
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    public WebSecurity(ApplicationUserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder) {
        this.userDetailsService = userDetailsService;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.cors().and().csrf().disable().authorizeRequests()
                .antMatchers(HttpMethod.POST, SIGN_UP_URL).permitAll()
                .antMatchers(HttpMethod.POST, LOGIN_URL).permitAll()
                .anyRequest().authenticated()
                .and()
                .addFilter(new JWTAuthenticationFilter(authenticationManager()))
                .addFilter(new JWTAuthorizationFilter(authenticationManager()))
                // this disables session creation on Spring Security
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
    }

    @Override
    public void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);
    }

    @Bean
    CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList(&amp;#34;*&amp;#34;));
        configuration.setAllowedMethods(Arrays.asList(&amp;#34;*&amp;#34;));
        configuration.setAllowedHeaders(Arrays.asList(&amp;#34;*&amp;#34;));
        configuration.setAllowCredentials(true);
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration(&amp;#34;/**&amp;#34;, configuration);
        return source;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;applicationusercontrollerjava&#34;&gt;ApplicationUserController.java&lt;/h3&gt;
&lt;p&gt;Para probar que todo funciona correctamente creamos el controlador que interactúe con el servicio de usuarios&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package com.raulpadilla.application;

import com.raulpadilla.domain.ApplicationUser;
import com.raulpadilla.infrastructure.service.ApplicationUserService;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;

@RestController
@RequestMapping(&amp;#34;/users&amp;#34;)
public class ApplicationUserController {
    private final ApplicationUserService applicationUserService;

    public ApplicationUserController(ApplicationUserService applicationUserService) {
        this.applicationUserService = applicationUserService;
    }

    @PostMapping(&amp;#34;/sign-up&amp;#34;)
    public void signUp(@RequestBody ApplicationUser applicationUser) throws IOException, InterruptedException {
        applicationUserService.save(applicationUser);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Se definió el método para crear un usuario, para hacer login usaremos &lt;code&gt;/login&lt;/code&gt; que está controlado por Spring Security y por eso no tenemos que configurarlo nosotros. Dicha request devolverá el token JWT que necesitamos enviar a otras peticiones que hagamos para que podamos ser autenticados y autorizados correctamente.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 287; 
			flex-basis: 689px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/jwt-auth-en-spring-boot/images/Untitled3.png&#34; data-size=&#34;956x333&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/jwt-auth-en-spring-boot/images/Untitled3.png&#34;
			width=&#34;956&#34;
			height=&#34;333&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Scrum vs Kanban</title>
        <link>https://raulpadilladelgado.github.io/blog/p/scrum-vs-kanban/</link>
        <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/scrum-vs-kanban/</guid>
        <description>&lt;h1 id=&#34;diferencias&#34;&gt;Diferencias&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Scrum&lt;/strong&gt;: Iteraciones de tiempo fijo (Sprints). La pila del producto (conjunto de tareas) tiene que tener al menos el tamaño de un Sprint. Limita el WIP (WorkInProgress) por iteración. No se permiten cambiar las tareas del Sprint, solo el Sprint. Roles de Scrum Master, de Product Owner y del equipo&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kanban&lt;/strong&gt;:Trabajo continuo. Se arrastran las nuevas tareas por el panel hasta que lleguen a su estado final. Limita el WIP por el flujo de trabajo. Se puede modificar la tarea hasta que entra en flujo No existen roles.&lt;/p&gt;
&lt;h1 id=&#34;uso-kanban-y-lo-uso-así&#34;&gt;Uso Kanban y lo uso así&lt;/h1&gt;
&lt;p&gt;Los consejos básicos que he aprendido usando este tipo de workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Entiende como trabajas y visualizalo&lt;/li&gt;
&lt;li&gt;Para aumentar el flujo (más cosas en done en menos tiempo) debemos limitar el work in progress. Las cosas se deben terminar por lo que no es necesario que todos trabajemos en algo, si no que todos deberimos trabajar en terminar algo.&lt;/li&gt;
&lt;li&gt;Menos tarjetas, menos detalle, más enfoque de lo que queremos conseguir, más visualización&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Se pueden definir clases de servicio para cubrir las necesidades que pueda tener un equipo. Yo he visto algunas para un enfoque concreto debido a la carga de trabajo que acontecía en aquel momento:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;expedite fixed delivery date standard intangible&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Las épicas son como un contenedor que contienen historias que por si solas no representan nada a la empresa, hasta que no se termina todo lo asociado a la épica no tiene un valor real para el negocio. Una historia que por si sola aporta valor no necesita estar en una épica.&lt;/p&gt;
&lt;p&gt;Existen dos formas de interpretar como se empieza a trabajar según el tablero:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trabajar en pull&lt;/strong&gt; → de derecha a izquierda, de lo más terminado a lo que menos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trabajar en push&lt;/strong&gt; → al revés, cada persona tiene asociado algo y no intenta terminar cualquier otra cosa que esté más al final.&lt;/p&gt;
&lt;p&gt;Como nuestro objetivo es poder aportar valor a la empresa cuanto antes, la mejor opción es sin duda trabajar en pull.&lt;/p&gt;
&lt;h1 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h1&gt;
&lt;p&gt;El punto clave para decidir cuando recurrir a uno o a otro pasa por entender que para Scrum el propósito es maximizar el valor entregado, mientras que para Kanban lo importantes es optimizar el flujo de trabajo y aportar valor rápidamente.&lt;/p&gt;
&lt;p&gt;Si por alguna razón no se pueda tener una comunicación efectiva en un equipo, lo mejor sería usar &lt;em&gt;Scrum&lt;/em&gt; ya que garantiza el compromiso del equipo y de las personas con las entregas, Si el equipo es capaz de sincronizarse muy bien, no hay ningún problema para usar &lt;em&gt;Kanban&lt;/em&gt; y tener un desarrollo fluido.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Taller refactor Java &#43; IntelliJ</title>
        <link>https://raulpadilladelgado.github.io/blog/p/taller-refactor-java--intellij/</link>
        <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/taller-refactor-java--intellij/</guid>
        <description>&lt;p&gt;Recientemente estuve realizando una formación que impartía &lt;a class=&#34;link&#34; href=&#34;https://www.carlosble.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Carlos Ble&lt;/a&gt;. Dicha formación consistía en aprender trucos y consejos para aplicar a la hora de hacer refactor. Lejos de ser solo una charla, los alumnos estuvimos gran parte del tiempo practicando lo que íbamos aprendiendo con cada ejercicio, y ahora yo quiero hablar un poco acerca de ello.&lt;/p&gt;
&lt;p&gt;Tras concluir esta formación mi perspectiva acerca del refactor cambió mucho. Generalmente, tendemos a buscar los refactors más complicados, esos que simplifican 20 líneas de código en la mitad o casos por el estilo. Hay entender que el refactor no consiste en hacer el código lo más pequeño posible, porque menos código no es directamente proporcional con código más simple. Estuve viendo muchos ejemplos de que con cambios muy simple como puede ser un cambio de nombre llegas a lograr una mejor semántica en tu código. Los refactor en código legacy deben empezarse por algo sencillo, es decir, desde fuera hacia dentro de un método o una clase.&lt;/p&gt;
&lt;p&gt;No quiere decir que existen casos para hacer trabajos de refactor más complejos, pero siempre y cuando nos aporten. Al final de este post comparto y repositorio de mi cuenta de GitHub para que podáis que ejemplo estuvimos realizando.&lt;/p&gt;
&lt;p&gt;Resumir una formación de este estilo no es posible ya que hay que estar practicando cada concepto y dedicandole un tiempo para reflexionar acerca de ello para poder interiorizarlo, pero si tuviese que destacar los puntos claves que me llevo de esta formación serían los siguientes:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDE&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Con herramientas tan avanzadas como IntelliJ los refactors deben ser lo más automáticos posibles. Los refactors del IDE son completamente seguros y terminan ahorrándote tiempo que si lo hicieses de una forma más manual. Más allá de las ventajas de la herramienta, el porqué deberían ser lo más automático posible responde a la garantía de que en ningún momento el código se rompe, que es lo que precisamente un refactor nunca debería hacer.&lt;/li&gt;
&lt;li&gt;Inline method o Inline variable → Sustituye su valor o funcionamiento en los lugares donde se esté llamando. Muy útil para reemplazar todas las llamadas de un método viejo por uno nuevo.&lt;/li&gt;
&lt;li&gt;Introduce parameter object → Útil para cambiar un primitivo de un método por un objeto que contiene como propiedad dicho primitivo.&lt;/li&gt;
&lt;li&gt;Wrap return value → Para cambiar el retorno de una función&lt;/li&gt;
&lt;li&gt;Introduce funtional parameter → Para declarar un parámetro funcional en la función y ejecutar una cosa o otra dependiendo de dicho parámetro.&lt;/li&gt;
&lt;li&gt;Encapsulate fields → para cambiar la visibilidad de un campo de la clase, para que uno público se vuelva privado. Se ocupará de generar los getter y setter que le indiquemos.&lt;/li&gt;
&lt;li&gt;Pull members up → lleva los métodos a la clase padre&lt;/li&gt;
&lt;li&gt;Use interface where is possible → Usará la clase padre donde sea posible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Legacy Code&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un legacy code puede llegar a ser muy complejo de entender y sobre todo de refactorizar. Lo más importante para éstas situaciones es disponer de una buena pila de test que prueben la funcionalidad, y tras esto si podemos refactorizar con la garantía de que si por error rompemos algo lo sabremos de inmediato con la ejecucción de los test y dejaremos el código a un estado completamente funcional con un control de versiones.&lt;/li&gt;
&lt;li&gt;Cuando trabajamos con código legacy es muy importante tener cuidado con los cambios que hacemos cuando son a estados de un objeto, asignaciones y condicionales. Son la principal casa de romper un código legacy.&lt;/li&gt;
&lt;li&gt;Con código legacy es muy útil comprobar la geometría del código. Puedes poner la letra muy pequeña y ver así la vista general del código, o puedes usar extensiones como esta: &lt;a class=&#34;link&#34; href=&#34;https://plugins.jetbrains.com/plugin/7275-codeglance&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CodeGlance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Otros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Todo puede ser testeado con un poco de creatividad. ¿Como testear que un método escribe lo correcto en la consola?, podríamos intentar capturar la salida de la consola, pero hay algo mucho más simple para el test como es extender la clase con dicho método y trucar el comportamiento que escribe en consola por almacenarlo en una variable y comprobar así esa variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para terminar, me gustaría compartir el repositorio donde estuve trabajando los ejercicios de esta formación. No es posible ver como se hicieron los refactors automáticos, pero sí el resultado final.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/raulpadilladelgado/Refactor-Java-IntelliJ-1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;raulpadilladelgado/Refactor-Java-IntelliJ-1&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Debloat Android</title>
        <link>https://raulpadilladelgado.github.io/blog/p/debloat-android/</link>
        <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/debloat-android/</guid>
        <description>&lt;p&gt;Hoy en día es fácil adquirir a un precio asequible un dispositivo con suficiente memoria de almacenamiento como para que no lo llenemos con un uso normal. Pero aún así, es perfectamente comprensible que llegues al punto de necesitar sacar unos megabytes de almacenamiento por algún lado.&lt;/p&gt;
&lt;p&gt;Hoy ofrezco una solución que no solo te ayudará a lograr más almacenamiento para tu Android, lograrás un mejor rendimiento, y lo mejor de todo es que lo amarás porque tendrás el control sobre lo que está instalado en tu dispositivo, solo tú eliges que está y que no.&lt;/p&gt;
&lt;p&gt;Si esto te interesa, te animo a que sigas las instrucciones detalladas en mi proyecto de Github.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/raulpadilladelgado/DebloatAndroid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;raulpadilladelgado/DebloatAndroid&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git autostash</title>
        <link>https://raulpadilladelgado.github.io/blog/p/git-autostash/</link>
        <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/git-autostash/</guid>
        <description>&lt;h1 id=&#34;problema&#34;&gt;Problema&lt;/h1&gt;
&lt;p&gt;Intentas hacer un &lt;em&gt;pull&lt;/em&gt; pero tus cambios locales entran en conflicto con los del repo remoto. La solución que usaría sería hacer un &lt;em&gt;stash&lt;/em&gt; de mis cambios locales, que sería algo así como dejarlos de lado por el momento, y después hacer el &lt;em&gt;pull&lt;/em&gt;. Finalmente incluiríamos los cambios que habíamos dejado de lado.&lt;/p&gt;
&lt;p&gt;Existe una forma de automatizar esto, y lo podríamos hacer mediante la configuración de Git, para que cuando hagamos un &lt;em&gt;pull&lt;/em&gt;, nos deje de lado nuestros cambios locales y después sea decisión nuestra incluirlos o no después del &lt;em&gt;pull&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id=&#34;proceso&#34;&gt;Proceso&lt;/h1&gt;
&lt;p&gt;Lo primero es configurar esto en git (también aparece la configuración para lograr lo mismo cuando hagamos &lt;em&gt;rebase&lt;/em&gt;)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global pull.rebase true
git config --global rebase.autoStash true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Después vendría el &lt;code&gt;git pull&lt;/code&gt;, que nos dirá que nos ha hecho un &lt;em&gt;autostash&lt;/em&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git pull
----------
Created autostash: 094ad5c
HEAD is now at d39c25c repo1 - readme
First, rewinding head to replay your work on top of it...
Fast-forwarded master to 6b6e1d4262fd5bc8d2b974f81222003a6c67fea6.
Applying autostash resulted in conflicts.
Your changes are safe in the stash.
You can run &amp;#34;git stash pop&amp;#34; or &amp;#34;git stash drop&amp;#34; at any time.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Para incluir los cambios del &lt;em&gt;stash&lt;/em&gt; podemos realizar un &lt;code&gt;git stash pop&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;extra&#34;&gt;Extra&lt;/h1&gt;
&lt;p&gt;Podemos listar todos los stash disponibles&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git stash list
---------------
stash@{0}: autostash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Y realizar un &lt;code&gt;git stash pop&lt;/code&gt; de uno concreto&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git stash pop [--index]
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Revertir commits en Git</title>
        <link>https://raulpadilladelgado.github.io/blog/p/revertir-commits-en-git/</link>
        <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/revertir-commits-en-git/</guid>
        <description>&lt;h1 id=&#34;revertir-último-commit&#34;&gt;Revertir último commit&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Importante:&lt;/strong&gt; Un &lt;code&gt;--soft&lt;/code&gt; borrará el último commit pero mantendrá los cambios que has hecho. Un &lt;code&gt;--hard&lt;/code&gt; borrará el último commit y desechará los cambios que has hecho&lt;/p&gt;
&lt;h2 id=&#34;revertir-último-commit-local&#34;&gt;Revertir último commit (local)&lt;/h2&gt;
&lt;p&gt;Con este comando desaparecerá de tu rama el último &lt;em&gt;commit&lt;/em&gt; que has hecho.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git reset --hard HEAD~1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;revertir-último-commit-remoto&#34;&gt;Revertir último commit (remoto)&lt;/h2&gt;
&lt;p&gt;Si has llegado a subirlo al repositorio remoto, es tan sencillo como realizar el proceso en local y después actualizar el &lt;em&gt;repo&lt;/em&gt; remoto (&lt;code&gt;push&lt;/code&gt;).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git reset --hard HEAD~1
git push origin -f
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;revertir-commit-específico&#34;&gt;Revertir commit específico&lt;/h1&gt;
&lt;p&gt;En primer lugar tendremos que ubicarnos en el commit al que queremos volver. Para buscarlo podemos usar git log que nos listará la historia de la rama actual (donde apunte el head ahora mismo) y una vez localizado el identificador del commit haremos que master apunte a ese commit:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git checkout &amp;lt;commit-id&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;💡 Es importante el . al final, ya que indicará que queremos apuntar al commit indicado pero dentro la rama actual. Si no fuese tu intención no será necesario usarlo.&lt;/p&gt;
&lt;p&gt;Finalmente, tendremos que hacer push de lo cambios para que sean efectivos en el repositorio remoto:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git add .
git commit -m &amp;#34;Reverting to &amp;lt;commit-id&amp;gt;&amp;#34;
git push
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Base de datos local con docker</title>
        <link>https://raulpadilladelgado.github.io/blog/p/base-de-datos-local-con-docker/</link>
        <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/base-de-datos-local-con-docker/</guid>
        <description>&lt;p&gt;&lt;em&gt;El siguiente ejemplo se ha desarrollado con Spring Boot.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hacemos ciertos ajustes en &lt;a class=&#34;link&#34; href=&#34;http://applicacion.properties&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;applicacion.properties&lt;/code&gt;&lt;/a&gt; para configurar la conexión a la DB.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Creamos y arrancamos el contenedor en Docker que use la imagen de PostgreSQL.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --name my_postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Listo, ya podemos trabajar con nuestra base de datos en local 🥳&lt;/p&gt;
&lt;p&gt;Para cualquier duda el proyecto se puede consultar aquí: &lt;a class=&#34;link&#34; href=&#34;https://github.com/raulpadilladelgado/Local-Database-Docker&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/raulpadilladelgado/Local-Database-Docker&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PHPUnit basics</title>
        <link>https://raulpadilladelgado.github.io/blog/p/phpunit-basics/</link>
        <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/phpunit-basics/</guid>
        <description>&lt;h2 id=&#34;introducción-e-instalación&#34;&gt;Introducción e instalación&lt;/h2&gt;
&lt;p&gt;Este post surge por mi deseo de iniciar en el desarrollo de tests de código PHP mediante PHPUnit, un acercamiento que sirva para asimilar conceptos básicos. ¡Empezamos!.&lt;/p&gt;
&lt;p&gt;Lo primero que necesitamos es instalar PHPUnit en el proyecto, y ésto lo realizaremos gracias a composer.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;composer require --dev phpunit/phpunit ^latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Trás esto, en nuestra primera clase de test, debemos extender de TestCase, contenido en:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vendor → phpunit → framework
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ahora es momento de hacer la primera aserción&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;use PHPUnit\\Framework\\TestCase;
class Test extends TestCase
{ 
	public function test_render() { $welcome = &amp;#34;hola&amp;#34;; $this-&amp;gt;assertEquals($welcome,&amp;#34;hola&amp;#34;); }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Como podemos ver, se ha extendido de la clase TestCase, y se ha realizado una aserción para comprobar simplemente que hemos realizado bien el proceso de instalar phpunit y de empezar a usarlo bien. Para probar si el test ejecuta correctamente, lo podemos hacer mediante la ayuda del IDE a elección, o mediante el siguiente comando en el que se le indica ruta de phpunit, ruta de archivo de test y formato de salida(opcional):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vendor/bin/phpunit SlugTest.php --color
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;phpunit-con-laravel&#34;&gt;PHPUnit con Laravel&lt;/h2&gt;
&lt;p&gt;Si vamos a trabajar con Laravel, la integración de PHPUnit ya viene instalada por defecto. El archivo phpunit.xml de la carpeta vendor, es un archivo de configuración en el que ya vienen predefinidas las propiedades como la salida a color que especificabamos antes (&amp;ndash;color), o incluso dos directorios definidos para test (dentro de &lt;testsuites&gt;) como son Unit y Feature.&lt;/p&gt;
&lt;h2 id=&#34;aserciones&#34;&gt;Aserciones&lt;/h2&gt;
&lt;p&gt;La idea no es otra que recopilar ciertas aserciones con el fin de ver la forma en que trabaja el framework para realizar pruebas. En todas las pruebas, se ejecutaran métodos de aserciones haciendo referencia a &amp;ldquo;$this&amp;rdquo;, que se refiere a la clase actual que extiende de TestCase, por lo que tiene los métodos heredados de PHPUnit. Por otro lado, cabe destacar que en cada método de prueba, se debe usar la nomenclatura &amp;ldquo;test*&amp;rdquo; para que se interprete como un test.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;?php

use PHPUnit\\Framework\\TestCase;

class SimpleTest extends TestCase
{
    /*TRUE OR FALSE*/
    public function test_true()
    {
        $this-&amp;gt;assertTrue(true);
    }

    public function test_false()
    {
        $this-&amp;gt;assertFalse(false);
    }

    /*EQUALS OR SAME*/
    public function test_equals()
    {
        $this-&amp;gt;assertEquals(10, &amp;#34;10&amp;#34;);
    }

    public function test_not_equals()
    {
        $this-&amp;gt;assertNotEquals(10, 20);
    }

    public function test_same()
    {
        $this-&amp;gt;assertSame(10, 10);
    }

    public function test_not_same()
    {
        $this-&amp;gt;assertNotSame(10, &amp;#34;10&amp;#34;);
    }

    /*TYPES*/
    public function test_types()
    {
        $this-&amp;gt;assertIsArray([1, 2, 3]);
    }

    public function test_empty()
    {
        $this-&amp;gt;assertEmpty(&amp;#34;&amp;#34;);
        $this-&amp;gt;assertEmpty([]);
    }

    /*ARRAYS*/
    public function test_count()
    {
        $this-&amp;gt;assertCount(2, [1, 2]);
    }

    public function test_hash_key()
    {
        $this-&amp;gt;assertArrayHasKey(&amp;#34;color&amp;#34;, [&amp;#34;color&amp;#34; =&amp;gt; &amp;#34;azul&amp;#34;]);
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Kata El juego de la vida</title>
        <link>https://raulpadilladelgado.github.io/blog/p/kata-el-juego-de-la-vida/</link>
        <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/kata-el-juego-de-la-vida/</guid>
        <description>&lt;p&gt;Mi implementación para este ejercicio de programación se basa en tener una clase &amp;ldquo;Cell&amp;rdquo;, que tendrá un atributo llamado &amp;ldquo;isAlive&amp;rdquo;(haciendo referencia a si la célula vive o no), y además otra clase llamada &amp;ldquo;World&amp;rdquo; que tiene un diccionario tipo clave(Integer) valor(Cell).&lt;/p&gt;
&lt;p&gt;En la clase &amp;ldquo;World&amp;rdquo; existe un método que cambia &amp;ldquo;de generación&amp;rdquo;, que comprueba que las células muertas que tengan exactamente tres células vecinas vivas(tres posiciones seguidas del diccionario con valor &amp;ldquo;isAlive&amp;rdquo; a true) revivan. Además, comprueba también que una célula viva que tenga dos o tres vecinos, siga con vida, en cambio, la célula que tenga menos de dos o más de tres vecinos, debe morir por &amp;ldquo;sobrepoblación o soledad&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Para entrar más en detalle, comparto repositorio de GitHub con la solución que he descrito.&lt;/p&gt;
&lt;h2 id=&#34;thegameoflifehttpswwwbloggercomu1blogpostedit31609438412429313342666154078615126998&#34;&gt;→ &lt;a class=&#34;link&#34; href=&#34;https://www.blogger.com/u/1/blog/post/edit/3160943841242931334/2666154078615126998#&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TheGameOfLife&lt;/a&gt; ←&lt;/h2&gt;
</description>
        </item>
        <item>
        <title>Clases, Interfaces y Genéricos</title>
        <link>https://raulpadilladelgado.github.io/blog/p/clases-interfaces-y-gen%C3%A9ricos/</link>
        <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/clases-interfaces-y-gen%C3%A9ricos/</guid>
        <description>&lt;h1 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h1&gt;
&lt;p&gt;Es una colección de métodos abstractos y propiedades constantes. En las interfaces se especifica qué se debe hacer pero no su implementación. Serán las clases que implementen estas interfaces las que describen la lógica del comportamiento de los métodos. Las clases que hereden de la interfaz solo podrán hacerlo de ella.&lt;/p&gt;
&lt;p&gt;Un momento muy útil en el que declarar una interfaz, puede ser cuando vemos que dos clases tienen el mismo contrato, por ejemplo, tenemos una clase coche y una clase moto, que implementan los mismos métodos de formas distintas.&lt;/p&gt;
&lt;p&gt;Su utilidad se encuentra cuando buscamos muchas implementaciones, por lo que si la idea es solo generar una implementación, deberíamos basarnos en una sola clase. El hecho de estar obligando a pasar primero por la interfaz a la hora de entender el código, se hace tedioso cuando el objetivo es sólo entender el comportamiento de una clase.&lt;/p&gt;
&lt;p&gt;Otro aspecto a cuidar, es el nombre que reciba la interfaz. Incluir en los nombres de interfaces el prefijo &amp;ldquo;I&amp;rdquo; o en el de las implementaciones el sufijo &amp;ldquo;Impl&amp;rdquo;, solo muestra un mal nombre que no describe como funciona el sistema. Se debe buscar nombres que cuenten una historia, por lo que si una interfaz se llama &amp;ldquo;Encryptor&amp;rdquo;, su implementación debería usar ese nombre de base, pero añadiendo que implementa, como puede ser &amp;ldquo;SimpleEncryptor&amp;rdquo;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;interface Encryptor{
        String Encrypt(String text);
    }
    public class SimpleEncryptor implements Encryptor{
        @Override
        public String Encrypt(String text) {
            return text.toUpperCase();
        }
    }
    public class ComplexEncryptor implements Encryptor{
        @Override
        public String Encrypt(String text) {
            return text.toUpperCase().concat(&amp;#34;_SECRET&amp;#34;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;clases-abstractas&#34;&gt;Clases abstractas&lt;/h1&gt;
&lt;p&gt;Otra opción que tenemos, sería usar una clase abstracta. A diferencia de la interfaz, ésta si define una base sobre la que trabajar las implementaciones, por lo que la idea de usarla es mejorar dicha clase padre, ya sea añadiendo comportamiento o especificando uno nuevo.&lt;/p&gt;
&lt;p&gt;Tanto como con las interfaces, como con las clases abstractas los métodos suelen definirse como &amp;ldquo;protected&amp;rdquo; para que solo las implementaciones puedan usarlo.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public abstract class Encryptor{
        String Encrypt(String text){
            return text.toUpperCase();
        }
    }
    public class EncryptorWithOriginalFunctionality extends Encryptor {
        @Override
        public String Encrypt(String text){
           String original = super.Encrypt(text);
            return original.concat(&amp;#34;_SECRET&amp;#34;);
        }
    }
    public class EncryptorWithoutOriginalFunctionality extends Encryptor {
        @Override
        public String Encrypt(String text){
            return text.concat(&amp;#34;_SECRET&amp;#34;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;genéricos&#34;&gt;Genéricos&lt;/h1&gt;
&lt;p&gt;Cuando queremos aprovechar un método para que opere con distintos tipos de datos, como puede ser una cadena de texto o un entero, surge la idea de utilizar algo más general como puede la clase Object, ya que dicha ambos tipos de datos son de dicha clase. El problema es que si tenemos una colección que contiene diferentes tipos de datos, no obligamos a usar casteo, algo que a la hora de error no nos detalla mucho sobre el porque ocurre el fallo más allá de no poder realizar un casteo.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Cache {
        List&amp;lt;Object&amp;gt; objects = new ArrayList&amp;lt;&amp;gt;();

        void addObjects() {
            objects.add(&amp;#34;a&amp;#34;);
            objects.add(1);
        }

        String getObject() {
            return (String) objects.get(0);
        }
    }

    @Test
    void simple_test() {
        Cache cache = new Cache();
        cache.addObjects();
        assertThat(cache.getObject()).isEqualTo(&amp;#34;a&amp;#34;);
    }
/*************************************************************************/
public class Cache {
        List&amp;lt;Object&amp;gt; objects = new ArrayList&amp;lt;&amp;gt;();

        void addObjects() {
            objects.add(&amp;#34;a&amp;#34;);
            objects.add(1);
        }

        String getObject() {
            return (String) objects.get(1);
        }
    }

    @Test
    void simple_test() {
        Cache cache = new Cache();
        cache.addObjects();
        assertThat(cache.getObject()).isEqualTo(&amp;#34;a&amp;#34;);
//no puede realizar el casteo
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Otra solución sería decirle a la clase que acepte cualquier tipo de dato, por lo que el programa si ejecutaría en dicho caso, y comprobaríamos el fallo en tiempo de compilación.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Cache&amp;lt;T&amp;gt; {
        List&amp;lt;T&amp;gt; objects = new ArrayList&amp;lt;&amp;gt;();

        void addObjects(T object) {
            objects.add(object);
        }

        T getObject(int i) {
            return objects.get(i);
        }
    }

    @Test
    void simple_test() {
        Cache cache = new Cache();
        cache.addObjects(&amp;#34;a&amp;#34;);
        assertThat(cache.getObject(0)).isEqualTo(&amp;#34;a&amp;#34;);
    }
/********************************************************************/
public class Cache&amp;lt;T&amp;gt; {
        List&amp;lt;T&amp;gt; objects = new ArrayList&amp;lt;&amp;gt;();

        void addObjects(T object) {
            objects.add(object);
        }

        T getObject(int i) {
            return objects.get(i);
        }
//no declaramos ningún casteo
    }

    @Test
    void simple_test() {
        Cache cache = new Cache();
        cache.addObjects(1);
        assertThat(cache.getObject(0)).isEqualTo(&amp;#34;a&amp;#34;);
//como acepta el tipo, el error ocurre por no ser lo mismo que esperamos
    }
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Principios fundamentales de los tipos de datos en Java</title>
        <link>https://raulpadilladelgado.github.io/blog/p/principios-fundamentales-de-los-tipos-de-datos-en-java/</link>
        <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/principios-fundamentales-de-los-tipos-de-datos-en-java/</guid>
        <description>&lt;h1 id=&#34;primitivos-y-wrappers-de-primitivos-en-java&#34;&gt;Primitivos y wrappers de primitivos en Java&lt;/h1&gt;
&lt;h2 id=&#34;asignar-una-variable-primitiva-usando-otra-variable-primitiva&#34;&gt;Asignar una variable primitiva usando otra variable primitiva&lt;/h2&gt;
&lt;p&gt;Con los primitivos, cuando asignamos el valor de una variable a el valor de otra variable, simplemente se genera una copia, por lo que la variable original no mutará su estado por más que la variable nueva decida cambiar.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        int x = 0;
        int y = x;
        y=5;
        System.out.println(x);//x sigue valiendo 0
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;funciones-que-operan-primitivos&#34;&gt;Funciones que operan primitivos&lt;/h2&gt;
&lt;p&gt;Algo similar ocurre cuando se pasa por parámetro a una función un tipo primitivo, pasa a ser una copia, por lo que es una variable nueva dentro de dicho scope.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        int x = 0;
        Numbers numbers = new Numbers();
        numbers.integers(x);
        System.out.println(x);//x sigue valiendo 0
    }
    
}
class Numbers{
    public static void integers(int number){
	    number = 5;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;asignar-una-variable-tipo-wrapper-primitivo-usando-otra-variable-del-mismo-tipo&#34;&gt;Asignar una variable tipo wrapper primitivo usando otra variable del mismo tipo&lt;/h2&gt;
&lt;p&gt;Con los no primitivos, cuando asignamos el valor de una variable a el valor de otra variable, simplemente se genera una copia, por lo que la variable original no mutará su estado por más que la variable nueva decida cambiar.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        Integer x = 0;
        Integer y = x;
        y = 10;
        System.out.println(x);//x sigue valiendo 0
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;comparando-objetos-wrappers-que-envuelven-primitivos&#34;&gt;Comparando objetos wrappers (que envuelven primitivos)&lt;/h2&gt;
&lt;p&gt;Comparar los primitivos mediante un simple &amp;ldquo;==&amp;rdquo; es seguro, se va a comportar siempre como esperamos.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        int x = 0;
        int y = x;
        System.out.println(x == y);
        //el resultado es true
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;El problema surge cuando en lugar de usar los primitivos, usamos la clase correspondiente que lo envuelve y que ofrece métodos para operar con él. En el siguiente &lt;a class=&#34;link&#34; href=&#34;https://www.blogger.com/u/1/blog/post/edit/3160943841242931334/7326708113573585312#&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ejemplo&lt;/a&gt;, vemos como diferentes creaciones de un String dan diferentes resultados a la hora de comparar.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        String s1 = new String(&amp;#34;campusMVP&amp;#34;);
        String s2 = new String(&amp;#34;campusMVP&amp;#34;);
        System.out.println(s1 == s2);   //Devuelve false
    /*----------------------------------------------------*/
        String s3 = &amp;#34;campusMVP&amp;#34;;
        String s4 = new String(&amp;#34;campusMVP&amp;#34;);
        System.out.println(s3 == s4);   //Devuelve false
    /*----------------------------------------------------*/
        String s5 = &amp;#34;campusMVP&amp;#34;;
        String s6 = &amp;#34;campusMVP&amp;#34;;
        System.out.println(s5 == s6);   //Devuelve true
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;La comparación mediante &amp;ldquo;==&amp;rdquo; no siempre funciona como esperamos, por lo que lo mejor sería usar en su lugar &amp;ldquo;equals()&amp;rdquo;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String[] args) {
        String s1 = new String(&amp;#34;campusMVP&amp;#34;);
        String s2 = new String(&amp;#34;campusMVP&amp;#34;);
        System.out.println(s1.equals(s2));   //Devuelve true
    /*----------------------------------------------------*/
        String s3 = &amp;#34;campusMVP&amp;#34;;
        String s4 = new String(&amp;#34;campusMVP&amp;#34;);
        System.out.println(s3.equals(s4));   //Devuelve true
    /*----------------------------------------------------*/
        String s5 = &amp;#34;campusMVP&amp;#34;;
        String s6 = &amp;#34;campusMVP&amp;#34;;
        System.out.println(s5.equals(s6));   //Devuelve true
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;No solo cuenta que es más seguro realizarlo de ésta forma, además dejas más clara la intención de estar haciendo una comparación por el valor del objeto.&lt;/p&gt;
&lt;h1 id=&#34;objetos-propios&#34;&gt;Objetos propios&lt;/h1&gt;
&lt;h2 id=&#34;funciones-que-operan-nuestros-objetos&#34;&gt;Funciones que operan nuestros objetos&lt;/h2&gt;
&lt;p&gt;Anteriormente, vimos que los primitivos, o las clases que los usan mejor dicho, ejecutan métodos que devuelven copias modificadas del original. Cuando tenemos nuestros propios objetos la historia cambia. Según como desarrollemos sus métodos, podrá alterar su estado inicial, o simplemente devolver copias tal que lo hacen los primitivos.&lt;/p&gt;
&lt;p&gt;En el siguiente ejemplo, podemos ver ciertos métodos que cambian el estado original del objeto, porque nuestro propio método en este caso si muta el estado original.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String args[]) {
      SomeType someType = new SomeType();
      SomeType another = new SomeType();
      someType.firstMethod(another); // another{ num:5, text:null }
      System.out.println(another.toString());
    }
}
class SomeType{
    public int num;
    public String text;
    public void firstMethod(SomeType someType){
	        someType.num=5; // hace referencia al mismo objeto recibido por parámetro
    }
    @Override
    public String toString(){
        return &amp;#34;{num:&amp;#34; + num + &amp;#34;, &amp;#34; + &amp;#34;text:&amp;#34; + text + &amp;#34;}&amp;#34;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;En cambio podemos provocar que ocurra algo similar que con los primitivos.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String args[]) {
      SomeType someType = new SomeType();
      SomeType another = new SomeType();
      someType.firstMethod(another); // another{ num:0, text:null }
      System.out.println(another.toString());
    }
}
class SomeType{
    public int num;
    public String text;
    public void firstMethod(SomeType someType){
            someType = new SomeType(); // ya NO hace referencia al mismo objeto recibido por parámetro
	        someType.num=5; 
    }
    @Override
    public String toString(){
        return &amp;#34;{num:&amp;#34; + num + &amp;#34;, &amp;#34; + &amp;#34;text:&amp;#34; + text + &amp;#34;}&amp;#34;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;funciones-que-operan-colecciones-o-arrays-de-nuestros-objetos&#34;&gt;Funciones que operan colecciones o arrays de nuestros objetos&lt;/h2&gt;
&lt;p&gt;Otro caso más específico que debemos tener en cuenta, sería el hecho de que los arrays de primitivos, si mutan su valor.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Main {
    public static void main(String args[]) {
      SomeType someType = new SomeType();
      SomeType another = new SomeType();
      someType.firstMethod(another.num);
      System.out.println(another.num[0]); // 5
    }
}
class SomeType{
    public int [] num = new int[5];
    public String text;
    public void firstMethod(int[] num){
        num[0] = 5;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;tipos-de-funciones&#34;&gt;Tipos de funciones&lt;/h1&gt;
&lt;h2 id=&#34;command-query-separator-cqs&#34;&gt;command query separator (cqs)&lt;/h2&gt;
&lt;p&gt;Es un principio que nos dice que debemos de diferenciar entre dos tipos de funciones: por un lado, tenemos las &amp;ldquo;querys&amp;rdquo;, que no alteran el estado del sistema&lt;/p&gt;
&lt;p&gt;&lt;code&gt;c = sum(a,b); *//realiza una &amp;quot;pregunta&amp;quot; y asigna la respuesta a una variable.*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;; por otro lado, tenemos las &amp;ldquo;command&amp;rdquo;, que sí alteran el estado del sistema&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sum(a,b); *//internamente, está asignando el resultado de la operación a algún campo, por lo que sería una &amp;quot;orden&amp;quot;.*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Una vez conocida la diferencia, cabe recordar evitar la mezcla de éstos dos tipos de funciones, de tal modo que, ni una &amp;ldquo;query&amp;rdquo; debe alterar el estado del sistema, y una &amp;ldquo;command&amp;rdquo; se limita a operar con datos del sistema. Por ejemplo, un value object contiene solo funciones tipo command.&lt;/p&gt;
&lt;h2 id=&#34;funciones-puras&#34;&gt;Funciones puras&lt;/h2&gt;
&lt;p&gt;Son esas funciones que no dependen de información externa para su ejecución. Realizar funciones los mas puras posibles, nos garantiza flexibilidad, además de que esa función puede estar en cualquier sitio, y que por cambiarla no romperemos nada. Aquí vemos un ejemplo, en el que por más que llamemos a la función, si siempre es el mismo parámetro, el resultado será el mismo.&lt;/p&gt;
&lt;p&gt;**&lt;code&gt;class** **SomeType**{ **public** double raizCuadrada(int n){ **return** Math.sqrt(n); }}&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Análisis del libro &#34;Implementation patterns&#34;</title>
        <link>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-implementation-patterns/</link>
        <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-implementation-patterns/</guid>
        <description>&lt;p&gt;Implementations Patterns, de Kent Beck, es un libro sobre programación que define buenas prácticas a seguir en el desarrollo de código en Java, con el objetivo de tener un código legible y del que nos sintamos orgullosos. Se busca mejorar la perspectiva que tenga un programador sobre el sistema que va a tratar, para que entienda que cuando escriba código, éste debe hablar por si solo, debe ser la respuesta correcta y simple a una pregunta que se haga una persona cuando debe resolver un problema. Podemos decir entonces que el libro trata la responsabilidad que debe asumir un programador para tener un código satisfactorio.&lt;/p&gt;
&lt;p&gt;La programación va más allá de la comunicación del hombre con la máquina, el programador debe pensar que su trabajo lo van a ver otras personas que tendrán que interpretar su código, así mismo como puede ser el mismo quien vea su propio trabajo en un futuro. Para lograr que todo ésta interpretación no sea un tormento, deberíamos tener patrones que definan como desarrollamos código simple y eficaz.&lt;/p&gt;
&lt;h1 id=&#34;patrones&#34;&gt;&lt;strong&gt;PATRONES&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Todo programador debería conocer/seguir un conjunto de leyes que de cumplir sus programas como son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La mayor parte del tiempo se dedica a leer, más que a escribir.&lt;/li&gt;
&lt;li&gt;Nunca hay un &amp;ldquo;terminé&amp;rdquo;. Se invierte más en modificaciones que en el desarrollo inicial.&lt;/li&gt;
&lt;li&gt;Se estructuran utilizando un conjunto básico de conceptos de flujo de estado y control.&lt;/li&gt;
&lt;li&gt;Los lectores necesitan entender los programas en detalle y en concepto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Los patrones tienden un puente entre los principios abstractos y la práctica. Además buscan ahorrar tiempo y energía, ya que se establecen para simplificar enormemente una tarea. Nos ayudan a abordar la toma de decisiones en un problema real. Entonces, los patrones de implementación nos ayudan a escribir soluciones razonables para problemas comunes en la programación.&lt;/p&gt;
&lt;p&gt;Hay que entender que por muchos problemas que cubramos con patrones no podremos cubrir todas las situaciones que surjan en el desarrollo. Tener una lista de patrones es simplemente una teoría que se adapta a cada situación y necesidad.&lt;/p&gt;
&lt;h1 id=&#34;una-teoría-de-la-programación&#34;&gt;&lt;strong&gt;UNA TEORÍA DE LA PROGRAMACIÓN&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Los valores proporcionan motivación, los principios traducen esa motivación en acción, y finalmente son los patrones los que describen como se va a hacer. El estilo de desarrollo de cada programador viene definido a partir de sus valores personales y de los principios que expresen sus patrones de implementación.&lt;/p&gt;
&lt;p&gt;Tres valores fundamentales son la comunicación(un lector puede entenderlo), la simplicidad(eliminar el exceso de complejidad) y la flexibilidad(la forma en que cambian)&lt;/p&gt;
&lt;p&gt;Los principios son ideas más específicas de la programación, y son la base de los patrones, ya que son los que explican el por qué se ha desarrollado determinado patrón.&lt;/p&gt;
&lt;p&gt;Las consecuencias locales definen que si un cambio aquí puede causar un problema allá , entonces el costo del cambio aumenta dramáticamente. El código con consecuencias mayormente locales se comunica de manera efectiva.&lt;/p&gt;
&lt;p&gt;Cuando se tiene el mismo código en varios lugares, si se cambia una copia del código hay que decidir si se cambian o no todas las demás copias. Su cambio ya no es local. Cuantas más copias del código, más costará el cambio.&lt;/p&gt;
&lt;p&gt;Otro razonamiento del principio de las consecuencias locales es mantener la lógica y los datos juntos. Poner la lógica y los datos sobre los que opera cerca el uno del otro, en el mismo método si es posible, o en el mismo objeto, o al menos en el mismo paquete.&lt;/p&gt;
&lt;p&gt;La simetría en el código es donde la misma idea se expresa de la misma manera en todos los lugares donde aparece en el código. En el siguiente ejemplo la segunda afirmación es más concreta que las demás, por lo que debemos llevarla al mismo nivel de abstración.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*/*BEFORE*/* 
entrada();
cuenta++;

*/*AFTER*/*
entrada();
increment();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Un último principio es poner juntos la lógica o los datos que cambian a la misma velocidad y separar la lógica o los datos que cambian a velocidades diferentes. Estas tasas de cambio son una forma de simetría temporal.&lt;/p&gt;
&lt;h1 id=&#34;motivation&#34;&gt;&lt;strong&gt;MOTIVATION&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;El mantenimiento es caro porque entender el código existente lleva tiempo y es propenso a errores. Hacer cambios es generalmente fácil cuando se sabe lo que hay que cambiar. Aprender lo que hace el código actual es la parte más costosa. Una vez que los cambios se hacen, necesitan ser probados y desplegados.&lt;/p&gt;
&lt;p&gt;Para intentar reducir el costo general debemos encontrar la forma de obtener beneficios inmediatos al tiempo que se establece un código limpio para facilitar el desarrollo futuro, reduciendo así los gastos de mantenimiento.&lt;/p&gt;
&lt;p&gt;Es por ésto que podemos decir que es importante tener patrones de implementación que nos permitan realizar todo lo anterior de una manera rápida, que lo hagamos casi de forma automática.&lt;/p&gt;
&lt;h1 id=&#34;clases&#34;&gt;&lt;strong&gt;CLASES&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Los patrones de clase tienen mayor alcance que cualquier otro patrón de implementación. Los patrones de diseño nos hablan de las relaciones entre clases.&lt;/p&gt;
&lt;p&gt;Usamos clases para agrupar una serie de datos y asociar una lógica a ellos. En una clase, la lógica debe cambiar de forma más lenta que como lo hacen los datos sobre los que opera. Dichos datos cambian a velocidades similares y son operados por la lógica relacionada. Una programación efectiva con objetos comprende saber agrupar la lógica en clases y representar sus variaciones en función de los datos que usa. Otro aspecto a tener en cuenta es la herencia, para poder definir múltiples variaciones de una clase padre en varias subclases.&lt;/p&gt;
&lt;p&gt;Aunque usar clases presente grandes beneficios para la estructuración en nuestro código, debemos saber cuando usarlas y cuando no. Es decir, debemos reducir el número de clases para lograr reducir la dimensión del sistema, pero siempre y cuando se respete que las demás clases no se sobrecargan a raíz de realizar dicha reducción.&lt;/p&gt;
&lt;p&gt;¿Como podemos comunicar nuestras intecCiones correctamente declarando las clases?. A continuación se da una serie de principios que son la respuesta a ello:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nombre simple de la superclase/interfaz:&lt;/strong&gt; Un nombre correcto puede llegar a simplificar y mejorar mucho la situación. &amp;ldquo;Las clases son el el anclaje central del diseño&amp;rdquo;, lo que quiere decir que cuando creemos método lo haremos en función del nombre de la clase, por lo que ésta primera definición es crucial para las definiciones que le prosiguen. A veces necesitas seguir adelante con nuevas funciones, tiempo de confianza, frustración y tu subconsciente para proporcionar un nombre &lt;a class=&#34;link&#34; href=&#34;http://mejor.La&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mejor.La&lt;/a&gt; conversación es una herramienta que me ayuda constantemente a encontrar mejores nombres. Explicar el propósito de un objeto a otra persona te lleva a encontrar mejores nombres para lo que estás describiendo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nombre de la subclase:&lt;/strong&gt; Los nombres de las subclases tienen dos trabajos. Necesitan comunicar cómo son de clase y en qué se diferencian. Una vez más, el equilibrio que se debe lograr es entre la longitud y la expresividad. Use esa superclase como base para el nombre de la subclase. Los nombres de clase que son demasiado cortos gravan la memoria a corto plazo del lector. Los grupos de clases cuyos nombres no se relacionan entre sí serán difíciles de comprender y recordar. Usen los nombres de las clases para contar la historia de su código.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interfaz abstracta:&lt;/strong&gt; Se busca codificar a las interfaces, no a las implementaciones. Esta es otra forma de sugerir que una decisión de diseño no debe ser visible en más lugares de los necesarios. Si la mayor parte de mi código sólo sabe que estoy tratando con una colección soy libre de cambiar la clase concreta más tarde. Puede ser representado en Java como una interfaz o como una superclase. Pague por las interfaces sólo cuando necesite la flexibilidad que ellas crean.Otro factor económico en la introducción de las interfaces es la imprevisibilidad de los programas informáticos. Nuestra industria parece adicta a la idea de que si diseñáramos bien el software no tendríamos que cambiar nuestros sistemas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interfaz&lt;/strong&gt;: Una forma de decir &amp;ldquo;Esto es lo que quiero lograr y más allá de eso hay detalles que no deberían preocuparme&amp;rdquo; es declarar una interfaz de Java. Tienen algo de la flexibilidad de la herencia múltiple sin la complejidad y la ambigüedad. Las interfaces como clases sin implementaciones deben ser nombradas como si fueran clases. Por ejemplo, para dejar constancia de una interfaz, podríamos declarar la interfaz como &amp;ldquo;IFile&amp;rdquo;, y la clase que la implementa &amp;ldquo;File&amp;rdquo;. Abtenerse de nombres como &amp;ldquo;FileImpl&amp;rdquo;, ya que es una abreviatura.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clase abstracta(superclase):&lt;/strong&gt; La otra forma de expresar la distinción entre la interfaz abstracta y la implementación concreta en Java es usar una superclase. La superclase es abstracta en el sentido de que puede ser reemplazado en tiempo de ejecución con cualquier subclase. Las interfaces abstractas necesitan soportar dos tipos de cambio: cambio en la implementación y cambio de la propia interfaz. Las interfaces de Java no soportan bien esta última. Cada cambio en una interfaz requiere cambios en todas las implementaciones. Las clases abstractas no sufren esta limitación. Siempre que se pueda especificar una implementación por defecto, se pueden añadir nuevas operaciones a una clase abstracta sin interrumpir a los implementadores existentes. Una limitación de las clases abstractas (superclase) es que los implementadores sólo pueden declarar su lealtad a una superclase. Si son necesarias otras vistas de la misma clase, deben ser implementadas por interfaces Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;interfaz-versionada&#34;&gt;&lt;strong&gt;Interfaz versionada&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;¿Qué haces cuando necesitas cambiar una interfaz pero no puedes? Típicamente esto sucede cuando quieres añadir operaciones. Ya que añadir una operación romperá todos los implementos existentes, no puedes hacer eso. Sin embargo, puedes declarar una nueva interfaz que amplíe la interfaz original y añadir la operación allí. Los usuarios que desean la nueva funcionalidad utilizan la interfaz ampliada mientras que los usuarios existentes permanecen ajenos a la existencia de la nueva interfaz.&lt;/p&gt;
&lt;h2 id=&#34;value-object&#34;&gt;&lt;strong&gt;Value Object&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Este estilo funcional de computación nunca cambia ningún estado, sólo crea nuevos valores. Cuando se tiene una situación estática (quizás momentáneamente) sobre la que se quiere hacer afirmaciones o sobre la que se quiere hacer preguntas, entonces el value object es apropiado. Cuando la situación cambia con el tiempo,entonces el estado es apropiado.&lt;/p&gt;
&lt;h2 id=&#34;subclase&#34;&gt;&lt;strong&gt;Subclase&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Declarar una subclase es una forma de decir, &amp;ldquo;Estos objetos son como esos excepto&amp;hellip;&amp;rdquo; Si tienes la superclase correcta, crear una subclase puede ser una manera poderosa de programar. Con el método correcto para anular a la superclase, puedes introducir una variante de un cálculo existente con unas pocas líneas de código. Como también tiene desventajas: si descubres que&lt;/p&gt;
&lt;p&gt;algún conjunto de variaciones no está bien expresado como subclases, tienes que trabajar para desenmarañar el código antes de poder reestructurarlo; segundo, tienes que entender la superclase antes de que puedas entender la subclase; tercero, los cambios en una superclase son arriesgados, ya que las subclases pueden depender de propiedades sutiles de la implementación de la superclase.&lt;/p&gt;
&lt;p&gt;Una clave para lograr subclases útiles es implementar la lógica de la superclase en métodos que hagan un solo trabajo, para facilitar la reutilización o cambio en la subclases.&lt;/p&gt;
&lt;h1 id=&#34;estado&#34;&gt;ESTADO&lt;/h1&gt;
&lt;p&gt;Cuando hablamos de estado, nos referimos a esos valores que forman el estado del programa. Cuando usamos POO, éstos valores son pequeñas piezas encapsuladas en objetos, permitiéndonos así entender mejor que valor hizo cambiar el estado.&lt;/p&gt;
&lt;p&gt;A continuación se definen una serie de patrones que afectan al estado:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Acceso&lt;/strong&gt;: Hay dos formas de acceder a los valores: acceso a valores almacenados e invocando cálculos. Acceder a la memoria es como invocar una función que devuelve los valores almacenados actualmente. Invocar una función es como leer un lugar de memoria, cuyo contenido simplemente se calcula y no simplemente se devuelve. Dos tipos de acceso: Acceso Directo → Cuando pasamos un dato concreto, lo cuál aporta una clara expresividad, pero pierde en flexibilidad. Acceso Indirecto → Cuando pasamos una variable y el método se encarga de realizar lo que sea necesario antes de asignar dicho dato, lo cual requiere conocer además el comportamiento de otro factor, pero ganamos en flexibilidad, pudiendo aplicar las operaciones que queramos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estado común:&lt;/strong&gt; Muchos cálculos comparten los mismos elementos de datos aunque los valores sean diferentes. Cuando encuentre un cálculo de este tipo, comuníquelo declarando los campos de una clase.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estado variante&lt;/strong&gt;: Otras veces se deben tener diferentes elementos de datos, ya sea porque una clase necesita varias propiedades, en éste caso se deben declaran los campos intentando agrupar los comunes en un estado común.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables:&lt;/strong&gt; Datos almacenados que son variantes con el tiempo. Variables locales → Accesibles desde donde se declaran hasta el final del bloque.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recopilador&lt;/strong&gt;: recolecta información para su uso posterior.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contador&lt;/strong&gt;: una especie de recopilador que recolecta la cuenta de otros objetos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Explicativas&lt;/strong&gt;: Las que su nombre son definidos para guiar al lector.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reutilizador&lt;/strong&gt;: Las que se definen para ahorrar al entorno de trabajo el calculo de una variable que siempre tienen el mismo valor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elementos&lt;/strong&gt;: Las que usamos cuando queremos decir &amp;ldquo;por cada objeto en ésta lista&amp;hellip;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Campo&lt;/strong&gt;: Los atributos que pertenecen y se declaran a un objeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ayudante&lt;/strong&gt;: El campo definido para usar las referencias de otro objeto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bandera&lt;/strong&gt;: Los que definen como se va a usar el objeto, y que si tienen método para alterar su estado además dicen que el uso puede variar a lo largo de la ejecucción.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estrategia&lt;/strong&gt;: Cuando almacenamos la parte variante que puedan tener los métodos, proporcionando métodos para que cambie.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estado&lt;/strong&gt;: Son como los estratégicos, pero los de estado van más ligados a la identidad del objeto y su funcionamiento general.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Componentes&lt;/strong&gt;: estos campos contienen propiedades del objeto en cuestión que no buscan ser como los estratégicos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parámetro&lt;/strong&gt;: es la forma de comunicar a un objeto con otro si no se tienen un campo del objeto en cuestión declarado. Mediante un método un objeto recibe información de otro objeto o el objeto en si.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recopiladores&lt;/strong&gt;: son pasados con el fin de ir añadiendo información en él.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Opcionales&lt;/strong&gt;: Como cuando tenemos diferentes constructores que reciben distintos número de parámetros, con el fin de pasar solo los datos que queramos o todos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Argumentos variables&lt;/strong&gt;: Para poder pasar parámetros sin un número determinado de ellos, ya sea mediante una colección, o delegando a la función que cree una colección a partir de todo lo que se le pasa (Class&amp;hellip; classes).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Objeto&lt;/strong&gt;: cuando se pasa un objeto como parámetro con el fin de reusar código en la lógica.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constantes&lt;/strong&gt;: Datos que son accedidos en muchos sitios, pero que no cambian. Al declararlo así nos aseguramos que la variable está protegida ya que nunca debería cambiar. Por convención debería escribirse su nombre en mayúsculas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nombres de acuerdo a un rol&lt;/strong&gt;: Definir las variables según el rol/función que vayan a cumplir. result → si guarda el objeto que retorna una función for(Person person: people) → llamamos a la variable &amp;ldquo;person&amp;rdquo; porque la lista &amp;ldquo;people&amp;rdquo; tiene un conjunto de &amp;ldquo;person&amp;rdquo;. count → guarda la cuenta de algo. etc&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;comportamiento&#34;&gt;COMPORTAMIENTO&lt;/h1&gt;
&lt;p&gt;Se describen una serie de patrones sobre como expresar el comportamiento de un programa:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;F&lt;strong&gt;lujo de control&lt;/strong&gt;: Expresa los cálculos como una secuencia de pasos. Java es un miembro de la familia de lenguajes en los que la secuencia de control es un principio organizativo fundamental. Las declaraciones adyacentes se ejecutan una detrás de otra. Los condicionales, bucles, excepciones, etc, definen el flujo a seguir del programa. Teniendo ésto claro podemos decir que cada paso cuenta a la hora de tener un buen producto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flujo principal:&lt;/strong&gt; Los programadores generalmente tienen en mente un flujo principal de control para sus programas. El procesamiento comienza aquí y termina allí. Puede haber decisiones y excepciones a lo largo el camino, pero el cómputo tiene un camino a seguir. Pensar desde donde y hacía donde queremos llegar, sumará a la hora de tener una mejor idea de como implementar funcionalidad.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mensaje:&lt;/strong&gt; La programación orientada a objetos enriquece el mensaje que transmitimos, ya que para una secuencia de instrucciones se define un mensaje (método) que abstrae al lector de conocer todos los detalles del funcionamiento, solo necesita aplicar la lógica común. No solo importa a la hora de leerlo, si no que será un factor fundamental a la hora de poder ampliar el comportamiento actual del programa.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eligiendo el mensaje:&lt;/strong&gt; Debemos tener cuidado con el nombre que elijamos para el mensaje que queremos transmitir, ya que un mal nombre hará una mala representación de la lógica que estamos abstrayendo. Nombres que sean el resumen o el factor clave de lo que hace la lógica.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mensaje descompuesto:&lt;/strong&gt; Cuando se tiene una serie de algoritmos complicados, podemos usar un nombre que descomponga cada tarea que cumpla el algoritmo y concatene cada una de ellas para formar un nombre descriptivo que permita al lector ignorar los detalles de implementación.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;6. &lt;strong&gt;Mensaje de reversión:&lt;/strong&gt; No solo importa que sea un buen mensaje, además debería estar al mismo nivel de abstración que los demás mensajes de su ámbito, por lo que si nuestro mensaje es más complicado que otros mensaje que le proceden o preceden, deberíamos buscar la forma de que queden al mismo nivel abstración.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void compute() { 
input(); 
helper.process(**this**); 
output();}
*/******************************************/*
compute() { 
	**new** Helper(**this**).compute();
}
Helper.compute() { 
input(); 
process(); 
output();
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;strong&gt;Mensaje de invitación&lt;/strong&gt;: Cuando queremos transmitir el mensaje de que una clase es solo una idea de funcionamiento y que requiere de especificaciones o subclases, indicamos que la clase es abstracta, por lo que no se puede instanciar, solo mejorar.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mensaje explicativo&lt;/strong&gt;: Transmitir la intención de la lógica en el mensaje mediante un comentario o el nombre de un método.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flujo excepcional&lt;/strong&gt;: Si es cierto que un programa siempre tienen un flujo principal, son las clausulas guardas o las excepciones las que crear un flujo alternativo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clausula guarda&lt;/strong&gt;: Son condiciones que harán que nuestro método de un salto, ignorando la lógica que venga después, ya que con ésto damos a entender que se ha dado una condición en la que no necesitamos seguir operando.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excepciones&lt;/strong&gt;: Son condiciones que expresan que no se puede implementar cierta lógica pensada debido a algún fallo en la computación. Podemos crear nuestras propias excepciones para aportar mayor expresividad al código, y así poder manejar mejor éstas excepciones. Con manejar las excepciones nos referimos a recuperarnos del fallo de tal manera que si un bloque de código no se puede ejecutar, hay otro que tomará el relevo y que coge como contexto el fallo obtenido que provocó la excepción. Además, tener nuestra propia excepción, nos da un mayor feedback de porqué falla el código.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;métodos&#34;&gt;MÉTODOS&lt;/h1&gt;
&lt;p&gt;Nuestros programas pueden tener una lógica muy variante, ya que vamos desarrollando un bloque de código por función que el programa final deba tener. Perfectamente, toda la lógica podría contenerse en un solo método, pero para eso usamos métodos, para cumplir una tarea específica, evitando tener que un método cumpla más de una tarea. Los beneficios son claros, la legibilidad obtenida al separar la lógica en métodos es un gran punto a favor, pero además entra en juego la expresividad, ya que así distinguimos partes más importantes o menos importantes.&lt;/p&gt;
&lt;p&gt;Lo mejor de los métodos es que se entienden por separado, abstraen al lector de tener que leer otras implementaciones que no son necesarias para entender la tarea que está cumpliendo un método. Evitan la repitición de código, ya que varias llamadas a un método equivale a ejecutar tantas veces un bloque de código sin tener que haberlo escrito más que una vez para crear el método.&lt;/p&gt;
&lt;p&gt;Que nos aporten tantos beneficios no quiere decir que no puedan suponer una desventaja, ya que se debe cuidar su tamaño, nombre y propósito. Si haces demasiados métodos muy pequeños, los lectores tendrán dificultades para seguir su fragmentada expresión de ideas. Pocos métodos conducen a la duplicación y a la consiguiente pérdida de flexibilidad.&lt;/p&gt;
&lt;p&gt;A continuación se definen una serie de patrones relacionados con los métodos:&lt;/p&gt;
&lt;h2 id=&#34;métodos-compuestos&#34;&gt;MÉTODOS COMPUESTOS&lt;/h2&gt;
&lt;p&gt;Cuando se componen métodos a partir de llamadas a otros métodos, cada uno debe tener el mismo nivel de abstracción.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;void compute() {
	input();
	flags|= 0x0080; /*FIX: flags();*/
	output();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Una objeción al uso de muchos pequeños métodos es la penalización por rendimiento impuesta por la invocación de todos esos métodos.&lt;/p&gt;
&lt;p&gt;Se suele recomendar desarrollar métodos estableciendo un límite de líneas de código que ronde entre 5 y 15. Aunque hay que tener en cuenta que no se debe sacrificar la legibilidad o expresividad por la longitud estándar de los métodos, ya que por ejemplo un simple espacio en blanco puede llegar a aportar mucho si separa dos estructuras de distinas complejididades, nos aporta expresividad. Un método se convierte en un obstáculo cuando me dedico a tratar de entender el código en detalle.&lt;/p&gt;
&lt;p&gt;El truco para elaborar un método está en reconocer cuando tengo conjuntos de detalles relativamente independientes que pueden ser movidos a métodos de apoyo.&lt;/p&gt;
&lt;h2 id=&#34;revelar-la-intención-en-el-nombre-del-método&#34;&gt;REVELAR LA INTENCIÓN EN EL NOMBRE DEL MÉTODO&lt;/h2&gt;
&lt;p&gt;Los métodos deben ser nombrados con el propósito de que un posible invocador pueda tener en mente porqué usa ese método. Nombre métodos para que ayuden a contar la historia.&lt;/p&gt;
&lt;h2 id=&#34;visibilidad-del-método&#34;&gt;VISIBILIDAD DEL MÉTODO&lt;/h2&gt;
&lt;p&gt;Los cuatro niveles de visibilidad -public, package, protected, private- cada uno dice algo diferente sobre sus intenciones para un método. Si no necesitamos que otros sitios conozcan un método, la mejor manera de expresarlo es declararlo private. En cuanto a la flexibilidad, debemos tener en cuenta que cuantos más métodos privados tengamos más fácil sera escalar, ya que no existe código más allá del de la propia clase que depende de él, pero si a raiz de ésto dificultamos demasiado que otras clases que lo necesiten puedan acceder al método, lo mejor sería declarar como tipo public, debemos encontrar en balance para cada situación.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Public&lt;/strong&gt; → Accesible en cualquier paquete o clase. Hacer un método público significa que aceptas la responsabilidad de mantenerlo, ya sea dejándolo sin cambios, o arreglando todas las llamadas si cambia.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protected&lt;/strong&gt; → Sólo las clases que hereden de la superclase, podrán acceder a métodos declarados así.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private&lt;/strong&gt; → Sólo será accesible en la misma clase o paquete. Nos aporta una flexibilidad, ya que el cambio se realizará solo en éste punto y no tendremos que realizarlo en múltiples sitios como lo haríamos como un método público.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Revelar lentamente los métodos, comenzando con la visibilidad más restrictiva que trabajar y revelarlos cuando sea necesario. Si un método ya no necesita ser visible, reducir su visibilidad. Declarar los métodos finales es similar a elegir su visibilidad. Declarar un método final establece que aunque no te importa que la gente use este método, tú no permitirás que nadie lo cambie, nos da la seguridad de que nadie romperá accidentalmente el objeto ya que su valor es invariante. Declarar un método estático lo hace visible incluso si la persona que llama no tiene el acceso a una instancia de la clase. Los métodos estáticos están limitados en el sentido de que no pueden depender de ninguna instancia por lo que no son un buen depósito para la lógica compleja. El buen uso de los métodos estáticos es como un reemplazo para los constructores.&lt;/p&gt;
&lt;h2 id=&#34;objeto-de-método&#34;&gt;OBJETO DE MÉTODO&lt;/h2&gt;
&lt;p&gt;Para crear un objeto de método, busque un método largo con muchos parámetros y variables temporales. Tratar de extraer cualquier parte del método resultaría en largas listas de parámetros en submétodos difíciles de nombrar.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear una clase con el nombre del método. Por ejemplo, &lt;code&gt;complexCalculation()&lt;/code&gt; se convierte en &lt;code&gt;ComplexCalculator&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Crear un campo en la nueva clase para cada parámetro, variable local y campo utilizado en el método. Dale a estos campos los mismos nombres que tienen en elmétodo original.&lt;/li&gt;
&lt;li&gt;Crear un constructor que tome como parámetros los parámetros del método de la método original y los campos del objeto original utilizados por el método.&lt;/li&gt;
&lt;li&gt;Copie el método en un nuevo método, &lt;code&gt;calculate()&lt;/code&gt;, en la nueva clase.&lt;/li&gt;
&lt;li&gt;Sustituir el cuerpo del método original por un código que cree una instancia de la nueva clase. Por ejemplo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;complexCalculation() {
	new ComplexCalculator().calculate();
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Si los campos fueron establecidos en el método original, establézcalos después de los retornos del método:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;complexCalculation() {
	ComplexCalculator calculator = new ComplexCalculator();
	calculator.calculate();
	mean = calculator.mean;
	variance = calculator.variance;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Asegúrate de que el código refactorizado funcione como el antiguo código. El código de la nueva clase es fácil de refactorizar. Puedes extraer métodos y no tener que pasar nunca ningún parámetro porque todos los datos utilizados por el método se almacenan en campos. A menudo, una vez que se empiezan a extraer los métodos se descubre que algunas variables pueden ser degradadas de los campos a los locales.&lt;/p&gt;
&lt;h2 id=&#34;método-anulado-o-sobrescrito&#34;&gt;MÉTODO ANULADO O SOBRESCRITO&lt;/h2&gt;
&lt;p&gt;Los métodos anulados son una forma clara de expresar una variación. Los métodos declarados abstractos en un superclase son una clara invitación a especializar un cálculo, pero cualquier método no declarado final es un candidato para expresar una variación en un cálculo existente. Los métodos bien compuestos en la superclase proporcionan una multitud de potenciales ganchos en los que puedes colgar tu propio código. Si el código de la superclase está en pequeños trozos cohesivos, entonces serás capaz de anular métodos enteros. Anular un método no es ninguna de las dos cosas. Puedes ejecutar el código de la subclase y el código de la superclase invocando &lt;code&gt;super.method();&lt;/code&gt; para invocar el método del mismo nombre.&lt;/p&gt;
&lt;h2 id=&#34;método-sobrecargado&#34;&gt;MÉTODO SOBRECARGADO&lt;/h2&gt;
&lt;p&gt;Cuando declaras el mismo método con diferentes tipos de parámetros, dices &amp;ldquo;Aquí hay formatos alternativos para los parámetros de este método&amp;rdquo;. Los métodos sobrecargados alivian al llamante de la responsabilidad de convertir los parámetros si hay varias formas legítimas de pasando los parámetros. Una variante de la sobrecarga es usar el mismo nombre de método con diferentes número de parámetros. El problema con este estilo de sobrecarga es que los lectores que quieran preguntar: &amp;ldquo;¿Qué pasa cuando invoco este método?&amp;rdquo; necesitan leer no sólo el nombre del método sino también la lista de parámetros antes de que saber lo suficiente para averiguar lo que sucede como resultado de la invocación del método. Si la sobrecarga es complicada, los lectores necesitan entender la sutil sobrecarga reglas de resolución para poder determinar estáticamente qué método se invocará para determinados tipos de argumentos. Los métodos sobrecargados deben servir todos para el mismo propósito, con la variación sólo en los tipos de parámetros. Diferentes tipos de retorno para diferentes sobrecarga dos los métodos hacen que la lectura del código sea demasiado difícil. Es mejor encontrar un nuevo nombre para la nueva intención. Darle a los diferentes cálculos diferentes nombres.&lt;/p&gt;
&lt;h2 id=&#34;método-de-retorno&#34;&gt;MÉTODO DE RETORNO&lt;/h2&gt;
&lt;p&gt;El tipo de retorno de un método señala primero si el método es un procedimiento que funciona por efecto secundario o una función que devuelve un tipo de objeto particular. El tipo de retorno void permite distinguir entre procedimientos y funciones.A veces tu intención es que el tipo de retorno sea específico, un tipo de objeto concretoo uno de los tipos primitivos. Sin embargo, le gustaría que sus métodos fueran tan lo más ampliamente posible, así que elige el tipo de retorno más abstracto que expresa su intención. Esto conserva la flexibilidad para que puedas cambiar la tipo de retorno concreto en caso de que sea necesario en el futuro. Generalizar el tipo de retorno también puede ser una forma de ocultar detalles de la implementación. Por ejemplo, la devolución de una colección en lugar deunalista puede animar a los usuarios a no asumir que los elementos están en un orden fijo.&lt;/p&gt;
&lt;h2 id=&#34;método-de-comentario&#34;&gt;MÉTODO DE COMENTARIO&lt;/h2&gt;
&lt;p&gt;Expresar la mayor cantidad de información posible a través de los nombres y la estructura de el código. Añade comentarios solo para expresar decisiones e información que no es obvia del código.Las pruebas automatizadas pueden comunicar información que no encaja de forma natural en comentarios de método. Automatizado las pruebas tienen muchas ventajas. Escribirlas es un valioso ejercicio de diseño, especialmente cuando se hace antes de la aplicación. Si las pruebas se realizan, son consistentes con el código. Las herramientas de refactorización automatizada pueden ayudar a mantener las pruebas actualizadas a un nivel bajo costo.&lt;/p&gt;
&lt;h2 id=&#34;método-de-ayuda&#34;&gt;MÉTODO DE AYUDA&lt;/h2&gt;
&lt;p&gt;Grandes métodos convertidos en varios más pequeños, los denominamos &amp;lsquo;helpers&amp;rsquo; son los ayudantes. Su propósito es hacer que los cálculos de mayor complejidad sean más leídos ocultar detalles irrelevantes y darle la oportunidad de expresar su intención a través del nombre del método.Los ayudantes son típicamente declarados private, pasando a protected si la clase está destinada a ser refinada por subclasificación. Son éstos helpers los que llama otro método que si sea accesible para otras clases, o puede que quizas solo sirvan para apoyar a otro método private de la clase.&lt;/p&gt;
&lt;h2 id=&#34;método-para-prueba-con-impresion&#34;&gt;MÉTODO PARA PRUEBA CON IMPRESION&lt;/h2&gt;
&lt;p&gt;Son métodos que definimos sin más funcionalidad que mostrar cierta información útil sobre un objeto, como puede ser untoString();para imprimir información sobre propiedades que sirva de debug de la aplicación entre otras cosas.&lt;/p&gt;
&lt;h1 id=&#34;colecciones&#34;&gt;COLECCIONES&lt;/h1&gt;
&lt;p&gt;El comportamiento de colección solía ser implementado proporcionando enlaces en la estructura de datos en sí misma: cada página de un documento tendría enlaces con la anterior y las siguientes páginas. Más recientemente, la moda ha cambiado a usar un objeto separado para la colección que relaciona los elementos. Esto permite la flexibilidad de poner el mismo objeto en varias colecciones diferentes sin modificar el objeto.&lt;/p&gt;
&lt;h2 id=&#34;metáfora&#34;&gt;Metáfora&lt;/h2&gt;
&lt;p&gt;Las colecciones mezclan diferentes metáforas. La primera es la de una variable de valor múltiple, una variable que se refiere a una colección es en realidad una variable que se refiere a varios objetos al mismo tiempo, pero dicha variable no se considera un objeto. Como con todas las variables, puede asignar a una variable de valor múltiple (añadir y quitar elementos), recuperar su valor, y enviar los mensajes variables (con el bucle for). La metáfora de la variable multivaluada se rompe en Java porque las colecciones son objetos separados con identidad. La segunda metáfora mezclada en las colecciones es la de los objetos - una colección es un objeto. Puedes recuperar una colección, pasarla alrededor, probarlo para la igualdad, y enviarle mensajes. Así que, así como las colecciones son variables de múltiples valores, también son objetos. Otra metáfora útil es pensar en las colecciones como conjuntos matemáticos. Una colección divide el mundo de los objetos en objetos que están en la colección y los objetos que no lo son. Dos operaciones básicas en los conjuntos matemáticos están encontrando su cardinalidad (el método size() de las colecciones) y probando la inclusión (representada por el método contains()).&lt;/p&gt;
&lt;h2 id=&#34;conceptos&#34;&gt;Conceptos&lt;/h2&gt;
&lt;p&gt;El primer concepto expresado por las colecciones es su tamaño. Los Arrays (que son colecciones primitivas) tienen un tamaño fijo, establecido cuando se crea el conjunto. La mayoría las colecciones pueden cambiar de tamaño después de ser creadas. Un segundo concepto expresado a través de las colecciones es si el orden de elementos es importante. El orden puede ser el orden en que los elementos se añadieron o puede ser proporcionada por alguna influencia externa como la lexicográfica comparación. Por último, las consideraciones sobre el rendimiento se comunican mediante la elección de colección. Si una búsqueda lineal es lo suficientemente rápida, una colección genérica es lo suficientemente buena. Si la colección crece demasiado grande, será importante poder probar o acceder elementos por una clave, sugiriendo un conjunto o mapa.&lt;/p&gt;
&lt;h2 id=&#34;interfaces&#34;&gt;Interfaces&lt;/h2&gt;
&lt;p&gt;La declaración de la interfaz dice al lector sobre la colección: si la colección está en un orden particular, si hay elementos duplicados, y si hay alguna manera de buscar elementos por clave o sólo por iteración. Los tipos de interfaces para colecciones se describen a continuación:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;: Desafortunadamente, no tienen el mismo protocolo que otras colecciones, por lo que es más difícil cambiar de un array a una colección que de un tipo de colección a otro. A diferencia de la mayoría de las colecciones, el tamaño de un conjunto se fija cuando se crea. Los arrays son más eficientes en el tiempo y el espacio que otras colecciones de simples operaciones. El acceso que tienen los arrays (es decir, elementos[i]) es más de diez veces más rápido que el equivalente de ArrayList (elements.get(i)).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Iterable&lt;/strong&gt;: Declarar una variable Iterable sólo dice que contiene múltiples valores. Iterable es la base para la construcción del bucle en Java 5. Cualquier objeto declarado como Iterable puede ser usado en un bucle. Esto se implementa llamando tranquilamente al método iterator(). Una de las cuestiones que hay que comunicar al utilizar las colecciones es si se espera que los clientes los modifiquen. Desafortunadamente, Iterable y su ayudante, Iterator, no proporcionan ninguna manera de declarar que una colección no debe ser modificada. Una vez que tienes un Iterator, puedes invocar su método remove(), que elimina un elemento del Iterable subyacente.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collection&lt;/strong&gt;: La colección hereda de Iterable, pero añade métodos para añadir, eliminar, buscar y contar los elementos. Declarar una variable o método como una colección deja muchas opciones para una clase de implementación. Dejando la declaración tan vagamente especificada como sea posible, usted mantiene la libertad de cambiar las clases de implementación más tarde sin que el cambio se extienda a través del código.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;List&lt;/strong&gt;: A la colección, la lista añade la idea de que los elementos están en un orden estable. Un elemento puede ser recuperado proporcionando su índice a la colección. Una secuencia estable es importante cuando los elementos de una colección interactúan entre sí.&lt;strong&gt;Set&lt;/strong&gt;: Un conjunto es una colección que no contiene duplicados (elementos que informarían que son iguales() entre sí).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SortedSet(conjunto ordenado)&lt;/strong&gt;: SortedSet almacena elementos ordenados pero únicos. A diferencia del orden de una Lista, que está relacionado con el orden en que los elementos fueron añadidos o por índices explícitos pasados a add(int, Object), el ordenamiento en un SortedSet es proporcionado por un Comparador. En ausencia de un orden explícito, se utiliza el &amp;ldquo;orden natural&amp;rdquo; de los elementos. Por ejemplo, los Strings se clasifican en orden lexicográfico.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;: La última interfaz de recolección es Map, que es un híbrido de las otras interfaces. El mapa almacena los valores por clave, pero a diferencia de una lista, la clave puede ser cualquier objeto y no sólo un número entero. Las claves de un mapa deben ser únicas, aunque los valores puede contener duplicados. Los elementos de un Mapa no están en ningún orden particular. Debido a que Map no es completamente como cualquiera de las otras interfaces de la colección, se encuentra sola, sin heredar de ninguno de ellos. Los mapas son dos colecciones en el al mismo tiempo; una colección de llaves conectadas a una colección de valores.&lt;/p&gt;
&lt;h2 id=&#34;implementaciones&#34;&gt;Implementaciones&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Collection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;La clase predeterminada es ArrayList, pero ésta puede no darnos el resultado esperado al realizar un contains(object) o un remove(object), ya que en éste tipo se permiten duplicados y solo borrará el primer resultado encontrado. Lo más seguro y eficaz es usar en su lugar HashSet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Añade la idea de que los elementos están en un estable orden. Las dos implementaciones de la Lista de uso común son ArrayList y LinkedList. ArrayList es rápido para acceder a los elementos y lento para añadir y quitar elementos, mientras que LinkedList es lento para acceder a los elementos y rápido para añadir y eliminar elementos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Set&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hay tres implementaciones principales de Set: HashSet, LinkedHashSet, y TreeSet (querealmente implementa SortedSet). HashSet es el más rápido pero sus elementos no están en orden garantizado. Un LinkedHashSet mantiene los elementos en el orden en que fueronañadió, pero a costa de una penalización extra del 30% de tiempo por añadir y quitarelementos. TreeSet mantiene sus elementos ordenados de acuerdo a un comparadorpero a costa de hacer que la adición y la eliminación de elementos o la prueba de un elemento lleve un tiempo proporcional a n, donde n es el tamaño de la colección.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Map&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Las implementaciones de Map siguen un patrón similar a las implementaciones deSet. HashMap es el más rápido y simple. LinkedHashMap preserva el orden de los elementos,iterando sobre los elementos en el orden en que fueron insertados. TreeMap (en realidad una implementación de SortedMap) itera sobre las entradas basadas en el orden delclaves.&lt;/p&gt;
&lt;h2 id=&#34;clase-collections&#34;&gt;Clase Collections&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Búsqueda&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;La operación indexOf() toma un tiempo proporcional al tamaño de la lista. Llama a Collections.binarySearch(list, element) para devolver el índice de un elemento en ellista. Si el elemento no aparece en la lista, se devolverá un número negativo.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 150; 
			flex-basis: 360px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/an%C3%A1lisis-del-libro-implementation-patterns/images/05E.gif&#34; data-size=&#34;400x266&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/an%C3%A1lisis-del-libro-implementation-patterns/images/05E.gif&#34;
			width=&#34;400&#34;
			height=&#34;266&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://1.bp.blogspot.com/-44M1-u1RI3I/XvJ7TMZRJFI/AAAAAAAAAOk/Ce_w6BmMBZMK4zUHime84nC22LgaA9W5wCK4BGAsYHg/w400-h266/05E.gif&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://1.bp.blogspot.com/-44M1-u1RI3I/XvJ7TMZRJFI/AAAAAAAAAOk/Ce_w6BmMBZMK4zUHime84nC22LgaA9W5wCK4BGAsYHg/w400-h266/05E.gif&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://1.bp.blogspot.com/-44M1-u1RI3I/XvJ7TMZRJFI/AAAAAAAAAOk/Ce_w6BmMBZMK4zUHime84nC22LgaA9W5wCK4BGAsYHg/w400-h266/05E.gif&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ordenar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Las colecciones también proporcionan operaciones para cambiar el orden de los elementos de una lista. Reverse(list) invierte el orden de todos los elementos de la lista. Shuffle(list) coloca los elementos en orden aleatorio. Sort(list) y Sort(list, comparator) coloca los elementos enen orden ascendente.&lt;/p&gt;
&lt;h1 id=&#34;desarrollo-de-frameworks&#34;&gt;DESARROLLO DE FRAMEWORKS&lt;/h1&gt;
&lt;p&gt;En éste capítulo, se habla de como cambian los patrones de implementación, cuando el fin es desarrollar un framework.&lt;/p&gt;
&lt;h2 id=&#34;cambiar-los-frameworks-sin-afectar-a-las-aplicaciones&#34;&gt;CAMBIAR LOS FRAMEWORKS SIN AFECTAR A LAS APLICACIONES&lt;/h2&gt;
&lt;p&gt;El dilema fundamental en el desarrollo y mantenimiento de los frameworks es que necesitan evolucionar, pero hay un gran costo por romper el código de cliente existente. La actualización del framework perfecta, añade nuevas funciones sin cambiar ninguna de las existentes, aunque éstas actualizaciones compatibles no siempre son posibles.Cuando desarrollamos un framework la mentalidad debe ser totalmente distinta que cuando realizamos código de producto convencional, ya que con una herramienta de éste tipo, se debe tener en cuenta que en algunas ocasiones es preferible un bloque de código más complejo, pero que es mucho más mantenible y mejorable, sin romper código de cliente. A pesar de ésto, la simplicidad siempre debe estar presente, y considerada siempre que sea posible.&lt;/p&gt;
&lt;h2 id=&#34;actualizaciones-incompatibles&#34;&gt;ACTUALIZACIONES INCOMPATIBLES&lt;/h2&gt;
&lt;p&gt;Una actualización que se descompone en pasos más pequeños, avisa al cliente de que es lo nuevo que viene y el por qué debe actualizarse a la nueva API. Un ejemplo de esto son los métodos deprecados, funcionan pero avisan de que se espera eliminar en futuras versiones. Los paquetes pueden proporcionar una forma de ofrecer a los clientes un acceso incremental a las actualizaciones. Introduciendo nuevas clases en un nuevo paquete, puedes darles el mismo nombre como las viejas clases. Por ejemplo, si puedo actualizar &lt;code&gt;org.junit.Assert&lt;/code&gt; en &lt;code&gt;org.junit.newandimproved.Assert&lt;/code&gt; , entonces los clientes sólo tienen que cambiar las declaraciones de importación para usar el nueva clase. Cambiar las importaciones es menos arriesgado e intrusivo que cambiar el código. Otra estrategia incremental es cambiar la API o la implementación, pero no ambas en la misma versión. Ésta versión intermedia, asociaría la nueva interfaz con el viejo código, o la vieja interfaz con el nuevo código, lo que daría más tiempo para afrontar y adaptarse al cambio. IDEs como Eclipse, ofrecen herramientas automatizadas para actualizar el código de cliente, de tal forma que añade archivos y mueve funcionalidad, con el fin de adaptarse a la nueva versión. Puedes reducir el costo de cambiar el código si los clientes pueden cambiar a tu funcionalidad mejorada con una simple operación de búsqueda/reemplazo. El cambio del nombre de un método, será más barato para los clientes si dejas los argumentos en el el mismo orden.&lt;/p&gt;
&lt;h2 id=&#34;formateando-un-cambio-compatible&#34;&gt;FORMATEANDO UN CAMBIO COMPATIBLE&lt;/h2&gt;
&lt;p&gt;Lo ideal sería que el código de cliente depende lo menor posible del framework, y cuando esto no sea posible (para eso está el framework), se debe intentar que la funcionalidad de la que dependa no sea propensa a cambios, algo que se consigue mediante reducir el número de detalles visibles y mostrar detalles reveladores que son menos probables de cambiar y entregar funcionalidad útil, mientras se mantiene la libertad de cambiar el diseño.&lt;/p&gt;
&lt;h2 id=&#34;clase-libreria&#34;&gt;CLASE LIBRERIA&lt;/h2&gt;
&lt;p&gt;Un estilo simple y que considera bastante el futuro de la API es la clase de biblioteca. Representan toda su funcionalidad como llamadas de procedimiento con parámetros simples, entonces los clientes están bien aislados de futuros cambios. Cuando liberas un nuevo de su clase de biblioteca sólo necesita asegurarse de que todos los métodos existentes trabajan igual que antes. La nueva funcionalidad se representa como nueva o nuevas variantes de los procedimientos existentes. La clase Colecciones es un ejemplo de una API representada como una clase de biblioteca. Los clientes la utilizan invocando métodos estáticos, no instanciándola. Nuevas versiones de las clases de colección añaden nuevos métodos estáticos, dejando a los existentes funcionalidad sin cambios.&lt;/p&gt;
&lt;h2 id=&#34;objetos&#34;&gt;&lt;strong&gt;OBJETOS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Asumiendo que vamos a representar nuestro framework como objeto, existe una tarea más dura que equilibra la simplicidad y la complejidad, la flexibilidad y la especificidad, así que el framework debe ser a la vez útil que útil, estable para los clientes y evolutivo para usted. El truco es, en la medida que puedas manejarlo, escribir el framework para que los clientes dependen sólo de detalles que no es probable que cambien.&lt;/p&gt;
&lt;h2 id=&#34;estilo-de-uso&#34;&gt;ESTILO DE USO&lt;/h2&gt;
&lt;p&gt;Los frameworks pueden soportar tres estilos principales de uso: instanciación, configuración,e implementación. Cada estilo ofrece diferentes combinaciones de usabilidad, flexibilidad y estabilidad. También puedes mezclar estos estilos en un solo frameworks para proveer un mejor equilibrio entre la libertad de diseño para los desarrolladores y el poder para los clientes. El estilo más simple de uso es la instanciación. Cuando quiero un socket de servidor escribo:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;new ServerSocket()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Una vez instanciado, funciona invocando métodos en él. La instanciación funciona cuando la única forma de variación que los clientes necesitan es la variación de los datos, no la lógica. La configuración es un estilo de uso más complejo y flexible en el que el cliente crea objetos usando el framework, pero les pasa sus propios objetos para ser llamados en tiempos determinados. Un TreeSet , por ejemplo, puede ser llamado con un Comparator para permitir una clasificación arbitraria de los elementos. La configuración es más flexible que la instanciación porque puede acomodar las variaciones en la lógica así como en los datos. Sin embargo, ofrece menos libertad al programador, porque una vez que empiezas a llamar a un objeto del cliente, surge la necesidad de seguir llamando a ese objeto de la misma manera y al mismo tiempo o arriesgarse a romper el código del cliente. Cuando los clientes necesitan más formas de enganchar su propia lógica que las proporcionadas por configuración, entonces puede ofrecer el uso por implementación. En la implementación,los clientes crean sus propias clases que son utilizadas por el framework. Siempre y cuando la clase de cliente extienda de una clase del framework o implemente una interfaz, el cliente es libre de incluir cualquier lógica que le guste. JUnit mezcla los cuatro estilos de uso:&lt;/p&gt;
&lt;p&gt;JUnitCore es una clase de biblioteca con un método de ejecución estática(Class&amp;hellip;) para ejecutar todas las pruebas en todas las clases. JUnitCore es también instancial, con instancias que proporcionan un control más fino sobre la prueba ejecutando y notificando. Las anotaciones @Test , @Before y @After son una forma de configuración donde la prueba los escritores pueden identificar bits de código para ser ejecutados en ciertos momentos. La anotación @RunWith es una forma de implementación, donde los escritores de pruebas que necesitan un comportamiento de prueba no estándar pueden implementar sus propios corredores.&lt;/p&gt;
&lt;h2 id=&#34;abstracción&#34;&gt;ABSTRACCIÓN&lt;/h2&gt;
&lt;p&gt;Sobre que forma es mejor para implementar el framework, introduce la cuestión de si representar las entidades abstractas como una interfaz o una superclase común. Cada enfoque tiene ventajas y desventajas para los desarrolladores y clientes. Los dos enfoques tampoco son mutuamente excluyentes. Un framework puede ofrecer a los clientes tanto una interfaz como una implementación predeterminada de esa interfaz.&lt;/p&gt;
&lt;h2 id=&#34;interfaz&#34;&gt;INTERFAZ&lt;/h2&gt;
&lt;p&gt;La gran ventaja de ofrecer a los clientes una interfaz es que las interfaces registran pocos detalles. Los clientes no pueden usar &amp;ldquo;accidentalmente&amp;rdquo; más del framework de lo previsto. Sin embargo, esta protección tiene un costo. Mientras las interfaces permanezcan sin cambios están bien, pero introducir un nuevo método en una interfaz rompen todas las implementaciones cliente de esa interfaz. Una variación de las interfaces que proporciona cierta flexibilidad adicional a costa de cierta complejidad son las interfaces versionadas. Si se añaden operaciones a un interfaz, rompes el código del cliente. Sin embargo, puedes crear una subinterfaz y poner las nuevas operaciones allí. Los clientes pueden pasar objetos que se ajusten a la nueva donde se espera la antigua interfaz, pero el código existente continúa trabajando como antes.&lt;/p&gt;
&lt;h2 id=&#34;superclase&#34;&gt;SUPERCLASE&lt;/h2&gt;
&lt;p&gt;Las ventajas de este estilo son las inversas a las de las interfaces: las clases pueden especificar más detalles que las interfaces, pero añadir una operación a una superclase no rompe el código existente. A diferencia de las interfaces, con la superclases, las clases de cliente sólo pueden extender una clase del framework. Reducir el máximo el numero de detalles visibles para el cliente, nos garantiza una menor limitación en un cambio de diseño futuro. Los campos en un framework siempre deben ser privados. Si los clientes necesitan acceso a los datos de los campos, facilítenlo a través de getters. Examine cuidadosamente sus métodos y haga públicos sólo los métodos esenciales o, mejor aún, protegido. Seguir estas reglas permite definir una superclase que expone sólo unos pocos detalles más que la interfaz equivalente pero permite los clientes más flexibilidad para engancharse a su propia lógica. La palabra clave abstract te da una forma de comunicarte con los clientes donde ellos se requieren para llenar la lógica. Proporcionar una aplicación razonable por defecto de métodos donde sea posible para los clientes la posibilidad de empezar fácilmente. La palabra clave final cuando se aplica a una clase evita que los clientes creen subclases, reforzando la instanciación o el estilo de configuración del uso del framework. Los marcos que se organizan en varios paquetes necesitan una declaración de visibilidad que diga, &amp;ldquo;Visible dentro del marco pero no a los clientes&amp;rdquo;. Una solución a este problema es separar los paquetes en publico e interno y comunicar la diferencia incluyendo al nombre &amp;ldquo;internal&amp;rdquo; en las rutas de paquetes internos. Los paquetes internos proporcionan un punto intermedio entre revelar y ocultar detalles del marco. Los clientes pueden elegir por sí mismos cuánta responsabilidad quieren aceptar para construir encima de partes potencialmente inestables del framework.&lt;/p&gt;
&lt;h2 id=&#34;sin-creación&#34;&gt;SIN CREACIÓN&lt;/h2&gt;
&lt;p&gt;La opción más simple y menos poderosa es prohibir a los clientes crear los objetos de la estructura directamente. Los operadores en un método de factoría pueden garantizar que los eventos están bien formados. La limitación de no permitir que los clientes creen instancias de marco es que impide los usos legítimos de las clases.&lt;/p&gt;
&lt;h2 id=&#34;método-estático-factoría&#34;&gt;MÉTODO ESTÁTICO (FACTORÍA)&lt;/h2&gt;
&lt;p&gt;Añaden cierta complejidad a la creación de objetos para los clientes, pero dejan al desarrollador más libertad para futuros cambios de diseño. Si un cliente creó una lista diciendo &lt;code&gt;ArrayList.create()&lt;/code&gt; en lugar de usar un constructor, entonces la clase concreta del objeto devuelto podría ser cambiada sin que afecta al código de cliente. Otra ventaja de las factorías estáticas es que te dan la oportunidad de comunicar claramente a los clientes el significado de las variaciones en la construcción.&lt;/p&gt;
&lt;h2 id=&#34;objeto-de-métodos-estáticos-factoría&#34;&gt;OBJETO DE MÉTODOS ESTÁTICOS (FACTORÍA)&lt;/h2&gt;
&lt;p&gt;También puedes representar la creación de instancias enviando mensajes a una fábrica en lugar de invocar un método estático. Por ejemplo, un CollectionFactory podría proporcionan métodos para crear todos los diferentes tipos de colecciones. Podría ser usado así:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Collections.factory().createArrayList()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Un objeto de fábrica proporciona incluso más flexibilidad que una método estático pero es más complejo de leer. Necesitas rastrear la ejecución del código para ver cuando se crean ciertas clases. Mientras la fábrica sólo se acceda globalmente, un objeto de fábrica no proporcionan más flexibilidad que los métodos de fábrica estáticos.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Patrón decorator</title>
        <link>https://raulpadilladelgado.github.io/blog/p/patr%C3%B3n-decorator/</link>
        <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/patr%C3%B3n-decorator/</guid>
        <description>&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 126; 
			flex-basis: 302px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/patr%C3%B3n-decorator/images/400px-Decorator_UML_class_diagram.svg.png&#34; data-size=&#34;400x317&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/patr%C3%B3n-decorator/images/400px-Decorator_UML_class_diagram.svg.png&#34;
			width=&#34;400&#34;
			height=&#34;317&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Decorator_UML_class_diagram.svg/400px-Decorator_UML_class_diagram.svg.png&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Es un patrón de diseño que nos va a permitir agregar funcionalidad a un objeto existente sin cambiar su estructura. Se busca poder añadir dinámicamente funcionalidad a un Objeto. Esto nos permite no tener que crear sucesivas clases que hereden de la primera incorporando la nueva funcionalidad, sino otras que la implementan y se asocian a la primera.&lt;/p&gt;
&lt;p&gt;Un gran momento para aplicarlo es cuando tenemos una clase que contiene métodos que realizan algo más que lógica de negocio. Dicha lógica no tiene que ver con la intencionalidad del método, pero si es cierto que necesitamos que éste ahí. Buscamos el desacople de funcionalidades que no deberían estar realizando ciertos métodos de una clase, ya que dichos requisitos responden a una forma de implementación que puede variar en el futuro, y el hecho de tenerlo separado en otros métodos que añaden funcionalidad a uno principal, nos permite cambiar fácilmente la funcionalidad, sin tener que realizar el cambio en muchos lugares del código, lo que nos aporta una gran mantenibilidad del código.&lt;/p&gt;
&lt;p&gt;La forma típica de implementar éste patrón en Java sería de la siguiente forma. Existe una interfaz&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;**public** **interface** **Vehicle** {**void** **start**();}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;, la cual implementa la clase que especifica&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;**public** **class** **Car** **implements** Vehicle {
	**public** CarType carType;

	**public** **Car**(CarType carType) {
		**this**.carType = carType;
	}

	**public** **void** **start**() { System.out.print(&amp;#34;Arrancando&amp;#34;);}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;, y la clase abstracta que define como se añaden los decoradores a la funcionalidad base.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;**public** **abstract** **class** **Decorator** **implements** Vehicle {
	**private** Car car;

	**public** **Decorator**(Car car) {
		**this**.car = car;
	}

	**public** **void** **start**() { car.start();}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Trás ésto, todos los decoradores que vayamos a realizar, deben extender de la clase abstracta anterior, y llamar al método base de la clase padre.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class EnergyDecorator extends Decorator {
    private Car car;

    public EnergyDecorator(Car car) {
        super(car);
        this.car=car;
    }

    public void start() {
        super.start();
        if(car.carType==CarType.ELECTRIC){System.out.println(&amp;#34; con energía eléctrica&amp;#34;);}
        if(car.carType==CarType.WIND){System.out.println(&amp;#34; con energía eólica&amp;#34;);}
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Para crear los objetos tendríamos una factoría,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class CarFactory {
    public static void startCar(){
        new Car(CarType.DEFAULT).start();
    }
    public static void startEnergySpecificCar(CarType carType) {
        new EnergyDecorator(new Car(carType)).start();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;y finalmente lo comprobaríamos.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class CarShould {
    @Test
    void start_with_default_car() {
        CarFactory.startCar(); //-&amp;gt; Arrancando
    }

    @Test
    void start_with_electric_car() {
        CarFactory.startEnergySpecificCar(CarType.ELECTRIC); // -&amp;gt; Arrancando con energía eléctrica
    }

    @Test
    void start_with_wind_car() {
        CarFactory.startEnergySpecificCar(CarType.WIND); // -&amp;gt; Arrancando con energía eólica
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Domina los JSON con GSON</title>
        <link>https://raulpadilladelgado.github.io/blog/p/domina-los-json-con-gson/</link>
        <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/domina-los-json-con-gson/</guid>
        <description>&lt;p&gt;Puede darse la situación de que en nuestra aplicación Java, necesitemos atender peticiones representadas en JSON, transformarlas a objetos, tratar los datos y devolver una respuesta en JSON. Los servicios REST o los Websockets son un buen ejemplo de esto.&lt;/p&gt;
&lt;p&gt;Para resolver este problema podemos implementar &amp;ldquo;a mano&amp;rdquo; la lógica de negocio para serializar y deserializar nuestro JSON, lo que supodrá un esfuerzo considerable. O podríamos hacer uso de alguna libería diseñada para este propósito como puede ser Gson.&lt;/p&gt;
&lt;p&gt;Gson es una biblioteca de código abierto para el lenguaje de programación Java que permite la serialización y deserialización entre objetos Java y su representación en notación JSON.&lt;/p&gt;
&lt;p&gt;Lo primero es añadir al pom.xml la &lt;a class=&#34;link&#34; href=&#34;https://www.blogger.com/u/1/blog/post/edit/3160943841242931334/7375304454513064087#&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dependencia Gson&lt;/a&gt;, que la podemos encontrar en Maven Repository.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;**&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;**com.google.code.gson**&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;**gson**&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;**2.8.6**&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;**
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ya podríamos empezar a usar dicha librería. Voy a mostrar lo que fue mi uso de la librería desarrollando una clase que convertía tanto &lt;strong&gt;desde&lt;/strong&gt; JSON como &lt;strong&gt;hacia&lt;/strong&gt; JSON, en el que el punto fuerte era éste último método, en el que le tuve que especificar por parámetro sobre que tipo de objeto se iba a realizar la conversión de un JSON a un objeto específico para lograr que la conversión fuese exitosa. En el otro método, simplemente le paso el objeto que quiero convertir a JSON.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;JsonUtils&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;convertToJson&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Gson&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gson&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Gson&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gson&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toJson&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;convertFromJson&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Gson&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gson&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Gson&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gson&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;fromJson&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>Docker basics</title>
        <link>https://raulpadilladelgado.github.io/blog/p/docker-basics/</link>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/docker-basics/</guid>
        <description>&lt;h1 id=&#34;imágenes-vs-contenedores&#34;&gt;&lt;strong&gt;Imágenes vs Contenedores&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Para entender claramente ambos conceptos, me ayuda asemejarlos a la programación habitual, entendiendo que las imágenes son como clases y los contenedores como los objetos instanciados de las clases.&lt;/p&gt;
&lt;p&gt;La imagen contiene la base para crear un contenedor, y éste carga la imagen para empezar a funcionar. Una imagen puede ser cargada en todos los contenedores que queramos, igual que un contenedor puede cargar varias imágenes. Cualquier cambio realizado en sistema de archivos del contenedor no afecta a la imagen, pues la imagen solo se usa para la creación del contenedor.&lt;/p&gt;
&lt;p&gt;Docker descarga las imágenes que invocamos en la consola desde &lt;a class=&#34;link&#34; href=&#34;https://www.blogger.com/u/1/blog/post/edit/3160943841242931334/3529863101784814090#&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DockerHub&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;gestión-de-contenedores&#34;&gt;&lt;strong&gt;Gestión de contenedores&lt;/strong&gt;&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*------------------------------------*/
/*Crear contenedor*/
docker run ubuntu
/*------------------------------------*/
/*Crear contenedor en modo interactivo
(se controla desde la consola actual)
(ubuntu:imagen, bash:comando)*/
docker run -ti ubuntu bash
/*------------------------------------*/
/*Crear contenedor en segundo plano*/
docker run -ti -d ubuntu bash
/*------------------------------------*/
/*Acceder a contenedor ejecutado en
segundo plano*/
docker exec -ti nombreDeContenedor|ID
/*------------------------------------*/
/*Crear contenedor que se borra
al finalizar su ejecución*/
docker run --rm ubuntu bash
/*------------------------------------*/
/*Arrancar contenedor*/
docker start nombreDeContenedor|ID
/*------------------------------------*/
/*Parar contenedor*/
docker stop nombreDeContenedor|ID
/*------------------------------------*/
/*Listar contenedores activos*/
docker ps
/*------------------------------------*/
/*Listar contenedores activos e 
inactivos*/
docker ps -a
/*------------------------------------*/
/*Borrar contenedores parados*/
docker container prune -f
/*------------------------------------*/
/*Borrar un contenedor*/
docker rm nombreDeContenedor|ID
/*------------------------------------*/
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;gestión-de-imágenes&#34;&gt;&lt;strong&gt;Gestión de imágenes&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&#34;docker-build-y-dockerfile&#34;&gt;Docker Build y Dockerfile&lt;/h2&gt;
&lt;p&gt;El comando docker build es el comando que ejecuta las instrucciones del fichero dockerfile.&lt;/p&gt;
&lt;h2 id=&#34;archivo-dockerfile&#34;&gt;Archivo Dockerfile&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; → Instrucción que inicializa el sistema de ficheros a usar.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt; → Ejecuta un comando dentro del sistema de ficheros.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WORKDIR&lt;/code&gt; → Directorio del sistema de ficheros donde se ejecutaran los comandos.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt; → Establecer variables de entorno.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt; → Puerto en el que se expondrá la imagen.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VOLUME&lt;/code&gt; → Especifica un volumen para nuestro contenedor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;COPY&lt;/code&gt; → Copiar archivo de un directorio en otro.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ENTRYPOINT | CMD&lt;/code&gt; → El entrypoint recibe el comando de cmd. cmd serían los argumentos de entrypoint.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM ubuntu:latest
RUN apt-get update -y
RUN apt-get install -y python-pip python-dev
WORKDIR /app
ENV DEBUG=True
EXPOSE 80
VOLUME /data
COPY . /app
RUN pip install -r requirements.txt
ENTRYPOINT [&amp;#34;python&amp;#34;]
CMD [&amp;#34;app.py&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;comandos-para-imágenes&#34;&gt;Comandos para imágenes&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*------------------------------------*/
/*Listar imagenes*/
docker images
/*------------------------------------*/
/*Descargar imagen a local*/
docker pull ubuntu
/*------------------------------------*/
/*Borrar todas las imagenes en local*/
docker images prune --all
/*------------------------------------*/
/*Borrar una imagen en local*/
docker rmi nombreDeImagen
/*------------------------------------*/
/*Borrar imagenes &amp;#34;basura&amp;#34;
(no tiene tag o nombre y no esta
referenciada por ningún contenedor)*/
docker images prune -f
/*------------------------------------*/
/*Taggear una imagen*/
docker tag nombreDeImagen usuario/ubuntu:0.1.0
/*------------------------------------*/
/*Iniciar sesion en DockerHub*/
docker login
/*------------------------------------*/
/*Subir imagen a DockerHub*/
docker push nombreDeImagen
/*------------------------------------*/
/*Contruir imagen a partir de receta
(fichero Dockerfile)
(para el directorio actual)*/
docker build .
/*------------------------------------*/
/*DOCKERFILE
Para crear imagen siguiendo pasos*/
FROM ubuntu
RUN apt-get update
RUN apt-get install -y ineutils-ping
RUN apt-get install -y nettools
/*------------------------------------*/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Docker almacenará en caché los resultados de la primera compilación de un Dockerfile, lo que permitirá que las compilaciones posteriores serán súper rápidas. En cada aparición de un comando RUN en el Dockerfile, Docker creará y confirmará una nueva capa en la imagen.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/******************************************/
/*Comando que se ejecuta al iniciar la imagen en un contenedor*/
CMD echo &amp;#34;hello world&amp;#34;
/******************************************/
/*Ejecutar un comando pasado como parametro a la ejucción de un contenedor*/
docker run --rm test echo &amp;#34;goodbye&amp;#34;
/******************************************/
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;diferencia-entre-cmd-y-entrypoint&#34;&gt;&lt;strong&gt;¿Diferencia entre CMD y ENTRYPOINT?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Con CMD considera que lo que pasemos no debe formar parte de la construcción, por lo que si otro comando es pasado al contenedor interfiere con lo anterior será sobreescrito, sin embargo con entrypoint se mantendría, ya que pasa a formar parte de la construcción del contenedor.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/******************************************/
/*Añadir un ENTRYPOINT a un contenedor*/
docke run --rm --entrypoint=&amp;#34;&amp;#34; test bash
/******************************************/
/*Información extensa*/
docker container inspect nombreDeContenedor
/******************************************/
/*Listar imágenes*/
docker images ls
/******************************************/
/*Borrar volumenes*/
docker volume rm nombreDeVolumen
/******************************************/
/*Definir una red, nombre, nombre de host para un contenedor*/
docker run --rm --network=none
--name nombreDeContenedor
--hostname nombreDeHost
/******************************************/
/*Crear una red*/
docker network create test
/******************************************/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Docker garantiza el aislamiento de contenedores hacía otros contenedores que están en distintas redes.&lt;/p&gt;
&lt;h1 id=&#34;docker-compose&#34;&gt;DOCKER COMPOSE&lt;/h1&gt;
&lt;p&gt;Compose es una herramienta para definir y ejecutar aplicaciones multicontenedores en Docker. Utiliza un archivo YAML para configurar los servicios de su aplicación. Luego, con un solo comando, crea e inicia todos los servicios desde su configuración.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Defina el entorno de su aplicación con un Dockerfile para que pueda reproducirse en cualquier lugar.&lt;/li&gt;
&lt;li&gt;Defina los servicios que componen su aplicación docker-compose.yml para que puedan ejecutarse juntos en un entorno aislado.&lt;/li&gt;
&lt;li&gt;Ejecutar docker-compose up y compose inicia y ejecuta toda su aplicación.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ejemplo de archivo docker-compose.yml&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;version: &amp;#39;2.0&amp;#39;
services:
  web:
    build: .
    ports:
    - &amp;#34;5000:5000&amp;#34;
    volumes:
    - .:/code
    - logvolume01:/var/log
    links:
    - redis
  redis:
    image: redis
volumes:
  logvolume01: {}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;otros-comandos&#34;&gt;Otros comandos&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;docker-compose config&lt;/code&gt; → verificar que nuestro compose está correctamente estructurado&lt;/p&gt;
&lt;p&gt;Arrancar servicios con docker compose → &lt;code&gt;docker-compose up&lt;/code&gt; &lt;code&gt;docker-compose ls&lt;/code&gt; → listar servicios activos&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-compose exec php bash&lt;/code&gt; → entrar en servicio activo&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker-compose down&lt;/code&gt; → Stops containers and removes containers, networks, volumes, and images created by up.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Kata template engine</title>
        <link>https://raulpadilladelgado.github.io/blog/p/kata-template-engine/</link>
        <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/kata-template-engine/</guid>
        <description>&lt;p&gt;Recientemente, he realizado una kata en Java, que consistía en implementar un parseador de plantillas.&lt;/p&gt;
&lt;p&gt;Existe un método que recibe como parámetros la plantilla (String) a parsear, y un diccionario (Map) con todas las claves que vamos a sustituir en la cadena anterior. Es éste método el encargado de cambiar cada variable en la cadena por cada variable en el diccionario.&lt;/p&gt;
&lt;p&gt;Para el desarrollo del ejercicio, seguí la metodología de TDD, por lo que primero expuse una serie de casos en los que se definen como se debería comportar éste parseador testando la salida que devuelve con lo que esperamos, y poco a poco, realizando un test y el código justo y necesario para cada caso, fui viendo como llevar casos muy específicos hasta casos muy generales, llegando hasta la iteración sólo en el momento necesario, para no tener a una solución muy complicada desde el principio por intentar precipitarse en generalizar cuando solo necesitamos cubrir un caso específico.&lt;/p&gt;
&lt;p&gt;Desarrollar de ésta forma, me aporta el control del problema, además, me brinda tanto la seguridad de que estoy creando una solución funcional como simple y legible. Gracias a que fue desarrollada en su mayoría en pair programming se pudo exponer una serie de casos de prueba que cubrían muy bien el método a testear.&lt;/p&gt;
&lt;p&gt;Por aquí comparto mi desarrollo en la kata mediante un repositorio de GitHub.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.blogger.com/u/1/blog/post/edit/3160943841242931334/3118335620785995212#&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TemplateEngineKata(&lt;/a&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/raulpadilladelgado/TemplateEngineKata&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/raulpadilladelgado/TemplateEngineKata&lt;/a&gt;)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Análisis del libro &#34;Diseño ágil con TDD&#34;</title>
        <link>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-dise%C3%B1o-%C3%A1gil-con-tdd/</link>
        <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/an%C3%A1lisis-del-libro-dise%C3%B1o-%C3%A1gil-con-tdd/</guid>
        <description>&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://d2sofvawe08yqg.cloudfront.net/tdd-en-castellano/hero?1576861322&#34; &gt;
		&lt;img src=&#34;https://d2sofvawe08yqg.cloudfront.net/tdd-en-castellano/hero?1576861322&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Portada libro&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Portada libro&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;introducción&#34;&gt;&lt;strong&gt;INTRODUCCIÓN&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&amp;ldquo;Diseño Ágil con TDD&amp;rdquo;, por Carlos Ble, es un libro muy interesante que nos enseña como implementar Test-Driven Development en el desarrollo de código. Muestra como basar nuestro código en los Test que escribimos, y no al revés. A continuación comparto mis experiencias leyendo éste libro.&lt;/p&gt;
&lt;h1 id=&#34;que-beneficios-nos-aporta&#34;&gt;&lt;strong&gt;¿QUE BENEFICIOS NOS APORTA?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Se presentan grandes beneficios de codificar de ésta forma. Se habla de conseguir un código simple, que haga lo que necesitamos para cada momento, que cuando falle nos de un correcto y constante feedback de porqué eso está ocurriendo, así como un código legible y fácil de mantener. Obliga a los programadores a pensar primero en cual es la solución que quieren conseguir antes de comenzar a implementarla, y como consecuencia llegar a manejar diversas formas de conseguir lo que se desea teniendo en cuenta más casos de uso&lt;/p&gt;
&lt;p&gt;Un programador debería tener siempre el control del código, no tiene porque llevarse sorpresas. Cuando dedicamos tiempo a desarrollar pruebas nos estamos asegurando de que vamos a crear un código que implementa lo que cada caso de prueba requiere. Saber cuando va a fallar y por qué va a fallar nos da un control sobre el código que lo vuelve mantenible y mejorable. Incluso cuando nos esperamos un fallo en la aplicación, una prueba realizada con anterioridad nos puede estar diciendo que está fallando y por qué, por lo que nunca perdemos el sentido de lo que hace nuestra aplicación.&lt;/p&gt;
&lt;p&gt;El ciclo de crear un test aun sin implementar código para verlo fallar (rojo), desarrollar el código para ese caso de prueba, y finalmente verlo pasar la prueba (verde) nos hace tener ese control de que sabemos lo que están haciendo nuestros métodos en todo momento. Cuando sabemos aplicar ésto y entedemos el porqué añadir pruebas a nuestros proyectos, tenemos un código mantenible, ese que facilita de la vida al programador cuando tiene que arreglar fallos en la aplicación. Por otro lado implementar TDD también comprende los ciclos de refactorización. Tras ver nuestra prueba en verde, sabemos que tenemos un código correcto y funcional, por lo que es el momento perfecto para tratar de transformar el código a uno más simple y legible. No se trata de cambiar la funcionalidad del código, ya que hemos visto que es correcta, se trata de que haga lo mismo pero con una presentación más amigable, que cuando se lea parezca que cuenta una historia fácil de seguir.&lt;/p&gt;
&lt;p&gt;Un punto positivo de aplicar TDD es que vamos implementando sólo que necesitamos en cada momento, por lo que evitamos añadir funcionalidades &amp;ldquo;extra&amp;rdquo; que no son necesarios para el estado actual de la aplicación, una práctica que llegar a complicar mucho el código así como su compresión y el control sobre él.&lt;/p&gt;
&lt;h1 id=&#34;como-debemos-testear&#34;&gt;&lt;strong&gt;¿COMO DEBEMOS TESTEAR?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Para nuestros test usamos BDD (Desarrollo guiado por el comportamiento), que nos dice que nuestro test debe seguir el patrón Given-When-Then(Preparación, ejecución y validación):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given → Dado unos elementos&amp;hellip;&lt;/li&gt;
&lt;li&gt;When → &amp;hellip;realiza ésto&amp;hellip;&lt;/li&gt;
&lt;li&gt;Then → &amp;hellip;y espero que ocurra lo siguiente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Gracias a BDD, nuestros test tienen una estructura clara, sencilla y concreta, cuentan una historia. Una persona que no sepa programar debería entender que pretende hacer el test, por lo que buscamos el menor numero de líneas posibles en cada bloque. Para lograr que nuestro bloque &amp;lsquo;Then&amp;rsquo; compruebe varios factores pero que aparezca en una sola línea, podemos crear nuestra propia aserción:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*Llamada*/
assertThatList(list).isExactly(10, 20)

/*Implementación*/
fun assertThatList(list: List&amp;lt;Number&amp;gt;) : ListMatchers {
   return ListMatchers(list)
}

class ListMatchers(val actualList: List&amp;lt;Number&amp;gt;) {
  fun isExactly(vararg items: Number){
  
assertThat(items.size).isEqualTo(actualList.size)
   for(i in items.indices){
 assertThat(items[i]).isEqualTo(actualList[i])
   }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Los nombres de los test deben tener un nombre significativo que puede formar un juego de palabras con el nombre de la clase para formar una frase con sentido y que aclare la intención del test. Deben ser más abstractos que su contenido, esto es no dar detalle de la implementación.&lt;/p&gt;
&lt;p&gt;Tenemos la opción de crear un método decorado con la anotación @Before, que significa que el framework ejecutará ese método justo antes de cada uno de los test. Si hay N test, se ejecutará&lt;/p&gt;
&lt;p&gt;N veces. Está pensado así para garantizar que los test no se afecten unos a los otros.Cuando recurrimos a debug para encontrar un error en nuestro test, estamos perdiendo el control del flujo del programa, por lo que la mejor solución es buscar una solución alternativa a lo que estamos haciendo que si comprendamos y que no de lugar a errores inesperados.En la misión de refactorizar nuestro gran aliado son los IDE, que realizan de forma automática las transformaciones como extraer variables, y que el punto fuerte de todo esto es evitar el error humano. No que es que sea una simple ayuda realizar refactorización automática, es que es lo aconsejable, ya que nos garantiza que un cambio realizado en una clase se efectuará en los demás sitios donde esté referenciado, algo fundamental para romper nuestro código.Por mucha cobertura de código que obtengamos realizando test a nuestras líneas de código, no nos garantiza una efectividad del 100%. Para solventar ésto, el testeo automático se debe complementar con testeo exploratorio, ese tipo de pruebas que realizamos manualmente y que prueban la aplicación por completo como si se tratase del usuario final. Cuando aplicamos TDD no buscamos reeemplazar las pruebas manuales, solo tratamos de tener que hacerlo lo menor posible cuando algo se puede automatizar facilmente para así no perder tiempo y dinero en algo repetitivo.&lt;/p&gt;
&lt;p&gt;Incluso en el testeo exploratorio se pueden automatizar algunas partes. Para lograr ésto tenemos los test basado en propiedades, que no definen datos concretos, si no que en su lugar se definen propiedades o casos que debe cumplir el código que se va a probar, como el caso de que el resultado de una suma debe ser mayor que cualquiera de sus sumandos. Las herramientas que ofrecen este tipo de automatización generan un gran número de combinaciones complejas con el fin de probar todos los posibles caminos llegando a casos extremos en los que un programador no puede estar pensando.&lt;/p&gt;
&lt;h1 id=&#34;principios-necesarios&#34;&gt;&lt;strong&gt;PRINCIPIOS NECESARIOS&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;La premisa de la prioridad de transformación (TPP) es un factor fundamental para realizar TDD, y nos habla de implementar el código más sencillo para un test que está en rojo, escribir código solo para que dicho test pase, sin generalizar para otros casos. El porqué hacerlo así se debe a que te obliga a ir pensando todos los casos e ir implementando poco a poco lo que necesites, sin tener que añadir más de lo que puedes llegar a necesitar, o de añadir cosas que no comprendes porque todavía no has elaborado un caso de prueba para cierta funcionalidad. Cada test en verde debe producir una generalización en el código para otro caso de prueba nuevo. La clave para entender bien éste concepto es ver que un problema se descompone a su vez en muchos subproblemas que son los que vamos a ir resolviendo poco a poco, desde lo más sencillo, a lo más complicado.&lt;/p&gt;
&lt;p&gt;El principio de menor sorpresa, nos cuenta que el código debe hacer en todo momento lo que espera que haga, esto es, una función debe hacer lo que intuitivamente se espera al interpretar su nombre, parámetros, etc. Sin tener que entrar a ver como está implementada se debe tener la idea de que es lo que hace. Si una función hace lo que su nombre indica pero además otras cosas por detrás que no van a acorde con la misión de dicha función, es un código que genera sorpresas y que no deseamos tener. Para evitar que una función realice más cosas de las que le corresponden podemos recurrir a la separación de responsabilidades, llevando tal comportamiento a otra función que realice solo eso. Además, es importante tener el mismo nivel de abstracción en toda la función para que ningún bloque parezca mucho más complicado que otro visualmente.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*ANTES*/
r.wrap();
s.getText().concat(&amp;#34;! is the best.&amp;#34;);
 
/*DESPUÉS*/
r.wrap();
s.append(&amp;#34;! is the best.&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Para aplicar TPP, nos sirven de ayuda las trasformaciones que propone Robert C. Martin:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;{} –&amp;gt; nil: De no haber código a devolver nulo.&lt;/li&gt;
&lt;li&gt;nil -&amp;gt; constant: De nulo a devolver un valor literal.&lt;/li&gt;
&lt;li&gt;constant -&amp;gt; constant+: De un valor literal simple a uno más complejo.&lt;/li&gt;
&lt;li&gt;constant -&amp;gt; scalar: De un valor literal a una variable.&lt;/li&gt;
&lt;li&gt;statement -&amp;gt; statements: Añadir más líneas de código sin condicionales.&lt;/li&gt;
&lt;li&gt;unconditional -&amp;gt; if: Introducir un condicional&lt;/li&gt;
&lt;li&gt;scalar -&amp;gt; array: De variable simple a colección.&lt;/li&gt;
&lt;li&gt;array -&amp;gt; container: De colección a contenedor.&lt;/li&gt;
&lt;li&gt;statement -&amp;gt; recursion: Introducir recursión.&lt;/li&gt;
&lt;li&gt;if -&amp;gt; while: Convertir condicional en bucle.&lt;/li&gt;
&lt;li&gt;expression -&amp;gt; function: Reemplazar expresión con llamada a función.&lt;/li&gt;
&lt;li&gt;variable -&amp;gt; assignment: Mutar el valor de una variable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Algo que puede llegar a resultar chocante para un programador es que le digan que para trabajar correctamente con TDD debe dejar de pensar primero como un programador. ¿Entonces como debe actuar?, es sencillo, anteriormente he explicado que TDD nos hace ir paso a paso en el desarrollo de código para que así podamos pensar al detalle cada posible caso de prueba de la aplicación, entonces podemos decir que el programador que aplica TDD en su modus operandi siempre piensa primero como un analista de negocio que interpreta primero los posibles casos o reglas de negocio, y no como un programador que solo busca codificar cuanto antes la solución sin atender a pensar un poco como llegará hasta ahí.&lt;/p&gt;
&lt;p&gt;Para ilustrar mejor como sería aplicar TDD desde 0 podemos ver un pequeño ejemplo de una función que comprueba si una contraseña dada se considera fuerte o segura.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*EL CASO MÁS SIMPLE*/
describe(&amp;#39;The password strength validator&amp;#39;, () =&amp;gt; {
it(&amp;#39;considers a password to be strong when all requirements are met&amp;#39;, () =&amp;gt; {
expect(isStrongPassword(&amp;#34;1234abcdABCD_&amp;#34;)).toBe(true);
});
});

/*Y SU SOLUCIÓN PARA LLEGAR AL VERDE*/
function isStrongPassword(password){
return true;
}

/******************************************************************************/

/*UN CASO MÁS GENERAL*/
it(&amp;#39;fails when the password is too short&amp;#39;, () =&amp;gt; {
expect(isStrongPassword(&amp;#34;1aA_&amp;#34;)).toBe(false);
});

/*Y SU SOLUCIÓN PARA LLEGAR AL VERDE*/
function isStrongPassword(password){
return password.length &amp;gt;= 6;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Podemos ver como primero se contempló el caso más obvio el más simple, que no es otro que la contraseña cumpla todos los requisitos y no necesitamos más que devolver un true para que ésto sea verdad y pase. Más adelante ya se referencia un caso en el que la contraseña es muy corta y ya necesitamos hacer una comprobación para eso, por lo que aplicamos el mínimo código para comprobar si la contraseña pasada cumple la longitud requerida o no.&lt;/p&gt;
&lt;h1 id=&#34;técnicas-de-testeo&#34;&gt;&lt;strong&gt;TÉCNICAS DE TESTEO&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Pongamos el caso de que tenemos una función que queremos testear, pero ésta función llama a otra función. Nosotros queremos comprobar que la primera función funciona, por lo que la llamada a la segunda función simplemente está ahí porque forma parte de la implementación. En un caso en el que ambas funciones realizan algo sencillo no debería importar demasiado, pero si la segunda función realice un comportamiento complejo que requiera de un tiempo de ejecucción considerable no nos interesa que nuestro test gaste fuerzas en cosas que ya están testadas por otro lado. Cuando realizamos pruebas, podemos recurrir a simular objetos o funciones (Mocks), es decir, ese objeto lo tenemos disponible para usar en nuestro test pudiendo llamar a sus métodos, pero al ser una simulación no ejecutara los métodos realmente, por lo que si el método realizase llamadas a base de datos o interactuase con el sistema de archivos realmente no lo estaría haciendo. Además nos ofrece otras ventajas como son simular la entrada de parámetros, verificar que se llama una función, etc.&lt;/p&gt;
&lt;p&gt;Los frameworks de mocks son ideales para poder introducir test en un código legado sin caer en el intento. Cuando nos encontramos con ése código de una clase que tiene 20000 líneas y que llama a muchas otras clases o funciones, podemos ir haciendo mock de lo que no necesitamos testear por el momento, por lo que si en un momento determinado solo queremos probar una clase o sus métodos la mejor opción es mockear y ver que simplemente pasa lo correcto a llamadas externas que realiza.&lt;/p&gt;
&lt;p&gt;Para usar éstos Mocks en Java lo podemos realizar de la siguiente forma:&lt;/p&gt;
&lt;p&gt;Para que nuestra clase de los test pueda usar los métodos de Mockito tengo que extender de su clase.Para mockear un objeto basta con usar el método mock.Tenemos para usar método de mockitos como &amp;lsquo;when&amp;rsquo; con el cual podemos usar &amp;lsquo;any()&amp;rsquo; para simular que se le pasó lo que ese método necesita, y si combinamos el &amp;lsquo;when&amp;rsquo; con un &amp;rsquo;thenReturn&amp;rsquo; podemos comprobar que cuando se ejecuta devuelve lo que esperamos, o incluso un &amp;rsquo;thenThrow&amp;rsquo; para cuando lanza una excepción. Otro método interesante es &amp;lsquo;verify&amp;rsquo; que comprobará que se llama a la función de un objeto.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@ExtendWith(MockitoExtension.class)
class RegisterVolunteerActionShould {
    
    TemplateService templateService = mock(TemplateService.class);
    
    EmailService emailService = mock(EmailService.class);
    @Test
    void send_confirmation_email(){
when(templateService.getEmailConfirmationTemplate(any())).thenReturn(new EmailTemplate(template));

verify(emailService).sendEmail(any());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;También tenemos otro tipo de dobles que son los fakes, que bien puede ser una base de datos en memoria, repositorio en memoria, un servidor de correo que realmente no envía correo. Todo para que tengamos la funcionalidad más parecida o igual al artefacto real pero facilitándonos la vida en los test simplificando la forma en que hace las validaciones.&lt;/p&gt;
&lt;h1 id=&#34;errores-típicos-al-hacer-tdd&#34;&gt;&lt;strong&gt;ERRORES TÍPICOS AL HACER TDD&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Infravalorar el nombre de los test es una muy mala decisión. Pensar un buen nombre para nuestro test nos da un mayor conocimiento de lo que estamos haciendo y esperamos, además de que un test con un buen nombre que nada más leerlo ya sabes que debería estar haciendo, se convierte en documentación viva del proyecto para que no nos perdamos ni nosotros ni futuros desarrolladores que vean nuestro código.&lt;/p&gt;
&lt;p&gt;Como tanto cuidamos sus nombres, debemos cuidar su presentación. Es fundamental ir aplicando refactor tras ver los verdes para tener test legibles y fáciles de mantener. El código de nuestros test es tan importante como el de producción.&lt;/p&gt;
&lt;p&gt;Si tenemos un test en rojo está en rojo, no intentemos desviarnos ignorando que eso está ahí para no perder la eficacia de nuestra colección de test. Debemos arreglar ésto antes de seguir en el desarrollo del proyecto para garantizar que seguimos cubiertos en lo mayormente posible.&lt;/p&gt;
&lt;p&gt;Nuestro test solo busca verificar que se cumple un solo comportamiento del sistema, por lo que intentar meter otro tipo de comportamiento es un error. Solo así entenderemos mejor cuando falle el por qué lo hace, y estaremos teniendo a la vez una documentación precisa de como va avanzando nuestro código.&lt;/p&gt;
&lt;p&gt;No necesitamos complejidad ciclomática introduciendo bucles o condicionales en nuestros test, no queremos que nuestro test corra el riesgo de fallar por factores ajenos al comportamiento que está testando, así como no queremos un aumento de su complejidad.&lt;/p&gt;
&lt;h1 id=&#34;conclusión&#34;&gt;&lt;strong&gt;CONCLUSIÓN&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;TDD es una forma de codificar, cada cual es libre de seguir su metodología preferida, pero los beneficios están ahí. Cuando nos acostumbramos a trabajar de ésta forma y empezamos a ver su gran utilidad podemos desarrollar un código honesto, ese código que no pretende ser perfecto (porque eso no existe en la programación), si no que pretende tener un constante feedback con el desarrollador y ser lo más simple posible. Aprender a usarlo en un día no es posible, es la práctica quien hará de nosotros unos buenos analizadores de código que se plantean primero los problemas antes de saltar al estilo kamikaze a la acción. Para empezar, la mejor forma es realizarlo con katas (ejercicios cortos de programación) que nos obliguen a pensar en su solución, pudiendo así practicar desde lo más básico de TDD. El mob programming es perfecto para aprender más rápido, vemos las posibles soluciones de otros, sus puntos de vista y los contrastamos con los nuestros para determinar cual será la mejor solución o incluso darnos cuenta de a veces hay muchos casos que no se nos pasan por la cabeza.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Evita primitive obsession</title>
        <link>https://raulpadilladelgado.github.io/blog/p/evita-primitive-obsession/</link>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/evita-primitive-obsession/</guid>
        <description>&lt;p&gt;En la capa de lógica de nuestra aplicación se encuentra el código más personal del programador, ese código que no necesita basarse en primitivos para cumplir tipos de datos en transferencias porque es otra capa quien lo hará por ésta.&lt;/p&gt;
&lt;p&gt;Anteriormente he definido &amp;ldquo;el código más personal del trabajador&amp;rdquo;, y me refiero a que la estructura y legibilidad del código en ésta capa depende de como se implemente. Si no se nos exigen primitivos, podemos crear nuestros propios tipos para que cuando se lea el código mejoremos la expresividad y legibilidad, en una capa como la que menciono en la que se encuentra el núcleo de la aplicación y a su vez el código que más desarrollo y razonamiento necesita.&lt;/p&gt;
&lt;p&gt;Con tus propios tipos se te abre un mundo de posibilidades para simplificar tu código. En el siguiente ejemplo tenemos una clase que utiliza un String como un texto, y verifica que cuando sea null retorne un String vacío.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public String wordWrap(String text, int columnWidth){
      if (text==null){
          return &amp;#34;&amp;#34;;
      }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Esta clase no debería estar haciendo éstas comprobaciones, su misión es única, solo debería implementar la función para la que fue pensada, por lo que refactorizando lo anterior podemos crear nuestro propio tipo delegando la construcción a un método de factoría que llamará al constructor y que cuando reciba un null lo transforme a un String vacío. El porqué usar un método de factoría en lugar del constructor como tal se debe a que un constructor solo debería realizar lo que su nombre indica, construir un objeto, por lo que cualquier otro tipo de implementación dentro de éste solo conseguiría empeorar la legibilidad en nuestro código.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*Texto.java*/
public class Texto{
    private String texto;

    private Texto(String texto) 
    {this.texto=texto;}

    public static Texto crearTexto(String 
    texto){
    if (texto==null){texto=&amp;#34;&amp;#34;;}
    return new Texto(texto);
    }
}

/*application.java*/
public String wordWrap(Texto texto, int columnWidth){
      

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Listo, la clase en cuestión ya solo tiene que preocuparse de implementar su funcionalidad, ya que hemos llevado el String inicial a nuestro propio tipo &amp;ldquo;Texto&amp;rdquo;, el cuál tiene un método para realizar la anterior comprobación, y así la podemos extraer de &amp;ldquo;application,java&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Hemos creado un Value Object, lo que quiere decir que su estado no mutará a lo largo del tiempo no como si lo hace una entidad. Como ya hemos visto, este tipo de objetos nos permiten volver nuestro código más legible y bonito, logrando así que no solo nosotros lo entendamos perfectamente, si no que también lo haga una persona que no desarrolló dicho código.&lt;/p&gt;
&lt;p&gt;Cuando creamos nuestro propios tipos, debemos tener claro que cada clase debe tener una responsabilidad. Una clase que utiliza métodos de otra, debería estar accediendo a ésta para obtener datos, no para suplantar la identidad y desarrollar un comportamiento que no debería ser suyo. Estamos hablando de un code smell al que se le denomina Feature Envy. Para verlo más claro, en el siguiente ejemplo:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Phone {
    private final String unformattedNumber;
    public Phone(String unformattedNumber) {
        this.unformattedNumber = unformattedNumber;
    }
    public String getAreaCode() {
        return unformattedNumber.substring(0,3);
    }
    public String getPrefix() {
        return unformattedNumber.substring(3,6);
    }
    public String getNumber() {
        return unformattedNumber.substring(6,10);
    }
}

public class Customer...
    private Phone mobilePhone;
    public String getMobilePhoneNumber() {
        return &amp;#34;(&amp;#34; + 
            mobilePhone.getAreaCode() + &amp;#34;) &amp;#34; +
            mobilePhone.getPrefix() + &amp;#34;-&amp;#34; +
            mobilePhone.getNumber();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tenemos una clase &amp;ldquo;Phone&amp;rdquo; que tiene como propiedad un número de teléfono (String), y mediante métodos se puede acceder a dicha propiedad y extraer el &amp;ldquo;areacode&amp;rdquo;, &amp;ldquo;prefix&amp;rdquo; y &amp;ldquo;number&amp;rdquo;. Por otro lado, la clase &amp;ldquo;Customer&amp;rdquo;, que accede a clase anterior para conseguir un número de teléfono (String) accediendo a los métodos de ésta para implementar su propia función de formatear un número de teléfono a un estado más legible.&lt;/p&gt;
&lt;p&gt;Es un código funcional, pero ¿no debería ser la primera clase (Phone) la que desarrolle dicha funcionalidad?, al fin y al cabo es la clase que sabe operar con números de teléfono, por lo que la segunda clase (Customer) no debería saber hacer eso ya que su comportamiento es otro. Si arreglamos un poco lo anterior nos queda algo así:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class Phone {
    private final String unformattedNumber;
    public Phone(String unformattedNumber) {
        this.unformattedNumber = unformattedNumber;
    }
    
    public String getMobilePhoneNumber() {
        return &amp;#34;(&amp;#34; + 
            getAreaCode() + &amp;#34;) &amp;#34; +
            getPrefix() + &amp;#34;-&amp;#34; +
            getNumber();
    } 

    public String getAreaCode() {
        return unformattedNumber.substring(0,3);
    }
    public String getPrefix() {
        return unformattedNumber.substring(3,6);
    }
    public String getNumber() {
        return unformattedNumber.substring(6,10);
    }
}

public class Customer...
    private Phone mobilePhone;
    private String emailAddress;
    
    public String dataOfCustomer(){
        return mobilePhone.getMobilePhoneNumber() + emailAddress;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Se implementó lo anterior en la primera clase (Phone), por lo que ahora la segunda (Customer) accede a éste método para obtener lo que desea y hemos conseguido que cada clase cumpla con su misión sin que ninguna se entrometa en el funcionamiento de otro, y no intente implementar cosas que no debe conocer&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Lombok annotations</title>
        <link>https://raulpadilladelgado.github.io/blog/p/lombok-annotations/</link>
        <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/lombok-annotations/</guid>
        <description>&lt;p&gt;Lombok es una biblioteca Java que nos permite reemplazar las líneas de código que creamos para los constructores, getter y setter, entre otros, por unas simple anotaciones, por lo que cuando creamos una clase solo definimos las propiedades y ésta librería hace el resto.&lt;/p&gt;
&lt;p&gt;Con una simple anotación(@Data), Lombok inyectará los métodos getter y setter para cada propiedad, además de un equals, hashCode y toString.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 146; 
			flex-basis: 351px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/lombok-annotations/images/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&#34; data-size=&#34;400x273&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/lombok-annotations/images/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&#34;
			width=&#34;400&#34;
			height=&#34;273&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://1.bp.blogspot.com/&amp;ndash;CYarvynlTU/Xp24u-wh6zI/AAAAAAAAAKE/-pW3SGJ7qokEtPL93HgN911_hjvzZCnnQCLcBGAsYHQ/s400/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://1.bp.blogspot.com/&amp;amp;ndash;CYarvynlTU/Xp24u-wh6zI/AAAAAAAAAKE/-pW3SGJ7qokEtPL93HgN911_hjvzZCnnQCLcBGAsYHQ/s400/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://1.bp.blogspot.com/&amp;ndash;CYarvynlTU/Xp24u-wh6zI/AAAAAAAAAKE/-pW3SGJ7qokEtPL93HgN911_hjvzZCnnQCLcBGAsYHQ/s400/28ae0b5bfcf57c9972db8ecc6f9df091_f652.png&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;getter-y-setter&#34;&gt;&lt;strong&gt;@Getter y Setter&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Se usan para generar un getter y setter para un atributo específico.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*BEFORE*/
public boolean isEmployed() {
    return employed;
}
 
public void setEmployed(final boolean employed) {
    this.employed = employed;
}

/*AFTER*/
@Getter @Setter private boolean employed;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;nonnull&#34;&gt;&lt;strong&gt;@NonNull&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Cuando se coloca en un atributo para el que Lombok está generando un método de establecimiento, se generará una comprabación que dará como resultado un NullPointerException, si se proporciona un valor nulo.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*BEFORE*/
public class Family{

  private List&amp;lt;Person&amp;gt; members;
 
  public Family(List&amp;lt;Person&amp;gt; members) {
    if (members == null) throw new 
  java.lang.NullPointerException(&amp;#34;members&amp;#34;);
    this.members = members;
  }
 
  public void setMembers(List&amp;lt;Person&amp;gt; members) {
    if (members == null) throw new java.lang.NullPointerException(&amp;#34;members&amp;#34;);
    this.members = members;
  }
}

/*AFTER*/
@Setter @NonNull
private List&amp;lt;Person&amp;gt; members;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;tostring&#34;&gt;&lt;strong&gt;@ToString&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Genera una implementación del método toString. Imprimirá todos los atributos en forma de clave-valor, para todos los campos que no sean estáticos. Podemos personalizar su funcionamiento mediante los siguientes parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;includeFieldNames = false → No incluye el nombre de los atributos (clave)&lt;/li&gt;
&lt;li&gt;exclude=&amp;ldquo;nombreDeAtributo&amp;rdquo; → No incluye el atributo especificado&lt;/li&gt;
&lt;li&gt;of → Lista de atributos a imprimir&lt;/li&gt;
&lt;li&gt;callSuper = true → Junta el toString de la clase actual con el de la clase de la que extiende&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*BEFORE*/
public class Foo extends Bar {
    private boolean someBoolean = true;
    private String someStringField;
    private float someExcludedField;
 
    @java.lang.Override
    public java.lang.String toString() {
        return &amp;#34;Foo(super=&amp;#34; + super.toString() +
            &amp;#34;, someBoolean=&amp;#34; + someBoolean +
            &amp;#34;, someStringField=&amp;#34; + someStringField + &amp;#34;)&amp;#34;;
    }
}

/*AFTER*/
@ToString(callSuper=true,exclude=&amp;#34;someExcludedField&amp;#34;)
public class Foo extends Bar {
    private boolean someBoolean = true;
    private String someStringField;
    private float someExcludedField;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;equalsandhashcode&#34;&gt;&lt;strong&gt;@EQUALSANDHASHCODE&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Generará una implementación de los métodos equals y hashCode, para comparar un objeto de la clase con otro. Le podemos especificar una serie de parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exclude=&amp;ldquo;nombreDeAtributo&amp;rdquo; → No compara por el atributo especificado&lt;/li&gt;
&lt;li&gt;of → Lista de atributos a comparar&lt;/li&gt;
&lt;li&gt;callSuper = true → Compara también por la clase de la que extiende&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*BEFORE*/
public class Person extends SentientBeing {
 
    enum Gender {
        /*public static final*/ Male /* = new Gender() */,
        /*public static final*/ Female /* = new Gender() */;
    }
    @NonNull
    private String name;
    @NonNull
    private Gender gender;
    private String ssn;
    private String address;
    private String city;
    private String state;
    private String zip;
 
    @java.lang.Override
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (o == null) return false;
        if (o.getClass() != this.getClass()) return false;
        if (!super.equals(o)) return false;
        final Person other = (Person)o;
        if (this.name == null ? other.name != null : !this.name.equals(other.name)) return false;
        if (this.gender == null ? other.gender != null : !this.gender.equals(other.gender)) return false;
        if (this.ssn == null ? other.ssn != null : !this.ssn.equals(other.ssn)) return false;
        return true;
    }
 
    @java.lang.Override
    public int hashCode() {
        final int PRIME = 31;
        int result = 1;
        result = result * PRIME + super.hashCode();
        result = result * PRIME + (this.name == null ? 0 : this.name.hashCode());
        result = result * PRIME + (this.gender == null ? 0 : this.gender.hashCode());
        result = result * PRIME + (this.ssn == null ? 0 : this.ssn.hashCode());
        return result;
    }
}

/*AFTER*/
@EqualsAndHashCode(callSuper=true,exclude={&amp;#34;address&amp;#34;,&amp;#34;city&amp;#34;,&amp;#34;state&amp;#34;,&amp;#34;zip&amp;#34;})
public class Person extends SentientBeing {
    enum Gender { Male, Female }
 
    @NonNull private String name;
    @NonNull private Gender gender;
 
    private String ssn;
    private String address;
    private String city;
    private String state;
    private String zip;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;data&#34;&gt;&lt;strong&gt;@Data&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Combina la funcionalidad de @ToString, @EqualsAndHashCode, @Getter, y @Setter, todo lo que un Plain Old Java Object (POJO) necesita. También se le pueden especificar parámetros como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;staticConstructor = &amp;ldquo;metodoFactoria&amp;rdquo; → El constructor se vuelve privado y se crea un método factoría con el nombre especificado.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*BEFORE*/
public class Company {
    private final Person founder;
    private String name;
    private List&amp;lt;Person&amp;gt; employees;
 
    private Company(final Person founder) {
        this.founder = founder;
    }
 
    public static Company of(final Person founder) {
        return new Company(founder);
    }
 
    public Person getFounder() {
        return founder;
    }
 
    public String getName() {
        return name;
    }
 
    public void setName(final String name) {
        this.name = name;
    }
 
    public List&amp;lt;Person&amp;gt; getEmployees() {
        return employees;
    }
 
    public void setEmployees(final List&amp;lt;Person&amp;gt; employees) {
        this.employees = employees;
    }
 
    @java.lang.Override
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (o == null) return false;
        if (o.getClass() != this.getClass()) return false;
        final Company other = (Company)o;
        if (this.founder == null ? other.founder != null : !this.founder.equals(other.founder)) return false;
        if (this.name == null ? other.name != null : !this.name.equals(other.name)) return false;
        if (this.employees == null ? other.employees != null : !this.employees.equals(other.employees)) return false;
        return true;
    }
 
    @java.lang.Override
    public int hashCode() {
        final int PRIME = 31;
        int result = 1;
        result = result * PRIME + (this.founder == null ? 0 : this.founder.hashCode());
        result = result * PRIME + (this.name == null ? 0 : this.name.hashCode());
        result = result * PRIME + (this.employees == null ? 0 : this.employees.hashCode());
        return result;
    }
 
    @java.lang.Override
    public java.lang.String toString() {
        return &amp;#34;Company(founder=&amp;#34; + founder + &amp;#34;, name=&amp;#34; + name + &amp;#34;, employees=&amp;#34; + employees + &amp;#34;)&amp;#34;;
    }
}

/*AFTER*/
@Data(staticConstructor=&amp;#34;of&amp;#34;)
public class Company {
    private final Person founder;
    private String name;
    private List&amp;lt;Person&amp;gt; employees;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;builder&#34;&gt;@&lt;strong&gt;Builder&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Usaremos el patrón Builder sin necesidad de implementar código para ello, bastante útil también en la ejecución de test (unit test por ejemplo) en donde debemos crear el objeto con atributos válidos o por defecto.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Getter
@Builder
public class Widget {
    private final String name;
    private final int id;
}
/************************************/
Widget testWidget = Widget.builder()
  .name(&amp;#34;foo&amp;#34;)
  .id(1)
  .build();
 
assertThat(testWidget.getName())
  .isEqualTo(&amp;#34;foo&amp;#34;);
assertThat(testWidget.getId())
  .isEqualTo(1);
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Deploy básico usando Heroku y Git</title>
        <link>https://raulpadilladelgado.github.io/blog/p/deploy-b%C3%A1sico-usando-heroku-y-git/</link>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/deploy-b%C3%A1sico-usando-heroku-y-git/</guid>
        <description>&lt;p&gt;Heroku nos va a permitir alojar nuestras aplicaciones en sus servidores, y acceder a éstas desde un enlace que nos proporcione.&lt;/p&gt;
&lt;p&gt;Tras crear una cuenta y descargar la línea de comandos de Heroku, nos dirigimos a la carpeta donde tengamos nuestro proyecto y ejecutamos lo siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iniciar sesión con heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;heroku login&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inicializar repositorio con Git y primer commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git commit -m &amp;quot;primer commit&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear espacio para nuestra app en servidor de heroku -&amp;gt; automáticamente añade un repositorio remoto &amp;ldquo;heroku&amp;rdquo; el que haremos push para subir nuestro proyecto a ese espacio.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;heroku apps:create pady-demo-boot&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subir nuestro proyecto al espacio creado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git push heroku master&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abrir aplicación alojada en servidor de heroku&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;heroku open&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Nos proporciona un servicio gratuito para gestionar nuestra base de datos Postgresql.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;heroku pg:psql
insert into...
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Kata Word Wrap</title>
        <link>https://raulpadilladelgado.github.io/blog/p/kata-word-wrap/</link>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/kata-word-wrap/</guid>
        <description>&lt;p&gt;Recientemente he estado realizando una kata que consistía en partir una palabra (salto de línea) acorde a un ancho de columna, algo así como el funcionamiento de los editores de texto cuando se establece el ajuste de línea. La idea consistía en ajustar la palabras, y a su vez tantas veces el resto de ésta palabra como para que la longitud del texto en cada línea no supere el ancho de columna. Un ejercicio que da mucho que pensar y del cual pude experimentar como ir buscando poco a poco un patrón que se repite en el código para llevarlo hacía un bucle o una recursividad que haga lo que necesitamos para partir la palabra cuantas veces se necesite, y que controlamos en todo momento su funcionamiento sin necesidad de depurar y asegurando que va cumpliendo los test que proponemos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Entrada (Texto, Ancho de columna)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Hola Mundo&amp;rdquo;, 6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Salida&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Hola/nMundo&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Esto fue un ejemplo sencillo que se trataba. Para conocer más a fondo adjunto repositorio en GitHub:&lt;/p&gt;
&lt;p&gt;⬇️ ⬇️ ⬇️ ⬇️ ⬇️ ⬇️ ⬇️ ⬇️ ⬇️ ⬇️&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/raulpadilladelgado/practica_katas&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Repositorio Práctica Word Wrap&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Reemplazar constructores por métodos de factoría</title>
        <link>https://raulpadilladelgado.github.io/blog/p/reemplazar-constructores-por-m%C3%A9todos-de-factor%C3%ADa/</link>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/reemplazar-constructores-por-m%C3%A9todos-de-factor%C3%ADa/</guid>
        <description>&lt;p&gt;Pongamos el ejemplo de que creamos una clase &amp;ldquo;Texto&amp;rdquo; y queremos admitir para su atributo &amp;ldquo;texto&amp;rdquo; los valores nulos como String vacíos, podríamos implementar ésta funcionalidad en el constructor, algo que quedaría así:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public Texto(String texto){
	if(texto==null){texto=&amp;#34;&amp;#34;;}
	this.texto=texto;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Es perfectamente funcional, pero para conseguir un código en el que cada componente haga lo que se espera de él, lo mejor sería delegar ésta comprobación a un método de factoría, un método estático que llame al constructor, estableciendo el constructor privado.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;private Texto(String texto){this.texto=texto;}

public static Texto crearTexto(String texto){
	if(texto==null){return &amp;#34;&amp;#34;;}
	return texto;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Con el código anterior nuestro constructor queda más limpio y hace solo lo que debería hacer.&lt;/p&gt;
&lt;p&gt;En el caso de que nuestro sistema no aceptará los valores nulos como String vacíos, podíamos haber codificado que retorne una excepción en lugar de cambiar ese parámetro pasado a la función. Un constructor que retorna una excepción es algo que ningún programador espera cuando llama a un constructor, este es otro gran ejemplo de que la mejor implementación sería delegar este retorno de excepción en un método de factoría.&lt;/p&gt;
&lt;p&gt;En IntelliJ, podemos hacemos un refactor automático de ésto con el comando &amp;ldquo;Replace constructor with factory method&amp;rdquo; del menú de refactorización.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Spring boot, primer contacto</title>
        <link>https://raulpadilladelgado.github.io/blog/p/spring-boot-primer-contacto/</link>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/spring-boot-primer-contacto/</guid>
        <description>&lt;img src="https://raulpadilladelgado.github.io/blog/p/spring-boot-primer-contacto/images/spring-icon.png" alt="Featured image of post Spring boot, primer contacto" /&gt;&lt;h1 id=&#34;inicio&#34;&gt;Inicio&lt;/h1&gt;
&lt;h2 id=&#34;arrancando-con-un-proyecto&#34;&gt;Arrancando con un proyecto&lt;/h2&gt;
&lt;p&gt;Para crear un proyecto de una forma rápida y sencilla he encontrado &lt;a class=&#34;link&#34; href=&#34;https://start.spring.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Spring Initializr&lt;/a&gt;. Es muy simple, basta con elegir lenguaje, versión y otras configuraciones, como los metadatos del proyecto, y finalmente las dependencias del proyecto Spring que usaremos.&lt;/p&gt;
&lt;p&gt;Si elegimos &amp;ldquo;generar&amp;rdquo; nos descarga un archivo zip que cual contiene el proyecto creado ya preparado para empezar a trabajar con él.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 236; 
			flex-basis: 568px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/spring-boot-primer-contacto/images/Untitled.png&#34; data-size=&#34;400x169&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/spring-boot-primer-contacto/images/Untitled.png&#34;
			width=&#34;400&#34;
			height=&#34;169&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;estructura-de-un-proyecto&#34;&gt;Estructura de un proyecto&lt;/h2&gt;
&lt;p&gt;En el archivo pom.xml tenemos la configuración que realizamos en Spring Initializr.&lt;/p&gt;
&lt;p&gt;En src → main → Java → com.example.demo, tenemos una clase DemoApplication que tiene un método main con algo de código, que nos servirá para comprobar que todo está bien y que nuestro proyecto está preparado para ser usado.&lt;/p&gt;
&lt;p&gt;En src → main → Resources, tenemos dos carpetas para guardar archivos para nuestra aplicación web, como plantillas.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 44; 
			flex-basis: 107px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/spring-boot-primer-contacto/images/Untitled1.png&#34; data-size=&#34;287x640&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/spring-boot-primer-contacto/images/Untitled1.png&#34;
			width=&#34;287&#34;
			height=&#34;640&#34;
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;inyección-de-dependencias&#34;&gt;Inyección de dependencias&lt;/h1&gt;
&lt;h2 id=&#34;repositorios&#34;&gt;Repositorios&lt;/h2&gt;
&lt;p&gt;Por convención para guardar datos se usan los repositorios. A la clase que definamos como repositorio le añadimos la anotación &amp;ldquo;@Repository&amp;rdquo; para que el framework entienda que se usara dicha clase como la capa de repositorio.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Repository
public class PersonaRepositoryImpl implements PersonaRepository {
    private static Logger LOG = LoggerFactory.getLogger(PruebaSpringBootApplication.class);
    @Override
    public void registrar(String nombre) {
        LOG.info(&amp;#34;SE REGISTRO A &amp;#34;+ nombre);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;servicios&#34;&gt;Servicios&lt;/h2&gt;
&lt;p&gt;Es la capa de lógica de negocio. La clase debe llevar la anotación &amp;ldquo;@Service&amp;rdquo; para indicar que funcionará como la capa de negocio. Si ponemos el ejemplo de que éste servicio actúa sobre un repositorio, podemos crear una instancia del repositorio con la etiqueta &amp;ldquo;@Autowired&amp;rdquo;, para que sea el propio Spring quien se encargue de crear una instancia de la clase.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Service
public class PersonaServiceImpl implements PersonaService {
    @Autowired
    private PersonaRepository repo;
    @Override
    public void registrar(String nombre) {
    repo.registrar(nombre);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;qualifier&#34;&gt;Qualifier&lt;/h2&gt;
&lt;p&gt;Para tener varias implementaciones de una interfaz usaremos la etiqueta &amp;ldquo;@Qualifier&amp;rdquo;. En éste ejemplo tenemos dos tipos de personas (repositorios), y después desde un servicio accederemos a uno de los repos con la misma anotación.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Repository
@Qualifier(&amp;#34;persona1&amp;#34;)
public class PersonaRepositoryImpl implements PersonaRepository {
    private static Logger LOG = LoggerFactory.getLogger(PruebaSpringBootApplication.class);
    @Override
    public void registrar(String nombre) {
        LOG.info(&amp;#34;SE REGISTRO A &amp;#34;+ nombre);
    }
}
/**************************************************************************************/
@Repository
@Qualifier(&amp;#34;persona2&amp;#34;)
public class PersonaRepositoryImpl2 implements PersonaRepository {
    private static Logger LOG = LoggerFactory.getLogger(PruebaSpringBootApplication.class);
    @Override
    public void registrar(String nombre) {
        LOG.info(&amp;#34;SE REGISTRO A &amp;#34;+ nombre + &amp;#34;(persona2)&amp;#34;);
    }
}
/**************************************************************************************/
@Service
public class PersonaServiceImpl implements PersonaService {
    @Autowired
    @Qualifier(&amp;#34;persona2&amp;#34;)
    private PersonaRepository repo;
    @Override
    public void registrar(String nombre) {
    repo.registrar(nombre);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;spring-data-jpa&#34;&gt;Spring Data (JPA)&lt;/h1&gt;
&lt;p&gt;Vamos a crear una aplicación que se conecte a una base de datos usando JPA, un módulo que facilita la implementación de repositorios basados en JPA. Creamos una carpeta &amp;ldquo;modelos&amp;rdquo; y dentro una clase que definirá el modelo de nuestra tabla en la BD.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Persona.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Entity
public class Persona {
    @Id
    private int idPersona;
    @Column(name = &amp;#34;nombre&amp;#34;,length = 50)
    private String nombre;

    public int getIdPersona() {
        return idPersona;
    }

    public void setIdPersona(int idPersona) {
        this.idPersona = idPersona;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Después, creamos dentro de &amp;ldquo;repositorios&amp;rdquo; una interfaz que extienda de &amp;ldquo;JpaRepository&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;IPersonaRepositorio.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface IPersonaRepositorio extends JpaRepository&amp;lt;Persona,Integer&amp;gt; {
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Es necesario que el archivo &lt;a class=&#34;link&#34; href=&#34;http://application.properties/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;application.properties&lt;/a&gt; tenga configurado lo siguiente:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost/Welcome
spring.datasource.username=postgresql
spring.datasource.password=passwword
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;El siguiente paso es crear la base de datos desde pgAdmin 4 (Postgresql), y ejecutar la aplicación para que se nos cree la estructura de tablas.&lt;/p&gt;
&lt;p&gt;Para que se nos cree una tabla en la BD y meter datos dentro de ésta, definiremos nuestro método para insertar datos a la tabla.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;WelcomeController.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;				@Autowired
        private IPersonaRepositorio repositorio;
        @GetMapping(&amp;#34;/welcome&amp;#34;)
        public String welcome(@RequestParam(name=&amp;#34;name&amp;#34;,required = false,defaultValue = &amp;#34;suso&amp;#34;) String name, Model model) {
            Persona p = new Persona();
            p.setIdPersona((int) repositorio.count());
            p.setNombre(name);
            repositorio.save(p);
            model.addAttribute(&amp;#34;name&amp;#34;, name);
            return &amp;#34;welcome&amp;#34;;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Tendremos otro método que listara todo el contenido de la tabla. Le crearemos una plantilla para mostrar los datos guardados en el modelo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;WelcomeController.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;		@GetMapping(&amp;#34;/listar&amp;#34;)
    public String todasLasPersonas(Model model) {
        model.addAttribute(&amp;#34;personas&amp;#34;,repositorio.findAll());
        return &amp;#34;personas&amp;#34;;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ahora nos queda recorrer en la vista la lista de personas guardadas en el Model.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personas.html&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34; xmlns:th=&amp;#34;&amp;lt;http://www.thymeleaf.org&amp;gt;&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;table&amp;gt;
    &amp;lt;th:block th:each=&amp;#34;persona : ${personas}&amp;#34;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td th:text=&amp;#34;${persona.idPersona}&amp;#34;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td th:text=&amp;#34;${persona.nombre}&amp;#34;&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/th:block&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;servicios-rest-crud&#34;&gt;Servicios Rest (CRUD)&lt;/h1&gt;
&lt;p&gt;Se usa para describir cualquier interfaz entre sistemas que utilice directamente HTTP para obtener datos o indicar la ejecución de operaciones sobre los datos en cualquier formato (XML, JSON, etc).&lt;/p&gt;
&lt;p&gt;Para crear un controlador que utilice los servicios Rest utilizamos la anotación &amp;ldquo;@RestController&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;método-get&#34;&gt;&lt;strong&gt;Método Get&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Si queremos definir la operación get, usaremos &amp;ldquo;@GetMapping&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;método-post&#34;&gt;&lt;strong&gt;Método Post&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Si queremos definir la operación Post, usaremos &amp;ldquo;@PostMapping&amp;rdquo;. Es necesario pasar como parámetro &amp;ldquo;@RequestBody Objeto o&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;método-put&#34;&gt;&lt;strong&gt;Método Put&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Si queremos definir la operación Put, usaremos &amp;ldquo;@PutMapping&amp;rdquo;. Funciona igual que el Post, pero con la diferencia de que si encuentra un id ya existente la operación será una actualización.&lt;/p&gt;
&lt;h2 id=&#34;método-delete&#34;&gt;&lt;strong&gt;Método Delete&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Si queremos definir la operación Delete, usaremos &amp;ldquo;@DeleteMapping&amp;rdquo;, que llevar como parámetro el valor (id) que se recoge en la ruta. En el argumento del método, recogemos el id mediante &amp;ldquo;@PathVariable(id)&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;RestDemoController.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@RestController
public class RestDemoController {

    @Autowired
    private IPersonaRepositorio repositorio;

    @GetMapping
    public List&amp;lt;Persona&amp;gt; listar(){
        return repositorio.findAll();
    }

  @PostMapping
    public void insertar(@RequestBody Persona persona){
       repositorio.save(persona);
    }

  @PutMapping
    public void modificar(@RequestBody Persona persona){
        repositorio.save(persona);
    }

    @DeleteMapping(value = &amp;#34;/{id}&amp;#34;)
    public void eliminar(@PathVariable(&amp;#34;id&amp;#34;) Integer id){
        repositorio.deleteById(id);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;mvc-thymeleaf&#34;&gt;MVC Thymeleaf&lt;/h1&gt;
&lt;h2 id=&#34;controladores&#34;&gt;Controladores&lt;/h2&gt;
&lt;p&gt;Por un lado tenemos los controladores, anotamos la clase mediante &amp;ldquo;@Controller&amp;rdquo;. Los métodos que se desea que funcionen como ruta de nuestra aplicación web, debe tener la anotación &amp;ldquo;@GetMapping(&amp;lsquo;ruta_a_elegir&amp;rsquo;)&amp;rdquo;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Controller
public class MainController {
    @GetMapping(&amp;#34;/welcome&amp;#34;)
    public String welcome(@RequestParam(name=&amp;#34;name&amp;#34;,required = false,defaultValue = &amp;#34;suso&amp;#34;) String name, Model model){
        model.addAttribute(&amp;#34;name&amp;#34;,name);
        return &amp;#34;Welcome&amp;#34;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Si se pasa parámetro en la ruta, se recoge mediante &amp;ldquo;@RequestParam&amp;rdquo; en éste caso en la variable name(String) y se guarda en la variable model(Model), la cual lo usamos para pasar datos a las vistas.&lt;/p&gt;
&lt;h2 id=&#34;vistas&#34;&gt;Vistas&lt;/h2&gt;
&lt;p&gt;Para crear las vistas añadimos nuestras páginas html en la carpeta &amp;ldquo;Templates&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;El controlador debe indicar en el return el nombre de la vista a la que se dirige.&lt;/p&gt;
&lt;p&gt;Necesitamos referenciar en la etiqueta html el motor de plantillas de thymeleaf (xmlns:th=&amp;quot;&lt;a class=&#34;link&#34; href=&#34;http://www.thymeleaf.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.thymeleaf.org&lt;/a&gt;&amp;quot;). Para incrustar texto en una etiqueta usando dicho motor, usamos &amp;ldquo;th:text&amp;rdquo;, al cual le podemos indicar una variable guardada en el objeto model con &amp;ldquo;${variable}&amp;rdquo;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34; xmlns:th=&amp;#34;&amp;lt;http://www.thymeleaf.org&amp;gt;&amp;#34;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;p th:text=&amp;#34;&amp;#39;Bienvenido, &amp;#39;+${name}&amp;#34;/&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;spring-security&#34;&gt;Spring security&lt;/h1&gt;
&lt;p&gt;Éstas dependencias nos crearán automáticamente un login para nuestra aplicación web, en el que podemos editar el usuario y contraseña de la siguiente manera en el archivo application.properties &lt;a class=&#34;link&#34; href=&#34;http://spring.security.user.name&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;spring.security.user.name&lt;/a&gt; = pady spring.security.user.password= 1234 Es un ejemplo poco práctico, ya que lo óptimo sería comprobar los usuarios mediante una base de datos. Creamos la clase usuario y su repositorio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Usuario.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Entity
public class Usuario {
    @Id
    private int id;
    private String nombre;
    private String clave;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getClave() {
        return clave;
    }

    public void setClave(String clave) {
        this.clave = clave;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;IUsuarioRepositorio.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface IUsuarioRepositorio extends JpaRepository&amp;lt;Usuario,Integer&amp;gt; {
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Agregamos nuestro usuario a la tabla&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SpringDataApplicationTests.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Autowired
 private IUsuarioRepositorio repositorio_usuarios;
 @Test
 void crearUsuario() {
  Usuario usuario = new Usuario();
  usuario.setId(0);
  usuario.setClave(&amp;#34;1234&amp;#34;);
  usuario.setNombre(&amp;#34;pady&amp;#34;);
  Usuario actual = repositorio_usuarios.save(usuario);
  assertEquals(&amp;#34;1234&amp;#34;,actual.getClave());
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Vamos a crear una clase de configuración en nuestro proyecto, en la que usaremos un @Bean de Spring para cifrar las contraseñas que se guardan en la base datos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SecurityConfig.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Configuration
public class SecurityConfig {
    @Bean
    public BCryptPasswordEncoder passwordEncoder(){
        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();
        return bCryptPasswordEncoder;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finalmente lo instanciamos en la clase donde interese, y usamos su método encode.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SpringDataApplicationTests.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Autowired
 private BCryptPasswordEncoder encoder;
 @Test
 void crearUsuario() {
  Usuario usuario = new Usuario();
  usuario.setId(1);
  usuario.setClave(encoder.encode(&amp;#34;1234&amp;#34;));
  String expected = usuario.getClave();
  usuario.setNombre(&amp;#34;pady&amp;#34;);
  Usuario actual = repositorio_usuarios.save(usuario);
  assertEquals(expected,actual.getClave());
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Para habilitar @WebSecurity necesitamos que nuestra clase de configuración extienda de WebSecurityConfigureAdapter . Sobreescibrimos los métodos configure para indicar de donde sacaremos los usuarios a comparar. Pero primero debemos crear una clase UserService que extienda de UserDetailsService , en la cual instanciamos el repositorio de usuarios, y sobrescribimos el método de la clase extendida. Para configurar el método de la clase extendida, tenemos que tener un método que busque por un nombre de usuario, y no por un id, así que vamos a la interfaz repositorio de usuarios y creamos dicho método.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;IUsuarioRepositorio.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface IUsuarioRepositorio extends JpaRepository&amp;lt;Usuario,Integer&amp;gt; {
    Usuario findByNombre(String nombre);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;UserService.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Service
public class UserService implements UserDetailsService {
    @Autowired
    private IUsuarioRepositorio repositorio;
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Usuario encontrado = repositorio.findByNombre(username);
        List&amp;lt;GrantedAuthority&amp;gt; roles = new ArrayList&amp;lt;&amp;gt;();
        roles.add(new SimpleGrantedAuthority(&amp;#34;ADMIN&amp;#34;));
        UserDetails userDet = new User(encontrado.getNombre(),encontrado.getClave(),roles);
        return userDet;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;SecurityConfig.java&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Autowired
    private UserService userServiceDetails;
    @Autowired
    private BCryptPasswordEncoder bcrypt;
    @Bean
    public BCryptPasswordEncoder passwordEncoder(){
        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();
        return bCryptPasswordEncoder;
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.userDetailsService(userServiceDetails).passwordEncoder(bcrypt);
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        super.configure(http);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;PROYECTO DE EJEMPLO&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;⬇️ ⬇️ ⬇️ ⬇️ ⬇️ ⬇️&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/raulpadilladelgado/PruebaSpringBoot&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PruebaSpringBoot&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;RESUMEN&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Todo lo necesario para implementar un login mediante JPA, utilizando Postgresql como motor de base de datos.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Definir un modelo&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Entity
public class Usuario {
    @Id
    private int id;
    private String nombre;
    private String clave;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getClave() {
        return clave;
    }

    public void setClave(String clave) {
        this.clave = clave;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Crear un repositorio&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface UsuarioRepository extends JpaRepository&amp;lt;Usuario,Integer&amp;gt; {
    Usuario findByNombre(String nombre);
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Servicio de usuarios&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Service
public class UsuarioService implements UserDetailsService {
    @Autowired
    private UsuarioRepository repositorio;

    @Autowired
    private BCryptPasswordEncoder encoder;

    public void crearUsuario() {
        Usuario usuario = new Usuario();
        usuario.setId((int)repositorio.count()+1);
        usuario.setClave(encoder.encode(&amp;#34;1234&amp;#34;));
        usuario.setNombre(&amp;#34;pady&amp;#34;);
        repositorio.save(usuario);
    }
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Usuario encontrado = repositorio.findByNombre(username);
        List&amp;lt;GrantedAuthority&amp;gt; roles = new ArrayList&amp;lt;&amp;gt;();
        roles.add(new SimpleGrantedAuthority(&amp;#34;ADMIN&amp;#34;));
        UserDetails userDet = new User(encontrado.getNombre(),encontrado.getClave(),roles);
        return userDet;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Security Config&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Autowired
    private UsuarioService userServiceDetails;
    @Autowired
    private BCryptPasswordEncoder bcrypt;
    @Bean
    public BCryptPasswordEncoder passwordEncoder(){
        BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();
        return bCryptPasswordEncoder;
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userServiceDetails).passwordEncoder(bcrypt);
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                .antMatchers(&amp;#34;/&amp;#34;).permitAll()
                .anyRequest().authenticated()
                .and()
                .formLogin()
                .loginPage(&amp;#34;/login&amp;#34;)
                .permitAll()
                .and()
                .logout()
                .permitAll();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Creación de usuarios&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@SpringBootTest
class PracticaSpringBootApplicationTests {
 @Autowired
 private UsuarioService servicio;
 @Test
 void contextLoads() {
  servicio.crearUsuario();
 }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Value object VS Entity object</title>
        <link>https://raulpadilladelgado.github.io/blog/p/value-object-vs-entity-object/</link>
        <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/value-object-vs-entity-object/</guid>
        <description>&lt;h1 id=&#34;value-object&#34;&gt;Value object&lt;/h1&gt;
&lt;p&gt;En el modelo Value Object, un objeto se diferencia de otro por su contenido, no por su identidad propia.&lt;/p&gt;
&lt;p&gt;Podemos entender el concepto de Value Object con el ejemplo de las monedas. Aunque cada moneda de 1 euro tiene su propia identidad (un número de serie), la economía funciona porque entiende que una moneda de 1 euro es igual que otra moneda de un euro, ambas valen lo mismo y a efectos prácticos son iguales.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function createCoin() {

   return {

     value: 1

   }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Los estados en un modelo Value Object son inmutables. Si queremos cambiar una característica, crearemos un nuevo objeto con esa característica, en lugar de ir modificando los estados de un único objeto. Un objeto que tiene variables de estado y que nunca cambia se llama objeto inmutable. Por lo tanto, utilizaré el modelo de Value Object cuando tenga sentido crear nuevos objetos en lugar de confiar en un único objeto e ir cambiando su estado.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;String&lt;/em&gt; en JS es un objeto inmutable y lo tratamos como &lt;em&gt;Value Object&lt;/em&gt;. Por ello, todos los métodos que se aplican sobre &lt;em&gt;string&lt;/em&gt; generan un nuevo &lt;em&gt;string&lt;/em&gt; y no modifican el original.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var string = &amp;#39;Hello”;
string.replace(“H”, “x”); /*xello*/
string /*Hello*/
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;entity-object&#34;&gt;Entity object&lt;/h1&gt;
&lt;p&gt;Este tipo de objetos se comparan en función de su identidad. Son iguales si tienen la misma identidad, sin importar el contenido o valor. También es usual encontrarlos con atributos de identificación.&lt;/p&gt;
&lt;p&gt;En este modelo, el objeto tiene una identidad única e irrepetible. Además, el modelo permite que el estado del objeto vaya cambiando a lo largo del tiempo. Por lo tanto, aquello que tiene sentido que mute a lo largo del tiempo, suele implementarse como &lt;em&gt;Entity Object&lt;/em&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function user() {
   let id = Math.random();
   let age = 23;
   return {
      getAge: function() {
         return age;
      },
      birthday: function() {
         ++age;
      },
      getId: function() {
         return id;
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        <item>
        <title>Patrones de diseño (DAO y DTO)</title>
        <link>https://raulpadilladelgado.github.io/blog/p/patrones-de-dise%C3%B1o-dao-y-dto/</link>
        <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
        
        <guid>https://raulpadilladelgado.github.io/blog/p/patrones-de-dise%C3%B1o-dao-y-dto/</guid>
        <description>&lt;h1 id=&#34;dao&#34;&gt;DAO&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;DAO encapsula el acceso a la base de datos.&lt;/strong&gt; Por lo que cuando la capa de lógica de negocio necesite interactuar con la base de datos, va a hacerlo a través de la API que le ofrece DAO. Generalmente esta API consiste en métodos CRUD (Create, Read, Update y Delete). Entonces por ejemplo &lt;strong&gt;cuando la capa de lógica de negocio necesite guardar un dato en la base de datos&lt;/strong&gt;, va a llamar a un método create(). &lt;strong&gt;Lo que haga este método, es problema de DAO&lt;/strong&gt; y depende de como DAO implemente el método create(), puede que lo implemente de manera que los datos se almacenen en una base de datos relacional como puede que lo implemente de manera que los datos se almacenen en ficheros de texto. Lo importante es que la capa de lógica de negocio no tiene porque saberlo, lo único que sabe es que el método create() va a guardar los datos, así como el método delete() va a eliminarlos, el método update() actualizarlos, etc. Pero no tiene idea de como interactúa DAO con la base de datos.&lt;/p&gt;
&lt;p&gt;En una aplicación, hay tantos DAOs como modelos. Es decir, en una base de datos relacional, por cada tabla, habría un DAO.&lt;/p&gt;
&lt;p&gt;DAO consiste básicamente en una clase que es la que interactúa con la base de datos. Los métodos de esta clase dependen de la aplicación y de lo que queramos hacer. Pero generalmente se implementan los métodos CRUD para realizar las “4 operaciones básicas” de una base de datos.&lt;/p&gt;
&lt;h1 id=&#34;dto&#34;&gt;DTO&lt;/h1&gt;
&lt;p&gt;Los DTO (Data Transfer Object) son utilizados por DAO para &lt;strong&gt;transportar los datos desde la base de datos hacia la capa de lógica de negocio y viceversa&lt;/strong&gt;. Por ejemplo, cuando la capa de lógica de negocio llama al método create(), ¿qué es lo que hace DAO? inserta un nuevo dato… ¿pero qué dato? el que la capa de lógica de negocio le pase como parámetro… ¿y cómo se lo pasa este dato? bueno, a través de un DTO.&lt;/p&gt;
&lt;p&gt;Tiene como finalidad crear un objeto plano (POJO) con una serie de atributos que puedan ser enviados o recuperados del servidor en una sola invocación, de tal forma que un DTO puede contener información de múltiples fuentes o tablas y concentrarlas en una única clase simple.&lt;/p&gt;
&lt;p&gt;Dado que el objetivo de un DTO es utilizarlo como un objeto de transferencia entre el cliente y el servidor, es importante &lt;strong&gt;evitar tener operaciones de negocio o métodos que realicen cálculos sobre los datos,&lt;/strong&gt; es por ello que solo deberemos de tener los métodos GET y SET de los respectivos atributos del DTO.&lt;/p&gt;
&lt;p&gt;Por ejemplo, si tuviéramos una base de datos relacional con una tabla empleados, con los campos id, nombre y salario. Entonces tendríamos que crear una clase EmpleadoDTO, con los atributos id, nombre y salario, que van a utilizar la capa de negocio y de persistencia para transportar los datos entre las dos capas.&lt;/p&gt;
&lt;p&gt;Entonces cuando la capa de lógica de negocio quiera guardar un dato en la base de datos, va a crear un objeto EmpleadoDTO, a través de los accessors va a modificar los atributos, y después se lo va a pasar al método create() de DAO. Entonces DAO va a leer los datos del DTO, y los va a guardar en la base de datos.&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 196; 
			flex-basis: 470px&#34;
	&gt;
	&lt;a href=&#34;https://raulpadilladelgado.github.io/blog/blog/p/patrones-de-dise%C3%B1o-dao-y-dto/images/dao.png&#34; data-size=&#34;400x204&#34;&gt;
		&lt;img src=&#34;https://raulpadilladelgado.github.io/blog/blog/p/patrones-de-dise%C3%B1o-dao-y-dto/images/dao.png&#34;
			width=&#34;400&#34;
			height=&#34;204&#34;
			
			loading=&#34;lazy&#34;
			alt=&#34;https://1.bp.blogspot.com/-Cv3UY9NZdAU/XpiW6QJBnMI/AAAAAAAAAAw/FAM-NMV9DHEDhCsI94bp7na7KCYQJVN2QCLcBGAsYHQ/s400/dao.png&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;&lt;a class=&#34;link&#34; href=&#34;https://1.bp.blogspot.com/-Cv3UY9NZdAU/XpiW6QJBnMI/AAAAAAAAAAw/FAM-NMV9DHEDhCsI94bp7na7KCYQJVN2QCLcBGAsYHQ/s400/dao.png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://1.bp.blogspot.com/-Cv3UY9NZdAU/XpiW6QJBnMI/AAAAAAAAAAw/FAM-NMV9DHEDhCsI94bp7na7KCYQJVN2QCLcBGAsYHQ/s400/dao.png&lt;/a&gt;&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;entidad-vs-dto&#34;&gt;Entidad vs DTO&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Las entidades son clases que fueron diseñadas para mapear contra la base de datos&lt;/strong&gt;, no para ser una vista para una pantalla o servicio determinado. Lo óptimo sería tener un DTO con todos los datos recogidos de la base de datos, y no modificar la entidad ya que nos llevará a una restructuración de la base de datos que busca cubrir los requerimientos de transferencia de datos, dejando de lado el verdadero propósito de la entidad, que es únicamente mapear contra la base de datos&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
