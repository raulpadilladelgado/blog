<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>arquitectura-de-software on Raúl Padilla Delgado</title>
    <link>https://raulpadilladelgado.github.io/blog/categories/arquitectura-de-software/</link>
    <description>Recent content in arquitectura-de-software on Raúl Padilla Delgado</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Fri, 03 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://raulpadilladelgado.github.io/blog/categories/arquitectura-de-software/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Command Query Responsibility Segregation</title>
      <link>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</guid>
      <description>Contexto CQRS son las siglas de Command and Query Responsibility Segregation, un patrón que separa las operaciones de lectura y actualización para un almacén de datos. La flexibilidad creada por la migración a CQRS permite que un sistema evolucione mejor con el tiempo y evita que los comandos de actualización causen conflictos de fusión a nivel de dominio. Perfecto para aplicar en aplicaciones con gran carga de rendimiento.
Gracias a CQRS somo capaces de desacoplar la lógica de nuestro sistema por acciones, y en los siguientes puntos veremos como trata de realizarlo.</description>
    </item>
    
    <item>
      <title>Arquitectura hexagonal</title>
      <link>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</guid>
      <description>Introducción Arquitectura de software
Reglas autoimpuestas al definir como diseñamos software
¿Que ganamos entonces imponiéndonos este tipo de reglas?
Buscamos la mantenibilidad: Somos capaces de mantener mejor el código gracias a como formamos la arquitectura Buscamos la variabilidad: Somos capaces de reemplazar piezas de nuestra arquitectura sin aparentemente un costo muy grande Buscamos el testing: Somos capaces de testear nuestro código de una forma rápida, sencilla y eficaz. Buscamos la simplicidad: Somos capaces de tener un código simétrico, que sea fácil de entender.</description>
    </item>
    
  </channel>
</rss>
