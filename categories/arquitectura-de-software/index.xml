<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arquitectura De Software on Raúl Padilla Delgado</title>
    <link>https://raulpadilladelgado.github.io/blog/categories/arquitectura-de-software/</link>
    <description>Recent content in Arquitectura De Software on Raúl Padilla Delgado</description>
    <generator>Hugo</generator>
    <language>es</language>
    <lastBuildDate>Fri, 03 Dec 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://raulpadilladelgado.github.io/blog/categories/arquitectura-de-software/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Command Query Responsibility Segregation</title>
      <link>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/command-query-responsibility-segregation/</guid>
      <description>&lt;h1 id=&#34;contexto&#34;&gt;Contexto&lt;/h1&gt;&#xA;&lt;p&gt;CQRS son las siglas de Command and Query Responsibility Segregation, un patrón que separa las operaciones de lectura y actualización para un almacén de datos. La flexibilidad creada por la migración a CQRS permite que un sistema evolucione mejor con el tiempo y evita que los comandos de actualización causen conflictos de fusión a nivel de dominio. Perfecto para aplicar en aplicaciones con gran carga de rendimiento.&lt;/p&gt;&#xA;&lt;p&gt;Gracias a CQRS somo capaces de desacoplar la lógica de nuestro sistema por acciones, y en los siguientes puntos veremos como trata de realizarlo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arquitectura hexagonal</title>
      <link>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/arquitectura-hexagonal/</guid>
      <description>&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Arquitectura de software&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Reglas autoimpuestas al definir como diseñamos software&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;¿Que ganamos entonces imponiéndonos este tipo de reglas?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Buscamos la mantenibilidad: Somos capaces de mantener mejor el código gracias a como formamos la arquitectura&lt;/li&gt;&#xA;&lt;li&gt;Buscamos la variabilidad: Somos capaces de reemplazar piezas de nuestra arquitectura sin aparentemente un costo muy grande&lt;/li&gt;&#xA;&lt;li&gt;Buscamos el testing: Somos capaces de testear nuestro código de una forma rápida, sencilla y eficaz.&lt;/li&gt;&#xA;&lt;li&gt;Buscamos la simplicidad: Somos capaces de tener un código simétrico, que sea fácil de entender. Si entiende un caso de uso, serás capaz de entender cualquier otro, nuestro código se vuelve predecible.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Esto también nos aleja de errores que no queremos cometer:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
