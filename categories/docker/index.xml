<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Ra√∫l Padilla Delgado</title>
    <link>https://raulpadilladelgado.github.io/blog/categories/docker/</link>
    <description>Recent content in docker on Ra√∫l Padilla Delgado</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://raulpadilladelgado.github.io/blog/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Base de datos local con docker</title>
      <link>https://raulpadilladelgado.github.io/blog/p/base-de-datos-local-con-docker/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/base-de-datos-local-con-docker/</guid>
      <description>El siguiente ejemplo se ha desarrollado con Spring Boot.
Hacemos ciertos ajustes en applicacion.properties para configurar la conexi√≥n a la DB.
spring.jpa.database=POSTGRESQL spring.datasource.platform=postgres spring.datasource.url=jdbc:postgresql://localhost:5432/postgres spring.datasource.username=postgres spring.datasource.password=postgres spring.jpa.show-sql=true spring.jpa.generate-ddl=true spring.jpa.hibernate.ddl-auto=create-drop spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true Creamos y arrancamos el contenedor en Docker que use la imagen de PostgreSQL.
docker run --name my_postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres postgres Listo, ya podemos trabajar con nuestra base de datos en local ü•≥
Para cualquier duda el proyecto se puede consultar aqu√≠: https://github.</description>
    </item>
    <item>
      <title>Docker basics</title>
      <link>https://raulpadilladelgado.github.io/blog/p/docker-basics/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://raulpadilladelgado.github.io/blog/p/docker-basics/</guid>
      <description>Im√°genes vs Contenedores Para entender claramente ambos conceptos, me ayuda asemejarlos a la programaci√≥n habitual, entendiendo que las im√°genes son como clases y los contenedores como los objetos instanciados de las clases.
La imagen contiene la base para crear un contenedor, y √©ste carga la imagen para empezar a funcionar. Una imagen puede ser cargada en todos los contenedores que queramos, igual que un contenedor puede cargar varias im√°genes. Cualquier cambio realizado en sistema de archivos del contenedor no afecta a la imagen, pues la imagen solo se usa para la creaci√≥n del contenedor.</description>
    </item>
  </channel>
</rss>
